/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 05 08:34:58 GMT 2021
 */

package org.jhotdraw.gui;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import javax.swing.Box;
import javax.swing.JCheckBox;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.JToolBar;
import javax.swing.table.JTableHeader;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jhotdraw.gui.ToolBarLayout;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ToolBarLayout_ESTest extends ToolBarLayout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout(1);
      Box box0 = Box.createHorizontalBox();
      Dimension dimension0 = toolBarLayout0.minimumLayoutSize(box0);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout(0);
      JTableHeader jTableHeader0 = new JTableHeader();
      Dimension dimension0 = toolBarLayout0.maximumLayoutSize(jTableHeader0);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout(0);
      // Undeclared exception!
      try { 
        toolBarLayout0.preferredLayoutSize((Container) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.gui.ToolBarLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout(0);
      // Undeclared exception!
      try { 
        toolBarLayout0.minimumLayoutSize((Container) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.gui.ToolBarLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout();
      // Undeclared exception!
      try { 
        toolBarLayout0.maximumLayoutSize((Container) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.gui.ToolBarLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout();
      // Undeclared exception!
      try { 
        toolBarLayout0.layoutContainer((Container) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.gui.ToolBarLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout(2798);
      JCheckBox jCheckBox0 = new JCheckBox((String) null, false);
      Dimension dimension0 = toolBarLayout0.preferredLayoutSize(jCheckBox0);
      assertEquals(8, dimension0.height);
      assertEquals(8, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout(1);
      Box box0 = Box.createHorizontalBox();
      Dimension dimension0 = toolBarLayout0.preferredLayoutSize(box0);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout();
      JScrollPane jScrollPane0 = new JScrollPane();
      JScrollBar jScrollBar0 = jScrollPane0.createHorizontalScrollBar();
      Dimension dimension0 = toolBarLayout0.preferredLayoutSize(jScrollBar0);
      assertEquals(17, dimension0.height);
      assertEquals(31, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout(2798);
      JCheckBox jCheckBox0 = new JCheckBox((String) null, false);
      toolBarLayout0.layoutContainer(jCheckBox0);
      assertFalse(jCheckBox0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout();
      JScrollPane jScrollPane0 = new JScrollPane();
      toolBarLayout0.layoutContainer(jScrollPane0);
      assertFalse(jScrollPane0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout(1);
      Box box0 = Box.createHorizontalBox();
      toolBarLayout0.layoutContainer(box0);
      assertFalse(box0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout();
      JScrollPane jScrollPane0 = new JScrollPane();
      Dimension dimension0 = toolBarLayout0.minimumLayoutSize(jScrollPane0);
      assertEquals(58, dimension0.height);
      assertEquals(73, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout((-3976));
      JToolBar jToolBar0 = new JToolBar();
      float float0 = toolBarLayout0.getLayoutAlignmentY(jToolBar0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout(1);
      Box box0 = Box.createHorizontalBox();
      float float0 = toolBarLayout0.getLayoutAlignmentY(box0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout();
      JScrollPane jScrollPane0 = new JScrollPane();
      float float0 = toolBarLayout0.getLayoutAlignmentY(jScrollPane0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout(1);
      float float0 = toolBarLayout0.getLayoutAlignmentX((Container) null);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout((-3594));
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      float float0 = toolBarLayout0.getLayoutAlignmentX(jTextPane0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout();
      JScrollPane jScrollPane0 = new JScrollPane();
      JScrollBar jScrollBar0 = jScrollPane0.createHorizontalScrollBar();
      float float0 = toolBarLayout0.getLayoutAlignmentX(jScrollBar0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout((-3594));
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      toolBarLayout0.removeLayoutComponent(jTextPane0);
      assertFalse(jTextPane0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout((-3594));
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      Dimension dimension0 = toolBarLayout0.maximumLayoutSize(jTextPane0);
      toolBarLayout0.addLayoutComponent((Component) jTextPane0, (Object) dimension0);
      assertEquals(6, dimension0.width);
      assertEquals(6, dimension0.height);
      assertEquals(6.0, dimension0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout();
      JScrollPane jScrollPane0 = new JScrollPane();
      JScrollBar jScrollBar0 = jScrollPane0.createHorizontalScrollBar();
      toolBarLayout0.addLayoutComponent("nKuhr,4C+nF K", (Component) jScrollBar0);
      assertEquals(0, ToolBarLayout.X_AXIS);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout();
      JScrollPane jScrollPane0 = new JScrollPane();
      toolBarLayout0.invalidateLayout(jScrollPane0);
      assertFalse(jScrollPane0.isFocusTraversalPolicyProvider());
  }
}
