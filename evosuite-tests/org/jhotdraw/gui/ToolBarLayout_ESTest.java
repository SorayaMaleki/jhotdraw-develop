/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 05 07:38:09 GMT 2021
 */

package org.jhotdraw.gui;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTKeyStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import javax.swing.Action;
import javax.swing.CellRendererPane;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JRootPane;
import javax.swing.JSpinner;
import javax.swing.JSplitPane;
import javax.swing.JToolBar;
import javax.swing.JTree;
import javax.swing.border.LineBorder;
import javax.swing.text.StyledEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jhotdraw.color.ColorWheelChooser;
import org.jhotdraw.gui.Axis;
import org.jhotdraw.gui.ToolBarLayout;
import org.jhotdraw.gui.YAxis;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ToolBarLayout_ESTest extends ToolBarLayout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout();
      JToolBar jToolBar0 = new JToolBar("Md(X[6Ct#c6+", 0);
      YAxis yAxis0 = new YAxis();
      toolBarLayout0.axis = (Axis) yAxis0;
      StyledEditorKit.FontSizeAction styledEditorKit_FontSizeAction0 = new StyledEditorKit.FontSizeAction("(YSepvo|yt2_qL3", 1026);
      jToolBar0.add((Action) styledEditorKit_FontSizeAction0);
      toolBarLayout0.layoutContainer(jToolBar0);
      assertEquals(1, ToolBarLayout.Y_AXIS);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout();
      JToolBar jToolBar0 = new JToolBar("Md(X[6Ct#c6+", 0);
      toolBarLayout0.layoutContainer(jToolBar0);
      assertFalse(jToolBar0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout();
      CellRendererPane cellRendererPane0 = new CellRendererPane();
      Dimension dimension0 = toolBarLayout0.preferredLayoutSize(cellRendererPane0);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout();
      JList<Object> jList0 = new JList<Object>();
      Dimension dimension0 = toolBarLayout0.minimumLayoutSize(jList0);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout();
      JToolBar jToolBar0 = new JToolBar("Md(X[6Ct#c6+", 0);
      Dimension dimension0 = toolBarLayout0.minimumLayoutSize(jToolBar0);
      assertEquals(4, dimension0.height);
      assertEquals(18, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout();
      JSpinner jSpinner0 = new JSpinner();
      DefaultListModel<AWTKeyStroke> defaultListModel0 = new DefaultListModel<AWTKeyStroke>();
      JList<AWTKeyStroke> jList0 = new JList<AWTKeyStroke>(defaultListModel0);
      Color color0 = jList0.getSelectionForeground();
      LineBorder lineBorder0 = new LineBorder(color0, (-1644));
      jSpinner0.setBorder(lineBorder0);
      Dimension dimension0 = toolBarLayout0.minimumLayoutSize(jSpinner0);
      assertEquals((-3272), dimension0.height);
      assertEquals((-3249), dimension0.width);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout();
      JList<Object> jList0 = new JList<Object>();
      Dimension dimension0 = toolBarLayout0.maximumLayoutSize(jList0);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout();
      int int0 = toolBarLayout0.getAxis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout((-1827));
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator();
      JOptionPane jOptionPane0 = new JOptionPane(jToolBar_Separator0, 0, 1);
      // Undeclared exception!
      try { 
        toolBarLayout0.preferredLayoutSize(jOptionPane0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.gui.ToolBarLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout();
      // Undeclared exception!
      try { 
        toolBarLayout0.layoutContainer((Container) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.gui.ToolBarLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout((-418));
      // Undeclared exception!
      try { 
        toolBarLayout0.getLayoutAlignmentY((Container) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.gui.ToolBarLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout((-137));
      JToolBar jToolBar0 = new JToolBar("org.jhotdraw.color.JColorWheel");
      // Undeclared exception!
      try { 
        toolBarLayout0.getLayoutAlignmentX(jToolBar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.gui.ToolBarLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout((-1994));
      // Undeclared exception!
      try { 
        toolBarLayout0.getAxis();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.gui.ToolBarLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout((-151));
      YAxis yAxis0 = new YAxis();
      toolBarLayout0.axis = (Axis) yAxis0;
      ColorWheelChooser colorWheelChooser0 = new ColorWheelChooser();
      Dimension dimension0 = toolBarLayout0.preferredLayoutSize(colorWheelChooser0);
      assertEquals(260, dimension0.height);
      assertEquals(100, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout(0);
      // Undeclared exception!
      try { 
        toolBarLayout0.maximumLayoutSize((Container) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.gui.ToolBarLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout(1);
      int int0 = toolBarLayout0.getAxis();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout();
      JTree jTree0 = new JTree();
      toolBarLayout0.layoutContainer(jTree0);
      assertFalse(jTree0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout(1);
      JRootPane jRootPane0 = new JRootPane();
      toolBarLayout0.layoutContainer(jRootPane0);
      assertFalse(jRootPane0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout();
      JSplitPane jSplitPane0 = new JSplitPane();
      Dimension dimension0 = toolBarLayout0.preferredLayoutSize(jSplitPane0);
      assertEquals(202, dimension0.width);
      assertEquals(28, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout(1);
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("ww0 EkF'I}", true);
      float float0 = toolBarLayout0.getLayoutAlignmentY(jCheckBoxMenuItem0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout();
      JPasswordField jPasswordField0 = new JPasswordField("org.jhotdraw.gui.ToolBarLayout");
      float float0 = toolBarLayout0.getLayoutAlignmentY(jPasswordField0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout();
      JSplitPane jSplitPane0 = new JSplitPane();
      toolBarLayout0.removeLayoutComponent(jSplitPane0);
      assertFalse(jSplitPane0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout(1);
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("ww0 EkF'I}", true);
      Dimension dimension0 = toolBarLayout0.maximumLayoutSize(jCheckBoxMenuItem0);
      assertEquals(4, dimension0.width);
      assertEquals(4, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout();
      JPasswordField jPasswordField0 = new JPasswordField("org.jhotdraw.gui.ToolBarLayout");
      toolBarLayout0.addLayoutComponent((Component) jPasswordField0, (Object) jPasswordField0);
      assertFalse(jPasswordField0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout(1);
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("ww0 EkF'I}", true);
      toolBarLayout0.addLayoutComponent("ww0 EkF'I}", (Component) jCheckBoxMenuItem0);
      assertFalse(jCheckBoxMenuItem0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout(1);
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("ww0 EkF'I}", true);
      float float0 = toolBarLayout0.getLayoutAlignmentX(jCheckBoxMenuItem0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout(1);
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("ww0 EkF'I}", true);
      toolBarLayout0.invalidateLayout(jCheckBoxMenuItem0);
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout((-1133));
      // Undeclared exception!
      try { 
        toolBarLayout0.minimumLayoutSize((Container) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.gui.ToolBarLayout", e);
      }
  }
}
