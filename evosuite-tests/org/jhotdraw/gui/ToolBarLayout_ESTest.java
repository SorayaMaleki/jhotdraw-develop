/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 05 09:40:19 GMT 2021
 */

package org.jhotdraw.gui;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Checkbox;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.util.Hashtable;
import javax.swing.JLabel;
import javax.swing.JPopupMenu;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JTextField;
import javax.swing.JTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jhotdraw.color.ColorWheelChooser;
import org.jhotdraw.gui.Axis;
import org.jhotdraw.gui.ToolBarLayout;
import org.jhotdraw.gui.YAxis;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ToolBarLayout_ESTest extends ToolBarLayout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout();
      Object[] objectArray0 = new Object[1];
      JTree jTree0 = new JTree(objectArray0);
      Dimension dimension0 = toolBarLayout0.minimumLayoutSize(jTree0);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout();
      JSeparator jSeparator0 = new JSeparator(0);
      Dimension dimension0 = toolBarLayout0.maximumLayoutSize(jSeparator0);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout();
      int int0 = toolBarLayout0.getAxis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout(0);
      // Undeclared exception!
      try { 
        toolBarLayout0.preferredLayoutSize((Container) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.gui.ToolBarLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout();
      // Undeclared exception!
      try { 
        toolBarLayout0.minimumLayoutSize((Container) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.gui.ToolBarLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout(328);
      JTextField jTextField0 = new JTextField(0);
      // Undeclared exception!
      try { 
        toolBarLayout0.maximumLayoutSize(jTextField0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.gui.ToolBarLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout();
      // Undeclared exception!
      try { 
        toolBarLayout0.layoutContainer((Container) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.gui.ToolBarLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout((-1148));
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      // Undeclared exception!
      try { 
        toolBarLayout0.getLayoutAlignmentY(jPopupMenu0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.gui.ToolBarLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout(1706);
      JLabel jLabel0 = new JLabel();
      // Undeclared exception!
      try { 
        toolBarLayout0.getLayoutAlignmentX(jLabel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.gui.ToolBarLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout();
      YAxis yAxis0 = new YAxis();
      toolBarLayout0.axis = (Axis) yAxis0;
      JScrollPane jScrollPane0 = new JScrollPane();
      JScrollBar jScrollBar0 = jScrollPane0.getVerticalScrollBar();
      Dimension dimension0 = toolBarLayout0.preferredLayoutSize(jScrollBar0);
      assertEquals(17, dimension0.width);
      assertEquals(30, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout(0);
      Hashtable<Checkbox, String> hashtable0 = new Hashtable<Checkbox, String>();
      JTree jTree0 = new JTree(hashtable0);
      Dimension dimension0 = toolBarLayout0.preferredLayoutSize(jTree0);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout(0);
      Hashtable<Checkbox, String> hashtable0 = new Hashtable<Checkbox, String>();
      JTree jTree0 = new JTree(hashtable0);
      toolBarLayout0.layoutContainer(jTree0);
      assertFalse(jTree0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout();
      YAxis yAxis0 = new YAxis();
      toolBarLayout0.axis = (Axis) yAxis0;
      JScrollPane jScrollPane0 = new JScrollPane();
      toolBarLayout0.layoutContainer(jScrollPane0);
      assertTrue(jScrollPane0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout(1);
      int int0 = toolBarLayout0.getAxis();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout();
      ColorWheelChooser colorWheelChooser0 = new ColorWheelChooser();
      Dimension dimension0 = toolBarLayout0.minimumLayoutSize(colorWheelChooser0);
      assertEquals(123, dimension0.width);
      assertEquals(160, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout();
      JScrollPane jScrollPane0 = new JScrollPane();
      JScrollBar jScrollBar0 = jScrollPane0.getHorizontalScrollBar();
      toolBarLayout0.removeLayoutComponent(jScrollBar0);
      assertFalse(jScrollBar0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout();
      JScrollPane jScrollPane0 = new JScrollPane();
      Dimension dimension0 = toolBarLayout0.maximumLayoutSize(jScrollPane0);
      assertEquals(73, dimension0.width);
      assertEquals(58, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout(0);
      Hashtable<Checkbox, String> hashtable0 = new Hashtable<Checkbox, String>();
      JTree jTree0 = new JTree(hashtable0);
      toolBarLayout0.addLayoutComponent((Component) jTree0, (Object) 1);
      assertTrue(jTree0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout(0);
      Hashtable<Checkbox, String> hashtable0 = new Hashtable<Checkbox, String>();
      JTree jTree0 = new JTree(hashtable0);
      float float0 = toolBarLayout0.getLayoutAlignmentY(jTree0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout();
      JScrollPane jScrollPane0 = new JScrollPane();
      JScrollBar jScrollBar0 = jScrollPane0.getHorizontalScrollBar();
      toolBarLayout0.addLayoutComponent("k", (Component) jScrollBar0);
      assertEquals(0, ToolBarLayout.X_AXIS);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout();
      ColorWheelChooser colorWheelChooser0 = new ColorWheelChooser();
      float float0 = toolBarLayout0.getLayoutAlignmentX(colorWheelChooser0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout(0);
      Hashtable<Checkbox, String> hashtable0 = new Hashtable<Checkbox, String>();
      JTree jTree0 = new JTree(hashtable0);
      toolBarLayout0.invalidateLayout(jTree0);
      assertFalse(jTree0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ToolBarLayout toolBarLayout0 = new ToolBarLayout((-2225));
      // Undeclared exception!
      try { 
        toolBarLayout0.getAxis();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.gui.ToolBarLayout", e);
      }
  }
}
