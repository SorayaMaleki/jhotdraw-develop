/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 05 08:43:57 GMT 2021
 */

package org.jhotdraw.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.io.Serializable;
import java.net.URI;
import java.net.URL;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jhotdraw.io.Base64;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte)34;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)29, (byte)78, (byte) (-76), (byte)34}, byteArray0);
      
      byte[] byteArray1 = Base64.decode("CATGq+qtP");
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)8, (byte)4, (byte) (-58), (byte) (-85), (byte) (-22), (byte) (-83)}, byteArray1);
      
      String string0 = Base64.encodeBytes(byteArray1, 3, 1);
      assertEquals("qw==", string0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(string0);
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)8, (byte)4, (byte) (-58), (byte) (-85), (byte) (-22), (byte) (-83)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("!E6");
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.append('Q');
      assertNotNull(printStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      Base64.OutputStream base64_OutputStream0 = new Base64.OutputStream(printStream0, 1);
      assertNotNull(base64_OutputStream0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)0;
      mockPrintStream0.println();
      assertSame(mockPrintStream0, printStream0);
      
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)57;
      base64_OutputStream0.write(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(7, byteArray0.length);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertArrayEquals(new byte[] {(byte)72, (byte)82, (byte)51, (byte)0, (byte)66, (byte)0, (byte)57}, byteArray0);
      
      String string0 = Base64.encodeBytes(byteArray0, (int) (byte)66, 0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)72, (byte)82, (byte)51, (byte)0, (byte)66, (byte)0, (byte)57}, byteArray0);
      
      base64_OutputStream0.write((int) (byte)51);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      String string1 = Base64.encodeBytes(byteArray0, (-1197));
      assertEquals("H4sIAAAAAAAAAPMIMmZwYrAEAGxeVGEHAAAA", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)72, (byte)82, (byte)51, (byte)0, (byte)66, (byte)0, (byte)57}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1470, (byte)0);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-1463), byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)72, (byte)82, (byte)51, (byte)0, (byte)66, (byte)0, (byte)57}, byteArray0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertNotNull(bufferedInputStream0);
      assertEquals((-1463), byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)72, (byte)82, (byte)51, (byte)0, (byte)66, (byte)0, (byte)57}, byteArray0);
      
      Base64.InputStream base64_InputStream0 = new Base64.InputStream(bufferedInputStream0);
      assertNotNull(base64_InputStream0);
      assertEquals((-1463), byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)72, (byte)82, (byte)51, (byte)0, (byte)66, (byte)0, (byte)57}, byteArray0);
      
      int int0 = base64_InputStream0.read();
      assertEquals((-1), int0);
      assertEquals((-1463), byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)72, (byte)82, (byte)51, (byte)0, (byte)66, (byte)0, (byte)57}, byteArray0);
      
      base64_OutputStream0.flushBase64();
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      // Undeclared exception!
      try { 
        Base64.decode(byteArray0, (int) (byte)51, 3043);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51
         //
         verifyException("org.jhotdraw.io.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)70;
      byteArray0[3] = (byte)4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)70, (byte)0, (byte)4}, byteArray0);
      
      int int0 = Base64.GZIP;
      assertEquals(2, int0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)70);
      assertNotNull(bufferedInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)70, (byte)0, (byte)4}, byteArray0);
      
      Base64.InputStream base64_InputStream0 = new Base64.InputStream(bufferedInputStream0, (byte)14);
      assertNotNull(base64_InputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)70, (byte)0, (byte)4}, byteArray0);
      
      String string0 = Base64.encodeBytes(byteArray0, 971);
      assertEquals("H4sIAAAAAAAAAGNwY2ABAHfqPlIEAAAA", string0);
      assertNotNull(string0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)70, (byte)0, (byte)4}, byteArray0);
      
      int int1 = (-742);
      String string1 = Base64.encodeBytes(byteArray0, 0, (int) (byte)0, (-922));
      assertEquals("H4sIAAAAAAAAAAMAAAAAAAAAAAA=", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)70, (byte)0, (byte)4}, byteArray0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      pipedOutputStream0.close();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (-424));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string0 = Base64.encodeObject((Serializable) stringArray0, 56);
      assertNotNull(string0);
      assertEquals(250, stringArray0.length);
      
      String string1 = Base64.encodeObject((Serializable) string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(250, stringArray0.length);
      
      boolean boolean0 = Base64.decodeToFile(string1, string1);
      assertTrue(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(250, stringArray0.length);
      
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(string1, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"rO0ABXQGwHJPMEFCWFZ5QUJOYlRHcGhkbUV1YkdGdVp5NVRkSEpwYm1jN3JkSlc1K2tkZTBjQ0FB
         // QjRjQUFBQVBwMEFBSkJSSFFBQWtGRmRBQUNRVVowQUFKQlIzUUFBa0ZKZEFBQ1FVeDBBQUpCVFhR
         // QUFrRk9kQUFDUVU5MEFBSkJVWFFBQWtGU2RBQUNRVk4wQUFKQlZIUUFBa0ZWZEFBQ1FWZDBBQUpC
         // V0hRQUFrRmFkQUFDUWtGMEFBSkNRblFBQWtKRWRBQUNRa1YwQUFKQ1JuUUFBa0pIZEFBQ1FraDBB
         // QUpDU1hRQUFrSktkQUFDUWt4MEFBSkNUWFFBQWtKT2RBQUNRazkwQUFKQ1VYUUFBa0pTZEFBQ1Fs
         // TjBBQUpDVkhRQUFrSldkQUFDUWxkMEFBSkNXWFFBQWtKYWRBQUNRMEYwQUFKRFEzUUFBa05FZEFB
         // Q1EwWjBBQUpEUjNRQUFrTklkQUFDUTBsMEFBSkRTM1FBQWtOTWRBQUNRMDEwQUFKRFRuUUFBa05Q
         // ZEFBQ1ExSjBBQUpEVlhRQUFrTldkQUFDUTFkMEFBSkRXSFFBQWtOWmRBQUNRMXAwQUFKRVJYUUFB
         // a1JLZEFBQ1JFdDBBQUpFVFhRQUFrUlBkQUFDUkZwMEFBSkZRM1FBQWtWRmRBQUNSVWQwQUFKRlNI
         // UUFBa1ZTZEFBQ1JWTjBBQUpGVkhRQUFrWkpkQUFDUmtwMEFBSkdTM1FBQWtaTmRBQUNSazkwQUFK
         // R1VuUUFBa2RCZEFBQ1IwSjBBQUpIUkhRQUFrZEZkQUFDUjBaMEFBSkhSM1FBQWtkSWRBQUNSMGww
         // QUFKSFRIUUFBa2ROZEFBQ1IwNTBBQUpIVUhRQUFrZFJkQUFDUjFKMEFBSkhVM1FBQWtkVWRBQUNS
         // MVYwQUFKSFYzUUFBa2RaZEFBQ1NFdDBBQUpJVFhRQUFraE9kQUFDU0ZKMEFBSklWSFFBQWtoVmRB
         // QUNTVVIwQUFKSlJYUUFBa2xNZEFBQ1NVMTBBQUpKVG5RQUFrbFBkQUFDU1ZGMEFBSkpVblFBQWts
         // VGRBQUNTVlIwQUFKS1JYUUFBa3BOZEFBQ1NrOTBBQUpLVUhRQUFrdEZkQUFDUzBkMEFBSkxTSFFB
         // QWt0SmRBQUNTMDEwQUFKTFRuUUFBa3RRZEFBQ1MxSjBBQUpMVjNRQUFrdFpkQUFDUzFwMEFBSk1R
         // WFFBQWt4Q2RBQUNURU4wQUFKTVNYUUFBa3hMZEFBQ1RGSjBBQUpNVTNRQUFreFVkQUFDVEZWMEFB
         // Sk1WblFBQWt4WmRBQUNUVUYwQUFKTlEzUUFBazFFZEFBQ1RVVjBBQUpOUm5RQUFrMUhkQUFDVFVo
         // MEFBSk5TM1FBQWsxTWRBQUNUVTEwQUFKTlRuUUFBazFQZEFBQ1RWQjBBQUpOVVhRQUFrMVNkQUFD
         // VFZOMEFBSk5WSFFBQWsxVmRBQUNUVlowQUFKTlYzUUFBazFZZEFBQ1RWbDBBQUpOV25RQUFrNUJk
         // QUFDVGtOMEFBSk9SWFFBQWs1R2RBQUNUa2QwQUFKT1NYUUFBazVNZEFBQ1RrOTBBQUpPVUhRQUFr
         // NVNkQUFDVGxWMEFBSk9XblFBQWs5TmRBQUNVRUYwQUFKUVJYUUFBbEJHZEFBQ1VFZDBBQUpRU0hR
         // QUFsQkxkQUFDVUV4MEFBSlFUWFFBQWxCT2RBQUNVRkowQUFKUVUzUUFBbEJVZEFBQ1VGZDBBQUpR
         // V1hRQUFsRkJkQUFDVWtWMEFBSlNUM1FBQWxKVGRBQUNVbFYwQUFKU1YzUUFBbE5CZEFBQ1UwSjBB
         // QUpUUTNRQUFsTkVkQUFDVTBWMEFBSlRSM1FBQWxOSWRBQUNVMGwwQUFKVFNuUUFBbE5MZEFBQ1Uw
         // eDBBQUpUVFhRQUFsTk9kQUFDVTA5MEFBSlRVblFBQWxOVGRBQUNVMVIwQUFKVFZuUUFBbE5ZZEFB
         // Q1UxbDBBQUpUV25RQUFsUkRkQUFDVkVSMEFBSlVSblFBQWxSSGRBQUNWRWgwQUFKVVNuUUFBbFJM
         // ZEFBQ1ZFeDBBQUpVVFhRQUFsUk9kQUFDVkU5MEFBSlVVblFBQWxSVWRBQUNWRlowQUFKVVYzUUFB
         // bFJhZEFBQ1ZVRjBBQUpWUjNRQUFsVk5kQUFDVlZOMEFBSlZXWFFBQWxWYWRBQUNWa0YwQUFKV1Ez
         // UUFBbFpGZEFBQ1ZrZDBBQUpXU1hRQUFsWk9kQUFDVmxWMEFBSlhSblFBQWxkVGRBQUNXVVYwQUFK
         // WlZIUUFBbHBCZEFBQ1drMTBBQUphVnc9PQ==\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "tsZBf'!xd>";
      byte[] byteArray0 = Base64.decodeFromFile("tsZBf'!xd>");
      assertNull(byteArray0);
      
      int int0 = 122;
      // Undeclared exception!
      try { 
        Base64.decode((byte[]) null, 122, 122);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.io.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-18);
      byteArray0[7] = (byte)28;
      // Undeclared exception!
      try { 
        Base64.encodeBytes(byteArray0, (int) (byte)1, 1207, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.jhotdraw.io.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-115);
      // Undeclared exception!
      try { 
        Base64.decode(byteArray0, (int) (byte) (-115), (int) (byte) (-115));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.io.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = Base64.decodeToFile("", "");
      assertFalse(boolean0);
      
      byte[] byteArray0 = Base64.decodeFromFile("9(8Orr$^%");
      assertNull(byteArray0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      assertNotNull(mockFileOutputStream0);
      
      Base64.OutputStream base64_OutputStream0 = new Base64.OutputStream(mockFileOutputStream0);
      assertNotNull(base64_OutputStream0);
      assertFalse(fileDescriptor0.valid());
      
      base64_OutputStream0.flushBase64();
      assertFalse(fileDescriptor0.valid());
      
      int int0 = 108;
      // Undeclared exception!
      try { 
        Base64.encodeBytes((byte[]) null, 108, 108);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.io.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)120;
      byteArray0[0] = (byte)120;
      boolean boolean0 = Base64.encodeToFile(byteArray0, "6%+4c/t");
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)120}, byteArray0);
      
      String string0 = Base64.encodeObject((Serializable) "6%+4c/t", (int) (byte)120);
      assertEquals("rO0ABXQABzYlKzRjL3Q=", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Base64.decode(byteArray0, 0, (int) (byte)120);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jhotdraw.io.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)66;
      byte[] byteArray1 = Base64.decode(byteArray0, (int) (byte)0, 36);
      assertNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)66}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)0;
      String string0 = Base64.encodeBytes(byteArray0, (int) (byte)0, (int) (byte)0, (int) (byte)1);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)41, (byte) (-47), (byte)1, (byte)10, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(89);
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      Base64.OutputStream base64_OutputStream0 = new Base64.OutputStream(byteArrayOutputStream0, 89);
      assertNotNull(base64_OutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)0;
      base64_OutputStream0.suspendEncoding();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte)0;
      base64_OutputStream0.flushBase64();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      byteArray0[4] = (byte)0;
      base64_OutputStream0.flushBase64();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      byteArrayOutputStream0.writeTo(base64_OutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      byteArray0[5] = (byte) (-68);
      byteArrayOutputStream0.write(byteArray0);
      assertEquals(6, byteArrayOutputStream0.size());
      assertEquals("\u00EA\u0000\u00D4\u0000\u0000\u00BC", byteArrayOutputStream0.toString());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-22), (byte)0, (byte) (-44), (byte)0, (byte)0, (byte) (-68)}, byteArray0);
      
      base64_OutputStream0.write(511);
      assertEquals("\u00EA\u0000\u00D4\u0000\u0000\u00BC\u00FF", byteArrayOutputStream0.toString());
      assertEquals(7, byteArrayOutputStream0.size());
      
      base64_OutputStream0.write((-1598));
      assertEquals("\u00EA\u0000\u00D4\u0000\u0000\u00BC\u00FF\u00C2", byteArrayOutputStream0.toString());
      assertEquals(8, byteArrayOutputStream0.size());
      
      String string0 = "4k!oo59fF";
      byteArrayOutputStream0.reset();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      // Undeclared exception!
      try { 
        Base64.decodeToObject("4k!oo59fF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      assertNotNull(filterOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      assertNotNull(dataOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      byteArrayOutputStream0.flush();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      Base64.OutputStream base64_OutputStream0 = new Base64.OutputStream(dataOutputStream0, 0);
      assertNotNull(base64_OutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      base64_OutputStream0.suspendEncoding();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      String string0 = Base64.encodeFromFile("");
      assertNull(string0);
      
      base64_OutputStream0.write(0);
      assertEquals(1, byteArrayOutputStream0.size());
      assertEquals("\u0000", byteArrayOutputStream0.toString());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte) (-61);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-91);
      String string1 = Base64.encodeBytes(byteArray0, 0);
      assertEquals("zvAAAwBDwwCl", string1);
      assertNotNull(string1);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-50), (byte) (-16), (byte)0, (byte)3, (byte)0, (byte)67, (byte) (-61), (byte)0, (byte) (-91)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      pipedOutputStream0.flush();
      Base64.OutputStream base64_OutputStream0 = new Base64.OutputStream(pipedOutputStream0);
      assertNotNull(base64_OutputStream0);
      
      base64_OutputStream0.flushBase64();
      pipedOutputStream0.close();
      base64_OutputStream0.resumeEncoding();
      base64_OutputStream0.suspendEncoding();
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.encodeBytes((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.io.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "bEo#JBcJ3$8NYWIF";
      // Undeclared exception!
      try { 
        Base64.decodeToObject("bEo#JBcJ3$8NYWIF");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 127
         //
         verifyException("org.jhotdraw.io.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = Base64.encodeFromFile("");
      assertNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte) (-30);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)33, (byte)0, (byte) (-108), (byte)0, (byte)1, (byte)26, (byte) (-30)}, byteArray0);
      
      byteArrayInputStream0.close();
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)33, (byte)0, (byte) (-108), (byte)0, (byte)1, (byte)26, (byte) (-30)}, byteArray0);
      
      Base64.InputStream base64_InputStream0 = new Base64.InputStream(byteArrayInputStream0, 252);
      assertNotNull(base64_InputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)33, (byte)0, (byte) (-108), (byte)0, (byte)1, (byte)26, (byte) (-30)}, byteArray0);
      
      base64_InputStream0.close();
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)33, (byte)0, (byte) (-108), (byte)0, (byte)1, (byte)26, (byte) (-30)}, byteArray0);
      
      try { 
        base64_InputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Improperly padded Base64 input.
         //
         verifyException("org.jhotdraw.io.Base64$InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-33);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-59), (byte) (-1), (byte)0, (byte) (-110), (byte)0, (byte)0, (byte) (-33)}, byteArray0);
      
      long long0 = byteArrayInputStream0.skip(561L);
      assertEquals(7L, long0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-59), (byte) (-1), (byte)0, (byte) (-110), (byte)0, (byte)0, (byte) (-33)}, byteArray0);
      
      Base64.InputStream base64_InputStream0 = new Base64.InputStream(byteArrayInputStream0);
      assertNotNull(base64_InputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-59), (byte) (-1), (byte)0, (byte) (-110), (byte)0, (byte)0, (byte) (-33)}, byteArray0);
      
      base64_InputStream0.reset();
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-59), (byte) (-1), (byte)0, (byte) (-110), (byte)0, (byte)0, (byte) (-33)}, byteArray0);
      
      // Undeclared exception!
      try { 
        base64_InputStream0.read();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 127
         //
         verifyException("org.jhotdraw.io.Base64$InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)54, 1316);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-53), byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)54}, byteArray0);
      
      Base64.InputStream base64_InputStream0 = new Base64.InputStream(byteArrayInputStream0);
      assertNotNull(base64_InputStream0);
      assertEquals((-53), byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)54}, byteArray0);
      
      base64_InputStream0.reset();
      assertEquals((-53), byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)54}, byteArray0);
      
      base64_InputStream0.reset();
      assertEquals((-53), byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)54}, byteArray0);
      
      base64_InputStream0.mark(1316);
      assertEquals((-53), byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)54}, byteArray0);
      
      boolean boolean0 = Base64.encodeToFile(byteArray0, "u];g-mYe");
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)54}, byteArray0);
      
      int int0 = base64_InputStream0.read();
      assertEquals((-1), int0);
      assertEquals((-53), byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)54}, byteArray0);
      
      String string0 = Base64.encodeObject((Serializable) "u];g-mYe", (int) (byte)54);
      assertEquals("H4sIAAAAAAAAAFvzloG1hIGjNNY6XTc3MhUAJZdbJg8AAAA=", string0);
      assertNotNull(string0);
      
      byte[] byteArray1 = Base64.decodeFromFile("H4sIAAAAAAAAAFvzloG1hIGjNNY6XTc3MhUAJZdbJg8AAAA=");
      assertNull(byteArray1);
      
      String string1 = Base64.encodeFromFile("");
      assertNull(string1);
      
      boolean boolean1 = Base64.encodeToFile(byteArray0, "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)54}, byteArray0);
      
      String string2 = Base64.encodeFromFile("]9jVL`u");
      assertNull(string2);
      
      int int1 = base64_InputStream0.read(byteArray0, (int) (byte)54, (int) (byte)54);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals((-53), byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)54}, byteArray0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      Base64.OutputStream base64_OutputStream0 = new Base64.OutputStream(pipedOutputStream0, (byte)54);
      assertNotNull(base64_OutputStream0);
      
      Base64.OutputStream base64_OutputStream1 = new Base64.OutputStream(base64_OutputStream0);
      assertFalse(base64_OutputStream1.equals((Object)base64_OutputStream0));
      assertNotNull(base64_OutputStream1);
      
      base64_OutputStream1.write((byte[]) null, (-1), (-3130));
      assertFalse(base64_OutputStream0.equals((Object)base64_OutputStream1));
      assertFalse(base64_OutputStream1.equals((Object)base64_OutputStream0));
      assertNotSame(base64_OutputStream0, base64_OutputStream1);
      assertNotSame(base64_OutputStream1, base64_OutputStream0);
      
      base64_OutputStream0.flushBase64();
      assertFalse(base64_OutputStream0.equals((Object)base64_OutputStream1));
      assertNotSame(base64_OutputStream0, base64_OutputStream1);
      
      String string3 = Base64.encodeBytes(byteArray0);
      assertEquals("Ng==", string3);
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)54}, byteArray0);
      
      byte[] byteArray2 = Base64.decode(byteArray0, 6, (-1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)54}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      byte[] byteArray3 = Base64.decode("H4sIAAAAAAAAAFvzloG1hIGjNNY6XTc3MhUAJZdbJg8AAAA=");
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotNull(byteArray3);
      assertEquals(15, byteArray3.length);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      
      boolean boolean2 = Base64.decodeToFile("4`0(&7", "");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Base64.InputStream base64_InputStream1 = new Base64.InputStream(base64_InputStream0, (-1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(base64_InputStream1.equals((Object)base64_InputStream0));
      assertNotNull(base64_InputStream1);
      assertEquals((-53), byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)54}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = Base64.decodeToFile("", "i-/vao.?@");
      assertTrue(boolean0);
      
      String string0 = Base64.encodeObject((Serializable) "i-/vao.?@");
      assertEquals("rO0ABXQACWktL3Zhby4/QA==", string0);
      assertNotNull(string0);
      
      String string1 = Base64.encodeObject((Serializable) "i-/vao.?@", (-812));
      assertEquals("rO0ABXQACWktL3Zhby4/QA==", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Base64.encodeObject((Serializable) "rO0ABXQACWktL3Zhby4/QA==", (-812));
      assertEquals("rO0ABXQAGHJPMEFCWFFBQ1drdEwzWmhieTQvUUE9PQ==", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Base64.encodeObject((Serializable) "rO0ABXQAGHJPMEFCWFFBQ1drdEwzWmhieTQvUUE9PQ==");
      assertEquals("rO0ABXQALHJPMEFCWFFBR0hKUE1FRkNXRkZCUTFkcmRFd3pXbWhpZVRRdlVVRTlQUT09", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Base64.decodeFromFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = Base64.decode("");
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      String string0 = Base64.encodeObject((Serializable) "");
      assertEquals("rO0ABXQAAA==", string0);
      assertNotNull(string0);
      
      String string1 = Base64.encodeBytes(byteArray0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int0 = (-227);
      Base64.InputStream base64_InputStream0 = new Base64.InputStream((InputStream) null, (-227));
      assertNotNull(base64_InputStream0);
      
      URI uRI0 = MockURI.URI((String) null, (String) null, "rO0ABXQAAA==", "[");
      assertNotNull(uRI0);
      assertNull(uRI0.getRawUserInfo());
      assertEquals("[", uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getHost());
      assertEquals("rO0ABXQAAA==#[", uRI0.toString());
      assertEquals("rO0ABXQAAA==", uRI0.getRawPath());
      assertNull(uRI0.getScheme());
      
      URI uRI1 = MockURI.resolve(uRI0, "");
      assertFalse(uRI1.equals((Object)uRI0));
      assertNotNull(uRI1);
      assertNull(uRI0.getRawUserInfo());
      assertEquals("[", uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getHost());
      assertEquals("rO0ABXQAAA==#[", uRI0.toString());
      assertEquals("rO0ABXQAAA==", uRI0.getRawPath());
      assertNull(uRI0.getScheme());
      assertNull(uRI1.getScheme());
      assertEquals((-1), uRI1.getPort());
      assertEquals("", uRI1.getRawPath());
      assertEquals("", uRI1.toString());
      assertNull(uRI1.getRawAuthority());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getHost());
      assertFalse(uRI1.isAbsolute());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawQuery());
      assertNotSame(uRI0, uRI1);
      assertNotSame(uRI1, uRI0);
      
      URI uRI2 = MockURI.parseServerAuthority(uRI1);
      assertFalse(uRI0.equals((Object)uRI1));
      assertFalse(uRI1.equals((Object)uRI0));
      assertFalse(uRI2.equals((Object)uRI0));
      assertNotNull(uRI2);
      assertNull(uRI0.getRawUserInfo());
      assertEquals("[", uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getHost());
      assertEquals("rO0ABXQAAA==#[", uRI0.toString());
      assertEquals("rO0ABXQAAA==", uRI0.getRawPath());
      assertNull(uRI0.getScheme());
      assertNull(uRI1.getScheme());
      assertEquals((-1), uRI1.getPort());
      assertEquals("", uRI1.getRawPath());
      assertEquals("", uRI1.toString());
      assertNull(uRI1.getRawAuthority());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getHost());
      assertFalse(uRI1.isAbsolute());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI2.getRawUserInfo());
      assertNull(uRI2.getRawFragment());
      assertEquals("", uRI2.getRawPath());
      assertEquals("", uRI2.toString());
      assertNull(uRI2.getScheme());
      assertNull(uRI2.getHost());
      assertFalse(uRI2.isAbsolute());
      assertNull(uRI2.getRawQuery());
      assertEquals((-1), uRI2.getPort());
      assertNull(uRI2.getRawAuthority());
      assertFalse(uRI2.isOpaque());
      assertNotSame(uRI0, uRI1);
      assertNotSame(uRI0, uRI2);
      assertNotSame(uRI1, uRI0);
      assertSame(uRI1, uRI2);
      assertNotSame(uRI2, uRI0);
      assertSame(uRI2, uRI1);
      
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)88;
      // Undeclared exception!
      try { 
        Base64.encodeBytes(byteArray0, (int) (byte)65, (-1), (-488));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.io.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decode("Tz>4r8H#FSG*3!)");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 127
         //
         verifyException("org.jhotdraw.io.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base64.OutputStream base64_OutputStream0 = new Base64.OutputStream((OutputStream) null);
      assertNotNull(base64_OutputStream0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      base64_OutputStream0.write(byteArray0, (-2582), (-5364));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-66), (byte)0, (byte)1, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)85;
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-78);
      int int0 = 75;
      byte[] byteArray1 = Base64.decode(byteArray0, 75, 0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)85, (byte) (-63), (byte)9, (byte) (-78)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      String string0 = Base64.encodeObject((Serializable) (byte) (-63), (int) (byte)9);
      assertEquals("rO0ABXNyAA5qYXZhLmxhbmcuQnl0ZZxOYITuUPUcAgABQgAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHDB", string0);
      assertNotNull(string0);
      
      Object object0 = Base64.decodeToObject("rO0ABXNyAA5qYXZhLmxhbmcuQnl0ZZxOYITuUPUcAgABQgAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHDB");
      assertEquals((byte) (-63), object0);
      assertFalse(object0.equals((Object)byte0));
      assertNotNull(object0);
      
      OutputStream outputStream0 = null;
      Base64.OutputStream base64_OutputStream0 = new Base64.OutputStream((OutputStream) null, (-311));
      assertNotNull(base64_OutputStream0);
      
      base64_OutputStream0.write((int) (byte) (-63));
      // Undeclared exception!
      try { 
        base64_OutputStream0.write(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("0B=uJoAKz");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("0B=uJoAKz", "b|_", (File) mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(file0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("0B=uJoAKz", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals("0B=uJoAKz", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("E:\\java\\java\\jhotdraw-develop\\0B=uJoAKz\\0B=uJoAKz0b|_", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("0B=uJoAKz0b|_", file0.getName());
      assertEquals("E:\\java\\java\\jhotdraw-develop\\0B=uJoAKz", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(mockFileOutputStream0);
      
      Base64.OutputStream base64_OutputStream0 = new Base64.OutputStream(mockFileOutputStream0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(base64_OutputStream0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("0B=uJoAKz", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals("0B=uJoAKz", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("E:\\java\\java\\jhotdraw-develop\\0B=uJoAKz\\0B=uJoAKz0b|_", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("0B=uJoAKz0b|_", file0.getName());
      assertEquals("E:\\java\\java\\jhotdraw-develop\\0B=uJoAKz", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      
      base64_OutputStream0.suspendEncoding();
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("0B=uJoAKz", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals("0B=uJoAKz", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("E:\\java\\java\\jhotdraw-develop\\0B=uJoAKz\\0B=uJoAKz0b|_", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("0B=uJoAKz0b|_", file0.getName());
      assertEquals("E:\\java\\java\\jhotdraw-develop\\0B=uJoAKz", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      Base64.OutputStream base64_OutputStream0 = new Base64.OutputStream(pipedOutputStream0, 4);
      assertNotNull(base64_OutputStream0);
      
      base64_OutputStream0.close();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Base64.InputStream base64_InputStream0 = new Base64.InputStream(pipedInputStream0, (-2081));
      assertNotNull(base64_InputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      try { 
        base64_InputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Base64.encodeFromFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte)95;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-13), (byte)85, (byte) (-13), (byte) (-16), (byte)18, (byte)95, (byte)95}, byteArray0);
      
      Base64.InputStream base64_InputStream0 = new Base64.InputStream(byteArrayInputStream0);
      assertNotNull(base64_InputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-13), (byte)85, (byte) (-13), (byte) (-16), (byte)18, (byte)95, (byte)95}, byteArray0);
      
      int int0 = base64_InputStream0.read(byteArray0, (int) (byte) (-13), 0);
      assertEquals(0, int0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-13), (byte)85, (byte) (-13), (byte) (-16), (byte)18, (byte)95, (byte)95}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Object object0 = Base64.decodeToObject("i0LHoapn");
      assertNull(object0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(36);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        pipedInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Base64.decodeToObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.io.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-39);
      // Undeclared exception!
      try { 
        Base64.encodeBytes(byteArray0, 3773, 981, 3773);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3773
         //
         verifyException("org.jhotdraw.io.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Base64.decode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.io.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(87);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Base64.InputStream base64_InputStream0 = new Base64.InputStream(pipedInputStream0);
      assertNotNull(base64_InputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-18);
      int int0 = base64_InputStream0.read(byteArray0, 1, (int) (byte) (-74));
      assertEquals(0, int0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-7), (byte) (-74), (byte)109, (byte)119, (byte)0, (byte) (-18)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base64.InputStream base64_InputStream0 = new Base64.InputStream((InputStream) null);
      assertNotNull(base64_InputStream0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)61;
      // Undeclared exception!
      try { 
        base64_InputStream0.read(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.io.Base64$InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("s#'vGgR");
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.append('e');
      assertNotNull(printStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      Base64.OutputStream base64_OutputStream0 = new Base64.OutputStream(printStream0, (-1104));
      assertNotNull(base64_OutputStream0);
      
      base64_OutputStream0.flushBase64();
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(3215);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Base64.InputStream base64_InputStream0 = new Base64.InputStream(pipedInputStream0, 3215);
      assertNotNull(base64_InputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = null;
      try {
        bufferedInputStream0 = new BufferedInputStream(base64_InputStream0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = null;
      int int0 = (-434);
      // Undeclared exception!
      try { 
        Base64.encodeBytes((byte[]) null, (-434), (-434), (-434));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.DeflaterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = (-1559);
      // Undeclared exception!
      try { 
        Base64.encodeBytes(byteArray0, (-1593), (-1559), (-1593));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.DeflaterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte) (-10);
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte)106;
      byte byte2 = (byte)44;
      byteArray0[3] = (byte)44;
      // Undeclared exception!
      try { 
        Base64.encodeBytes(byteArray0, (int) (byte) (-10), 102, (-4189));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.DeflaterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.MAP_EXTENDED_RANGES, locale_FilteringMode0);
      
      Locale.FilteringMode[] locale_FilteringModeArray0 = Locale.FilteringMode.values();
      assertNotNull(locale_FilteringModeArray0);
      assertEquals(5, locale_FilteringModeArray0.length);
      
      String string0 = Base64.encodeObject((Serializable) locale_FilteringMode0);
      assertEquals("rO0ABX5yAB5qYXZhLnV0aWwuTG9jYWxlJEZpbHRlcmluZ01vZGUAAAAAAAAAABIAAHhyAA5qYXZh\nLmxhbmcuRW51bQAAAAAAAAAAEgAAeHB0ABNNQVBfRVhURU5ERURfUkFOR0VT", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Base64.encodeBytes((byte[]) null, 101);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.io.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      Base64.InputStream base64_InputStream0 = new Base64.InputStream(mockFileInputStream0, 0);
      assertNotNull(base64_InputStream0);
      assertFalse(fileDescriptor0.valid());
      
      byte[] byteArray0 = Base64.decodeFromFile("p/>hp$9+}}Z=A");
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte)4;
      // Undeclared exception!
      try { 
        Base64.encodeBytes(byteArray0, (int) (byte) (-62), (int) (byte)125);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -62
         //
         verifyException("org.jhotdraw.io.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = Base64.encodeObject((Serializable) null);
      assertEquals("rO0ABXA=", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        Base64.encodeBytes((byte[]) null, 0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.io.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = Base64.encodeFromFile("{");
      assertNull(string0);
      
      String string1 = "-TW9eNyK|\\5&0dRDWc";
      boolean boolean0 = Base64.decodeToFile("-TW9eNyK|\u0005&0dRDWc", "{");
      assertFalse(boolean0);
      
      String string2 = "S&";
      boolean boolean1 = Base64.decodeToFile("S&", "-TW9eNyK|\u0005&0dRDWc");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        Base64.decodeToObject("{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Base64.encodeToFile(byteArray0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "7]";
      byte[] byteArray0 = Base64.decodeFromFile("7]");
      assertNull(byteArray0);
      
      String string1 = Base64.encodeObject((Serializable) null);
      assertEquals("rO0ABXA=", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = 85;
      int int1 = 456;
      // Undeclared exception!
      try { 
        Base64.encodeBytes((byte[]) null, 85, 85, 456);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.io.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)1;
      boolean boolean0 = Base64.encodeToFile(byteArray0, "");
      assertFalse(boolean0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)103, (byte)0, (byte)33, (byte)0, (byte)92, (byte)124, (byte)1, (byte)1}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      boolean boolean0 = Base64.encodeToFile(byteArray0, "Invalid character in Base64 data.");
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      byte[] byteArray1 = Base64.decode("");
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      Base64.OutputStream base64_OutputStream0 = new Base64.OutputStream(byteArrayOutputStream0, (byte)0);
      assertNotNull(base64_OutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "Invalid character in Base64 data.";
      // Undeclared exception!
      try { 
        Base64.decodeToObject("Invalid character in Base64 data.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeToFile("76Q./H@OTn8RpnwI/=", "76Q./H@OTn8RpnwI/=");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      boolean boolean0 = Base64.decodeToFile("Invalid character in Base64 data.", "Invalid character in Base64 data.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Base64.OutputStream base64_OutputStream0 = new Base64.OutputStream(byteArrayOutputStream0, 0);
      base64_OutputStream0.resumeEncoding();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      String string0 = Base64.encodeBytes(byteArray0, 168);
      assertEquals("Q4ltHQBXAAA=", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Base64.OutputStream base64_OutputStream0 = new Base64.OutputStream((OutputStream) null, 0);
      base64_OutputStream0.flushBase64();
      // Undeclared exception!
      try { 
        Base64.encodeBytes((byte[]) null, (-185), (-261), 28);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.io.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Base64.decode("|=AHDsfr#94vW'=#UnJ");
      // Undeclared exception!
      try { 
        Base64.encodeFromFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeToFile("o6", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)61;
      String string0 = Base64.encodeBytes(byteArray0);
      assertEquals("//8APQ==", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = Base64.encodeObject((Serializable) uRL0);
      assertNotNull(string0);
      assertEquals("rO0ABXNyAAxqYXZhLm5ldC5VUkyWJTc2GvzkcgMAB0kACGhhc2hDb2RlSQAEcG9ydEwACWF1dGhv\ncml0eXQAEkxqYXZhL2xhbmcvU3RyaW5nO0wABGZpbGVxAH4AAUwABGhvc3RxAH4AAUwACHByb3Rv\nY29scQB+AAFMAANyZWZxAH4AAXhw//////////90AAdmb28uYmFydAAAcQB+AAN0AANmdHBweA==", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-75);
      byteArray0[6] = (byte) (-18);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)104;
      String string1 = Base64.encodeBytes(byteArray0);
      assertEquals("RQAAFAC17gBo", string1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)99;
      String string0 = Base64.encodeBytes(byteArray0, 2399);
      assertEquals("H4sIAAAAAAAAAHNjWHSvRJIhGQAI+tDLCAAAAA==", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      int int0 = (-1);
      Base64.InputStream base64_InputStream0 = new Base64.InputStream(sequenceInputStream0, (-1));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      sequenceInputStream0.mark((byte) (-1));
      byteArray0[1] = (byte) (-5);
      base64_InputStream0.skip((byte) (-1));
      int int1 = (-820);
      base64_InputStream0.read(byteArray0, (-820), (-1));
      String string0 = "\\u@";
      // Undeclared exception!
      try { 
        Base64.encodeToFile((byte[]) null, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-3271));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Base64.InputStream base64_InputStream0 = new Base64.InputStream(byteArrayInputStream0);
      base64_InputStream0.skip(0L);
      byteArrayInputStream0.markSupported();
      base64_InputStream0.available();
      base64_InputStream0.available();
      base64_InputStream0.skip(0L);
      base64_InputStream0.available();
      Base64.InputStream base64_InputStream1 = new Base64.InputStream(base64_InputStream0, 1);
      base64_InputStream0.read();
      Base64.decodeToFile("]uS9", "]uS9");
      Base64.encodeObject((Serializable) "]uS9", 1);
      Base64.decode("rO0ABXQABF11Uzk=");
      Base64.encodeObject((Serializable) "rO0ABXQABF11Uzk=", 0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)98;
      byteArray1[1] = (byte)89;
      byteArray1[2] = (byte)109;
      byteArray1[3] = (byte)66;
      byteArray1[4] = (byte)97;
      byteArray1[5] = (byte)115;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)48;
      byteArray1[8] = (byte) (-13);
      byteArrayInputStream0.read(byteArray1);
      Base64.decodeFromFile("r");
      Base64.encodeFromFile("rO0ABXQAEHJPMEFCWFFBQkYxMVV6az0=");
      // Undeclared exception!
      try { 
        Base64.encodeBytes((byte[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.io.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-34);
      Base64.encodeBytes(byteArray0);
      Base64.encodeBytes(byteArray0);
      Base64.encodeObject((Serializable) (byte) (-124));
      Base64.decodeToObject("hADe");
      String string0 = "";
      Base64.decodeToObject("");
      Base64.encodeObject((Serializable) "hADe", (int) (byte) (-34));
      byte[] byteArray1 = Base64.decode("H4sIAAAAAAAAAFvzloG1hIElw9ElFQDzZLzRCwAAAA==");
      int int0 = 1;
      // Undeclared exception!
      try { 
        Base64.decode(byteArray1, (int) (byte) (-34), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -34
         //
         verifyException("org.jhotdraw.io.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Base64.OutputStream base64_OutputStream0 = new Base64.OutputStream((OutputStream) null, 525);
      MockPrintStream mockPrintStream0 = new MockPrintStream(base64_OutputStream0);
      Base64.OutputStream base64_OutputStream1 = new Base64.OutputStream(mockPrintStream0);
      base64_OutputStream1.resumeEncoding();
      // Undeclared exception!
      try { 
        base64_OutputStream1.close();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Self-suppression not permitted
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-102);
      byteArray0[6] = (byte)25;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 14, (-149));
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.mark((byte) (-1));
      byteArrayInputStream0.read(byteArray0);
      Base64.InputStream base64_InputStream0 = new Base64.InputStream(byteArrayInputStream0);
      Base64.encodeBytes(byteArray0);
      String string0 = Base64.encodeBytes(byteArray0, 32);
      assertEquals("/8ffAJoAGQ==", string0);
      
      int int0 = base64_InputStream0.read(byteArray0, 60, 132);
      assertEquals((-1), int0);
  }
}
