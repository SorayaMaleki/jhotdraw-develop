/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 05 08:37:28 GMT 2021
 */

package org.jhotdraw.draw;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jhotdraw.draw.AttributeKeys;
import org.jhotdraw.draw.DefaultDrawing;
import org.jhotdraw.draw.Drawing;
import org.jhotdraw.draw.figure.Figure;
import org.jhotdraw.draw.figure.GroupFigure;
import org.jhotdraw.draw.figure.ImageFigure;
import org.jhotdraw.draw.figure.LabelFigure;
import org.jhotdraw.draw.figure.LineFigure;
import org.jhotdraw.draw.figure.RoundRectangleFigure;
import org.jhotdraw.draw.figure.TextAreaFigure;
import org.jhotdraw.draw.io.ImageOutputFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AttributeKeys_ESTest extends AttributeKeys_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat();
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      ArrayList<Figure> arrayList0 = new ArrayList<Figure>();
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) defaultDrawing0, (List<Figure>) arrayList0, 1169.035963529264, true);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      double double0 = AttributeKeys.getScaleFactorFromGraphics(graphics2D0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((-2183.88372), (-2183.88372));
      double double0 = AttributeKeys.getScaleFactor(affineTransform0);
      assertEquals((-1.414213562373095), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        AttributeKeys.getStrokeTotalWidth((Figure) null, (-717.30359));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        AttributeKeys.getStrokeTotalMiterLimit((Figure) null, 2208.975889057042);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        AttributeKeys.getStroke((Figure) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        AttributeKeys.getPerpendicularFillGrowth((Figure) null, (-2970.9924));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        AttributeKeys.getPerpendicularDrawGrowth((Figure) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        AttributeKeys.getHitStroke((Figure) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        AttributeKeys.getGlobalValueFactor((Figure) null, (-840.017394372));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        AttributeKeys.getFontStyle((Figure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        AttributeKeys.getFont((Figure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LineFigure lineFigure0 = new LineFigure();
      int int0 = AttributeKeys.getFontStyle(lineFigure0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure();
      double double0 = AttributeKeys.getStrokeTotalMiterLimit(labelFigure0, 4.0);
      assertEquals(3.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ImageFigure imageFigure0 = new ImageFigure(0.0, 0.0, 0.0, (-1165.7258968794858));
      double double0 = AttributeKeys.getStrokeTotalWidth(imageFigure0, 1.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure((String) null);
      double double0 = AttributeKeys.getGlobalValueFactor(textAreaFigure0, (-1165.7258968794858));
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ImageFigure imageFigure0 = new ImageFigure(0.0, 0.0, 0.0, (-1165.7258968794858));
      double double0 = AttributeKeys.getGlobalValueFactor(imageFigure0, 1.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      // Undeclared exception!
      try { 
        AttributeKeys.getPerpendicularHitGrowth(groupFigure0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      double double0 = AttributeKeys.getPerpendicularHitGrowth(roundRectangleFigure0, 585.5168686538537);
      assertEquals(0.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure((String) null);
      double double0 = AttributeKeys.getPerpendicularDrawGrowth(textAreaFigure0, (-1165.7258968794858));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      Font font0 = AttributeKeys.getFont(groupFigure0);
      assertNull(font0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure((String) null);
      Font font0 = AttributeKeys.getFont(textAreaFigure0);
      assertEquals(12, font0.getSize());
      assertNotNull(font0);
      assertTrue(font0.isPlain());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LineFigure lineFigure0 = new LineFigure();
      BasicStroke basicStroke0 = (BasicStroke)AttributeKeys.getHitStroke(lineFigure0, 0.0);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(3.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((-421.81707917), (-268.36443), 1057.224914780286);
      double double0 = AttributeKeys.getScaleFactor(affineTransform0);
      assertEquals(1.5043695474264784, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = AttributeKeys.getScaleFactor((AffineTransform) null);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(0.0, (-365.75));
      double double0 = AttributeKeys.getScaleFactor(affineTransform0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure("w");
      BasicStroke basicStroke0 = (BasicStroke)AttributeKeys.getStroke(labelFigure0, 0.0);
      assertEquals(3.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ImageFigure imageFigure0 = new ImageFigure(0.0, 0.0, 0.0, (-1165.7258968794858));
      double double0 = AttributeKeys.getPerpendicularFillGrowth(imageFigure0, 1.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        AttributeKeys.getScaleFactorFromGraphics((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AttributeKeys attributeKeys0 = new AttributeKeys();
  }
}
