/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 05 09:43:47 GMT 2021
 */

package org.jhotdraw.draw;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jhotdraw.draw.AttributeKeys;
import org.jhotdraw.draw.Drawing;
import org.jhotdraw.draw.QuadTreeDrawing;
import org.jhotdraw.draw.figure.BezierFigure;
import org.jhotdraw.draw.figure.Figure;
import org.jhotdraw.draw.figure.GroupFigure;
import org.jhotdraw.draw.figure.ImageFigure;
import org.jhotdraw.draw.figure.TextAreaFigure;
import org.jhotdraw.draw.figure.TriangleFigure;
import org.jhotdraw.draw.io.ImageOutputFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AttributeKeys_ESTest extends AttributeKeys_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat();
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      Stack<Figure> stack0 = new Stack<Figure>();
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) quadTreeDrawing0, (List<Figure>) stack0, 0.00854346291525567, true);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      double double0 = AttributeKeys.getScaleFactorFromGraphics(graphics2D0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AffineTransform affineTransform0 = AffineTransform.getScaleInstance((-2387.0901948874), 0.0);
      double double0 = AttributeKeys.getScaleFactor(affineTransform0);
      assertEquals((-4.1892007354467413E-4), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        AttributeKeys.getStrokeTotalWidth((Figure) null, 3.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        AttributeKeys.getStrokeTotalMiterLimit((Figure) null, (-1184.90491009));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        AttributeKeys.getStroke((Figure) null, (-224.5434));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        AttributeKeys.getPerpendicularFillGrowth((Figure) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        AttributeKeys.getPerpendicularDrawGrowth((Figure) null, (-2668.06720036));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        AttributeKeys.getHitStroke((Figure) null, 3.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        AttributeKeys.getGlobalValueFactor((Figure) null, (-289.2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      // Undeclared exception!
      try { 
        AttributeKeys.getFontStyle(groupFigure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        AttributeKeys.getFont((Figure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("");
      double double0 = AttributeKeys.getPerpendicularHitGrowth(textAreaFigure0, 1186.10447);
      assertEquals(0.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ImageFigure imageFigure0 = new ImageFigure((-1.0F), (-1903.0F), 1807.3, (-752.9565F));
      int int0 = AttributeKeys.getFontStyle(imageFigure0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(1.0, 1.0, 1.0, 1.0, attributeKeys_Orientation0);
      double double0 = AttributeKeys.getStrokeTotalMiterLimit(triangleFigure0, 1.0);
      assertEquals(3.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      double double0 = AttributeKeys.getStrokeTotalWidth(triangleFigure0, 12.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BezierFigure bezierFigure0 = new BezierFigure();
      double double0 = AttributeKeys.getGlobalValueFactor(bezierFigure0, (-1831.2));
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      // Undeclared exception!
      try { 
        AttributeKeys.getPerpendicularHitGrowth(groupFigure0, 429.99659521012);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      double double0 = AttributeKeys.getPerpendicularDrawGrowth(triangleFigure0, (-2.0));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      double double0 = AttributeKeys.getPerpendicularFillGrowth(triangleFigure0, (-1830.0));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      Font font0 = AttributeKeys.getFont(groupFigure0);
      assertNull(font0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BezierFigure bezierFigure0 = new BezierFigure();
      Font font0 = AttributeKeys.getFont(bezierFigure0);
      assertEquals(12, font0.getSize());
      assertNotNull(font0);
      assertTrue(font0.isPlain());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      BasicStroke basicStroke0 = (BasicStroke)AttributeKeys.getStroke(triangleFigure0, 3.0);
      assertEquals(3.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(20.0, (-2964.93), (-2964.93), 20.0);
      double double0 = AttributeKeys.getScaleFactor(affineTransform0);
      assertEquals(148.2498727225423, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = AttributeKeys.getScaleFactor((AffineTransform) null);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, (-1903.0F), (-752.9565F), (-752.9565F), 350.2F, (-1.0F));
      double double0 = AttributeKeys.getScaleFactor(affineTransform0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      BasicStroke basicStroke0 = (BasicStroke)AttributeKeys.getHitStroke(triangleFigure0, 3.0);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(3.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        AttributeKeys.getScaleFactorFromGraphics((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AttributeKeys attributeKeys0 = new AttributeKeys();
  }
}
