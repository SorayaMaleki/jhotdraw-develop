/*
 * This file was automatically generated by EvoSuite
 * Sat May 29 17:57:53 GMT 2021
 */

package org.jhotdraw.draw.figure;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jhotdraw.draw.DefaultDrawing;
import org.jhotdraw.draw.Drawing;
import org.jhotdraw.draw.QuadTreeDrawing;
import org.jhotdraw.draw.connector.ChopRoundRectangleConnector;
import org.jhotdraw.draw.connector.Connector;
import org.jhotdraw.draw.figure.Figure;
import org.jhotdraw.draw.figure.LabeledLineConnectionFigure;
import org.jhotdraw.draw.figure.LineConnectionFigure;
import org.jhotdraw.draw.figure.RoundRectangleFigure;
import org.jhotdraw.draw.io.ImageOutputFormat;
import org.jhotdraw.draw.locator.FontSizeLocator;
import org.jhotdraw.xml.DOMInput;
import org.jhotdraw.xml.DOMOutput;
import org.jhotdraw.xml.DefaultDOMFactory;
import org.jhotdraw.xml.JavaxDOMOutput;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RoundRectangleFigure_ESTest extends RoundRectangleFigure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Point2D.Double point2D_Double0 = labeledLineConnectionFigure0.getEndPoint();
      roundRectangleFigure0.setBounds(point2D_Double0, point2D_Double0);
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure(0.0, 0.0, 0.0, (-1951.347));
      roundRectangleFigure0.setArc(1.575, 1.575);
      roundRectangleFigure0.setArc(3129, 0.0);
      assertEquals(0.0, roundRectangleFigure0.getArcHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure(0.0, 0.0, 0.0, 3112.72404);
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat();
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Stack<RoundRectangleFigure> stack0 = new Stack<RoundRectangleFigure>();
      List<Figure> list0 = defaultDrawing0.sort(stack0);
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) defaultDrawing0, list0, 0.0, false);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      roundRectangleFigure0.drawStroke(graphics2D0);
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure((-44.6), 0.0, (-1.0), 1474.713);
      BufferedImage bufferedImage0 = new BufferedImage(11, 11, 11);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      roundRectangleFigure0.drawFill(graphics2D0);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure(1285.3441195219, 800.0, (-292.170569057963), (-292.170569057963));
      DefaultDOMFactory defaultDOMFactory0 = new DefaultDOMFactory();
      JavaxDOMOutput javaxDOMOutput0 = new JavaxDOMOutput(defaultDOMFactory0);
      javaxDOMOutput0.openElement("arcWidth");
      // Undeclared exception!
      try { 
        roundRectangleFigure0.write(javaxDOMOutput0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Storable name not known to factory: arcWidth
         //
         verifyException("org.jhotdraw.xml.DefaultDOMFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure((-1726.2023), 686.2082904035, 4598.17636, (-1726.2023));
      Rectangle2D.Double rectangle2D_Double0 = roundRectangleFigure0.getDrawingArea();
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      assertEquals(2873.4740600000005, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-1038.4940095964998), rectangle2D_Double0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      Rectangle2D.Double rectangle2D_Double0 = roundRectangleFigure0.getDrawingArea();
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      assertEquals(1.5, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1.5, rectangle2D_Double0.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure((-2.0), (-2.0), (-2.0), 2533.72975517);
      Rectangle2D.Double rectangle2D_Double0 = roundRectangleFigure0.getDrawingArea();
      assertEquals(2533.22975517, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
      assertEquals((-2.5), rectangle2D_Double0.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure(832.57736317, 832.57736317, (-541.839), 2091.7);
      Rectangle2D.Double rectangle2D_Double0 = roundRectangleFigure0.getBounds();
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
      assertEquals(1878.4273631699998, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(561.6578631699999, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      Rectangle2D.Double rectangle2D_Double0 = roundRectangleFigure0.getBounds();
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure((-1.0), (-1.0), (-1780.4257098), 12.0);
      Rectangle2D.Double rectangle2D_Double0 = roundRectangleFigure0.getBounds();
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      assertEquals((-1781.4257098), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(5.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      roundRectangleFigure0.setArc(0.0, 0.0);
      double double0 = roundRectangleFigure0.getArcWidth();
      assertEquals(0.0, roundRectangleFigure0.getArcHeight(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      roundRectangleFigure0.setArc((-2026.4995219034), 0.0);
      double double0 = roundRectangleFigure0.getArcHeight();
      assertEquals((-2026.4995219034), roundRectangleFigure0.getArcWidth(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure((-1026.013900634377), 0.0, (-337.801233154), (-337.801233154));
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Point2D.Double point2D_Double0 = labeledLineConnectionFigure0.getOutermostPoint();
      roundRectangleFigure0.contains(point2D_Double0);
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      roundRectangleFigure0.setSelectable(false);
      RoundRectangleFigure roundRectangleFigure1 = roundRectangleFigure0.clone();
      assertNotSame(roundRectangleFigure1, roundRectangleFigure0);
      assertEquals(20.0, roundRectangleFigure1.getArcHeight(), 0.01);
      assertEquals(20.0, roundRectangleFigure1.getArcWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure((-1.0), 360.0, 0.1, 360.0);
      roundRectangleFigure0.setRemovable(false);
      RoundRectangleFigure roundRectangleFigure1 = roundRectangleFigure0.clone();
      assertEquals(20.0, roundRectangleFigure1.getArcHeight(), 0.01);
      assertNotSame(roundRectangleFigure1, roundRectangleFigure0);
      assertEquals(20.0, roundRectangleFigure1.getArcWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure(1047.96773004, 1047.96773004, 1047.96773004, 3.0);
      roundRectangleFigure0.setConnectable(false);
      RoundRectangleFigure roundRectangleFigure1 = roundRectangleFigure0.clone();
      assertNotSame(roundRectangleFigure1, roundRectangleFigure0);
      assertEquals(20.0, roundRectangleFigure1.getArcHeight(), 0.01);
      assertEquals(20.0, roundRectangleFigure1.getArcWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double();
      roundRectangleFigure0.roundrect = roundRectangle2D_Double0;
      RoundRectangleFigure roundRectangleFigure1 = roundRectangleFigure0.clone();
      assertNotSame(roundRectangleFigure0, roundRectangleFigure1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      roundRectangleFigure0.setArc((-4385), (-218.749));
      roundRectangleFigure0.clone();
      assertEquals((-4385.0), roundRectangleFigure0.getArcWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      // Undeclared exception!
      try { 
        roundRectangleFigure0.write((DOMOutput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractAttributedFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      // Undeclared exception!
      try { 
        roundRectangleFigure0.transform((AffineTransform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.RoundRectangleFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      // Undeclared exception!
      try { 
        roundRectangleFigure0.restoreTransformTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.RoundRectangleFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      // Undeclared exception!
      try { 
        roundRectangleFigure0.restoreTransformTo("arcWidth");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.awt.geom.RoundRectangle2D$Double
         //
         verifyException("org.jhotdraw.draw.figure.RoundRectangleFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      roundRectangleFigure0.roundrect = null;
      // Undeclared exception!
      try { 
        roundRectangleFigure0.getDrawingArea();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.RoundRectangleFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      // Undeclared exception!
      try { 
        roundRectangleFigure0.drawStroke((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure(763.1159, 763.1159, 0.0, 0.0);
      // Undeclared exception!
      try { 
        roundRectangleFigure0.drawFill((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      // Undeclared exception!
      try { 
        roundRectangleFigure0.contains((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.RectangularShape", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      FontSizeLocator fontSizeLocator0 = new FontSizeLocator();
      Point2D.Double point2D_Double0 = fontSizeLocator0.locate((Figure) roundRectangleFigure0, (Figure) roundRectangleFigure0);
      roundRectangleFigure0.setBounds(point2D_Double0, point2D_Double0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
      assertEquals(12.0, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure((-1726.2023), 686.2082904035, 4598.17636, (-1726.2023));
      roundRectangleFigure0.setArcWidth(6.0);
      assertEquals(6.0, roundRectangleFigure0.getArcWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure(2806.325200405421, (-962.2), 2806.325200405421, 712.84);
      Rectangle2D.Double rectangle2D_Double0 = roundRectangleFigure0.getBounds();
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
      assertEquals((-249.36), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(4209.487800608132, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure(1285.3441195219, 800.0, (-292.170569057963), (-292.170569057963));
      DefaultDOMFactory defaultDOMFactory0 = new DefaultDOMFactory();
      JavaxDOMOutput javaxDOMOutput0 = new JavaxDOMOutput(defaultDOMFactory0);
      // Undeclared exception!
      try { 
        roundRectangleFigure0.write(javaxDOMOutput0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.sun.org.apache.xerces.internal.dom.DocumentImpl cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.jhotdraw.xml.JavaxDOMOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure(0.3142082953460332, 0.3142082953460332, 0.3142082953460332, 3112.72404);
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat();
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Stack<RoundRectangleFigure> stack0 = new Stack<RoundRectangleFigure>();
      List<Figure> list0 = defaultDrawing0.sort(stack0);
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) defaultDrawing0, list0, 0.3142082953460332, false);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      roundRectangleFigure0.drawStroke(graphics2D0);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure((-1026.013900634377), 0.0, (-337.801233154), (-337.801233154));
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat();
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      LinkedList<Figure> linkedList0 = new LinkedList<Figure>();
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) defaultDrawing0, (List<Figure>) linkedList0, 0.3142082953460332, false);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      roundRectangleFigure0.drawStroke(graphics2D0);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure(0.3142082953460332, 0.3142082953460332, 0.3142082953460332, 3112.72404);
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat();
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Stack<RoundRectangleFigure> stack0 = new Stack<RoundRectangleFigure>();
      List<Figure> list0 = defaultDrawing0.sort(stack0);
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) defaultDrawing0, list0, 0.3142082953460332, false);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      roundRectangleFigure0.drawFill(graphics2D0);
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat("org.jhotdraw.draw.figure.RoundRectangleFigure", "", "arcWidth", 1610612736);
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      Vector<Figure> vector0 = new Vector<Figure>();
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) quadTreeDrawing0, (List<Figure>) vector0, 0.0, false);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      roundRectangleFigure0.drawFill(graphics2D0);
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      roundRectangleFigure0.createHandles((-4385));
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      double double0 = roundRectangleFigure0.getArcWidth();
      assertEquals(20.0, double0, 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure((-1.0), 2025.987712352, 367.605459885043, 367.605459885043);
      RoundRectangle2D.Double roundRectangle2D_Double0 = (RoundRectangle2D.Double)roundRectangleFigure0.getTransformRestoreData();
      roundRectangleFigure0.restoreTransformTo(roundRectangle2D_Double0);
      assertEquals(2209.7904422945217, roundRectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(20.0, roundRectangle2D_Double0.arcwidth, 0.01);
      assertEquals(182.8027299425215, roundRectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(20.0, roundRectangle2D_Double0.archeight, 0.01);
      assertEquals(2393.593172237043, roundRectangle2D_Double0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Point2D.Double point2D_Double0 = labeledLineConnectionFigure0.getEndPoint();
      boolean boolean0 = roundRectangleFigure0.contains(point2D_Double0);
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure(12.0, 501.339596282, 501.339596282, 12.0);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(0.0, 101.78157201842, 0.0);
      roundRectangleFigure0.transform(affineTransform0);
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      FontSizeLocator fontSizeLocator0 = new FontSizeLocator();
      Point2D.Double point2D_Double0 = fontSizeLocator0.locate((Figure) roundRectangleFigure0, (Figure) roundRectangleFigure0);
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      ChopRoundRectangleConnector chopRoundRectangleConnector0 = (ChopRoundRectangleConnector)roundRectangleFigure0.findConnector(point2D_Double0, lineConnectionFigure0);
      DefaultDOMFactory defaultDOMFactory0 = new DefaultDOMFactory();
      JavaxDOMOutput javaxDOMOutput0 = new JavaxDOMOutput(defaultDOMFactory0);
      // Undeclared exception!
      try { 
        chopRoundRectangleConnector0.write(javaxDOMOutput0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Storable name not known to factory: org.jhotdraw.draw.figure.RoundRectangleFigure
         //
         verifyException("org.jhotdraw.xml.DefaultDOMFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      // Undeclared exception!
      try { 
        roundRectangleFigure0.read((DOMInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractAttributedFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure(12.0, 501.339596282, 501.339596282, 12.0);
      double double0 = roundRectangleFigure0.getArcHeight();
      assertEquals(20.0, double0, 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure(12.0, 501.339596282, 501.339596282, 12.0);
      Rectangle2D.Double rectangle2D_Double0 = roundRectangleFigure0.getDrawingArea();
      assertEquals(514.839596282, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
      assertEquals(514.839596282, rectangle2D_Double0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      FontSizeLocator fontSizeLocator0 = new FontSizeLocator();
      Point2D.Double point2D_Double0 = fontSizeLocator0.locate((Figure) roundRectangleFigure0, (Figure) roundRectangleFigure0);
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      Connector connector0 = roundRectangleFigure0.findConnector(point2D_Double0, lineConnectionFigure0);
      roundRectangleFigure0.findCompatibleConnector(connector0, true);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      assertEquals(12.0, point2D_Double0.y, 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
      
      roundRectangleFigure0.setArcHeight(0.0);
      assertEquals(0.0, roundRectangleFigure0.getArcHeight(), 0.01);
  }
}
