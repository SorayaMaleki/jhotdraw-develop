/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 01 05:22:16 GMT 2021
 */

package org.jhotdraw.draw.figure;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JTextField;
import javax.swing.plaf.metal.MetalPopupMenuSeparatorUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jhotdraw.draw.DefaultDrawing;
import org.jhotdraw.draw.Drawing;
import org.jhotdraw.draw.QuadTreeDrawing;
import org.jhotdraw.draw.connector.ChopTriangleConnector;
import org.jhotdraw.draw.figure.Figure;
import org.jhotdraw.draw.figure.LineConnectionFigure;
import org.jhotdraw.draw.figure.RoundRectangleFigure;
import org.jhotdraw.draw.handle.DragHandle;
import org.jhotdraw.draw.io.ImageOutputFormat;
import org.jhotdraw.draw.locator.FontSizeLocator;
import org.jhotdraw.xml.DOMInput;
import org.jhotdraw.xml.DOMOutput;
import org.jhotdraw.xml.DefaultDOMFactory;
import org.jhotdraw.xml.JavaPrimitivesDOMFactory;
import org.jhotdraw.xml.JavaxDOMOutput;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RoundRectangleFigure_ESTest extends RoundRectangleFigure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure((-3207.8), (-3207.8), (-3207.8), (-3207.8));
      DefaultDOMFactory defaultDOMFactory0 = new DefaultDOMFactory();
      JavaxDOMOutput javaxDOMOutput0 = new JavaxDOMOutput(defaultDOMFactory0);
      javaxDOMOutput0.openElement("arcWidth");
      // Undeclared exception!
      try { 
        roundRectangleFigure0.write(javaxDOMOutput0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Storable name not known to factory: arcWidth
         //
         verifyException("org.jhotdraw.xml.DefaultDOMFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure(402.663408, 402.663408, 402.663408, (-14.2196545));
      Rectangle2D.Double rectangle2D_Double0 = roundRectangleFigure0.getDrawingArea();
      assertEquals(389.9437535, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
      assertEquals(806.826816, rectangle2D_Double0.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      Rectangle2D.Double rectangle2D_Double0 = roundRectangleFigure0.getDrawingArea();
      assertEquals(1.5, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      assertEquals(1.5, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure(0.0, 0.0, 0.0, 0.0);
      AffineTransform affineTransform0 = new AffineTransform();
      roundRectangleFigure0.transform(affineTransform0);
      Rectangle2D.Double rectangle2D_Double0 = roundRectangleFigure0.getDrawingArea();
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
      assertEquals(1.6, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1.6, rectangle2D_Double0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure(20.0, 20.0, (-1.0), (-1.0));
      Rectangle2D.Double rectangle2D_Double0 = roundRectangleFigure0.getBounds();
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      assertEquals(19.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(19.0, rectangle2D_Double0.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure((-240.53), 20.0, 2843.65209654303, (-240.53));
      Rectangle2D.Double rectangle2D_Double0 = roundRectangleFigure0.getBounds();
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      assertEquals((-220.53), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(2603.12209654303, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure((-1.0), (-1.0), (-1.0), (-1.0));
      Rectangle2D.Double rectangle2D_Double0 = roundRectangleFigure0.getBounds();
      assertEquals((-1.5), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      assertEquals((-1.5), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      
      roundRectangleFigure0.setArcWidth(0.0);
      double double0 = roundRectangleFigure0.getArcWidth();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure(0.017453292519943295, 0.017453292519943295, 0.017453292519943295, 0.017453292519943295);
      roundRectangleFigure0.setArc(891.2, 0.0);
      double double0 = roundRectangleFigure0.getArcHeight();
      assertEquals(891.2, roundRectangleFigure0.getArcWidth(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      point2D_Double0.setLocation(18.0, 0.017453292519943295);
      boolean boolean0 = roundRectangleFigure0.contains(point2D_Double0);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      roundRectangleFigure0.setVisible(false);
      RoundRectangleFigure roundRectangleFigure1 = roundRectangleFigure0.clone();
      assertEquals(20.0, roundRectangleFigure1.getArcWidth(), 0.01);
      assertNotSame(roundRectangleFigure1, roundRectangleFigure0);
      assertEquals(20.0, roundRectangleFigure1.getArcHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure((-1228.3919869757), (-3178.4), (-1228.3919869757), (-1228.3919869757));
      roundRectangleFigure0.setRemovable(false);
      RoundRectangleFigure roundRectangleFigure1 = roundRectangleFigure0.clone();
      assertEquals(20.0, roundRectangleFigure1.getArcHeight(), 0.01);
      assertNotSame(roundRectangleFigure1, roundRectangleFigure0);
      assertEquals(20.0, roundRectangleFigure1.getArcWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      
      roundRectangleFigure0.setArcWidth(0.0);
      roundRectangleFigure0.clone();
      assertEquals(0.0, roundRectangleFigure0.getArcWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure((-1228.3919869757), (-3178.4), 246.38469, 246.38469);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      
      roundRectangleFigure0.setArcWidth((-1.0));
      roundRectangleFigure0.clone();
      assertEquals((-1.0), roundRectangleFigure0.getArcWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure(0.0, 0.0, (-749.58578), 0.0);
      roundRectangleFigure0.setArcHeight((-2330.668));
      roundRectangleFigure0.clone();
      assertEquals((-2330.668), roundRectangleFigure0.getArcHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure(20.0, (-1855.5120428230398), 20.0, 3546.250971);
      // Undeclared exception!
      try { 
        roundRectangleFigure0.write((DOMOutput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractAttributedFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure(0.0, 0.0, 3.141592653589793, 3.141592653589793);
      // Undeclared exception!
      try { 
        roundRectangleFigure0.setBounds((Point2D.Double) null, (Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.RoundRectangleFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure((-397.0357640245), (-397.0357640245), 93.21, (-4351.427923090469));
      // Undeclared exception!
      try { 
        roundRectangleFigure0.restoreTransformTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.RoundRectangleFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure((-516.628404686251), (-1086.881), 2375.40369696055, 8.0);
      DragHandle dragHandle0 = new DragHandle(roundRectangleFigure0);
      // Undeclared exception!
      try { 
        roundRectangleFigure0.restoreTransformTo(dragHandle0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jhotdraw.draw.handle.DragHandle cannot be cast to java.awt.geom.RoundRectangle2D$Double
         //
         verifyException("org.jhotdraw.draw.figure.RoundRectangleFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      // Undeclared exception!
      try { 
        roundRectangleFigure0.drawStroke((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure(0.0, 0.0, 0.0, 0.0);
      // Undeclared exception!
      try { 
        roundRectangleFigure0.drawFill((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      // Undeclared exception!
      try { 
        roundRectangleFigure0.contains((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.RectangularShape", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      FontSizeLocator fontSizeLocator0 = new FontSizeLocator();
      Point2D.Double point2D_Double0 = fontSizeLocator0.locate((Figure) roundRectangleFigure0, (Figure) roundRectangleFigure0);
      roundRectangleFigure0.setBounds(point2D_Double0, point2D_Double0);
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      assertEquals(12.0, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      Rectangle2D.Double rectangle2D_Double0 = roundRectangleFigure0.getBounds();
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      boolean boolean0 = roundRectangleFigure0.contains(point2D_Double0);
      assertTrue(boolean0);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure(0.1, 0.1, 1273.589717900408, 1273.589717900408);
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat();
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(277.0, 2.0, 277.0, 277.0);
      List<Figure> list0 = quadTreeDrawing0.findFiguresWithin(rectangle2D_Double0);
      float[] floatArray0 = new float[9];
      AffineTransform affineTransform0 = new AffineTransform(floatArray0);
      MetalPopupMenuSeparatorUI metalPopupMenuSeparatorUI0 = new MetalPopupMenuSeparatorUI();
      JTextField jTextField0 = new JTextField();
      Dimension dimension0 = metalPopupMenuSeparatorUI0.getPreferredSize(jTextField0);
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) quadTreeDrawing0, list0, affineTransform0, dimension0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      roundRectangleFigure0.drawStroke(graphics2D0);
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure((-3207.8), (-3207.8), (-3207.8), (-3207.8));
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat("arcWidth", "arcWidth", ",FI", (-2426));
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      ArrayList<Figure> arrayList0 = new ArrayList<Figure>();
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) defaultDrawing0, (List<Figure>) arrayList0, (double) (-2426), true);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      roundRectangleFigure0.drawStroke(graphics2D0);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      roundRectangleFigure0.createHandles((-2554));
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure(1759.2176646305, 0.0, 2509.275096792729, 627.355513);
      double double0 = roundRectangleFigure0.getArcWidth();
      assertEquals(20.0, double0, 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure((-1228.3919869757), (-3178.4), (-1228.3919869757), (-1228.3919869757));
      RoundRectangleFigure roundRectangleFigure1 = roundRectangleFigure0.clone();
      roundRectangleFigure1.roundrect = null;
      // Undeclared exception!
      try { 
        roundRectangleFigure1.getDrawingArea();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.RoundRectangleFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      Point2D.Double point2D_Double0 = lineConnectionFigure0.getOutermostPoint();
      roundRectangleFigure0.findConnector(point2D_Double0, lineConnectionFigure0);
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure((-240.53), 20.0, 2843.65209654303, (-240.53));
      RoundRectangle2D.Double roundRectangle2D_Double0 = (RoundRectangle2D.Double)roundRectangleFigure0.getTransformRestoreData();
      roundRectangleFigure0.restoreTransformTo(roundRectangle2D_Double0);
      assertEquals(20.0, roundRectangle2D_Double0.arcwidth, 0.01);
      assertEquals(1181.296048271515, roundRectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-100.265), roundRectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(20.0, roundRectangle2D_Double0.archeight, 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      JavaPrimitivesDOMFactory javaPrimitivesDOMFactory0 = new JavaPrimitivesDOMFactory();
      JavaxDOMOutput javaxDOMOutput0 = new JavaxDOMOutput(javaPrimitivesDOMFactory0);
      // Undeclared exception!
      try { 
        roundRectangleFigure0.write(javaxDOMOutput0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.sun.org.apache.xerces.internal.dom.DocumentImpl cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.jhotdraw.xml.JavaxDOMOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure((-240.53), 20.0, 2843.65209654303, (-240.53));
      ChopTriangleConnector chopTriangleConnector0 = new ChopTriangleConnector();
      roundRectangleFigure0.findCompatibleConnector(chopTriangleConnector0, true);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      roundRectangleFigure0.setArc(18.0, 1297.4686409212186);
      roundRectangleFigure0.setArc(18.0, 0.017453292519943295);
      assertEquals(18.0, roundRectangleFigure0.getArcWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure(0.1, 0.1, 1273.589717900408, 1273.589717900408);
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat();
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(277.0, 2.0, 277.0, 277.0);
      List<Figure> list0 = quadTreeDrawing0.findFiguresWithin(rectangle2D_Double0);
      float[] floatArray0 = new float[9];
      AffineTransform affineTransform0 = new AffineTransform(floatArray0);
      MetalPopupMenuSeparatorUI metalPopupMenuSeparatorUI0 = new MetalPopupMenuSeparatorUI();
      JTextField jTextField0 = new JTextField();
      Dimension dimension0 = metalPopupMenuSeparatorUI0.getPreferredSize(jTextField0);
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) quadTreeDrawing0, list0, affineTransform0, dimension0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      roundRectangleFigure0.drawFill(graphics2D0);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      // Undeclared exception!
      try { 
        roundRectangleFigure0.read((DOMInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractAttributedFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      double double0 = roundRectangleFigure0.getArcHeight();
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      assertEquals(20.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure((-1228.3919869757), (-3178.4), (-1228.3919869757), (-1228.3919869757));
      Rectangle2D.Double rectangle2D_Double0 = roundRectangleFigure0.getDrawingArea();
      assertEquals((-4405.291986975701), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-2455.2839739514), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure((-1228.3919869757), (-3178.4), (-1228.3919869757), (-1228.3919869757));
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) (-1), (double) 0, (-3178.4));
      roundRectangleFigure0.transform(affineTransform0);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure((-1228.3919869757), (-3178.4), (-1228.3919869757), (-1228.3919869757));
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
      
      roundRectangleFigure0.setArcHeight((-1));
      double double0 = roundRectangleFigure0.getArcHeight();
      assertEquals((-1.0), double0, 0.01);
  }
}
