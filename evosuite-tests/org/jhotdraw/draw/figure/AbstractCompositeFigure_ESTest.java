/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 01 05:51:13 GMT 2021
 */

package org.jhotdraw.draw.figure;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import javax.swing.event.UndoableEditEvent;
import javax.swing.undo.CompoundEdit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jhotdraw.draw.AbstractDrawing;
import org.jhotdraw.draw.AttributeKey;
import org.jhotdraw.draw.AttributeKeys;
import org.jhotdraw.draw.DefaultDrawing;
import org.jhotdraw.draw.Drawing;
import org.jhotdraw.draw.GraphicalCompositeFigure;
import org.jhotdraw.draw.QuadTreeDrawing;
import org.jhotdraw.draw.event.CompositeFigureListener;
import org.jhotdraw.draw.event.FigureEvent;
import org.jhotdraw.draw.figure.AbstractCompositeFigure;
import org.jhotdraw.draw.figure.BezierFigure;
import org.jhotdraw.draw.figure.DiamondFigure;
import org.jhotdraw.draw.figure.Figure;
import org.jhotdraw.draw.figure.GroupFigure;
import org.jhotdraw.draw.figure.ImageFigure;
import org.jhotdraw.draw.figure.LabelFigure;
import org.jhotdraw.draw.figure.LabeledLineConnectionFigure;
import org.jhotdraw.draw.figure.LineConnectionFigure;
import org.jhotdraw.draw.figure.ListFigure;
import org.jhotdraw.draw.figure.RectangleFigure;
import org.jhotdraw.draw.figure.RoundRectangleFigure;
import org.jhotdraw.draw.figure.TextAreaFigure;
import org.jhotdraw.draw.figure.TriangleFigure;
import org.jhotdraw.draw.handle.BezierControlPointHandle;
import org.jhotdraw.draw.handle.Handle;
import org.jhotdraw.draw.handle.OrientationHandle;
import org.jhotdraw.draw.io.ImageOutputFormat;
import org.jhotdraw.draw.layouter.Layouter;
import org.jhotdraw.draw.layouter.LocatorLayouter;
import org.jhotdraw.draw.locator.RelativeDecoratorLocator;
import org.jhotdraw.geom.BezierPath;
import org.jhotdraw.geom.Dimension2DDouble;
import org.jhotdraw.xml.DOMInput;
import org.jhotdraw.xml.DOMOutput;
import org.jhotdraw.xml.DefaultDOMFactory;
import org.jhotdraw.xml.JavaPrimitivesDOMFactory;
import org.jhotdraw.xml.JavaxDOMOutput;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMException;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractCompositeFigure_ESTest extends AbstractCompositeFigure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      RelativeDecoratorLocator relativeDecoratorLocator0 = new RelativeDecoratorLocator(0.0, (-28.418470753));
      Point2D.Double point2D_Double0 = relativeDecoratorLocator0.locate((Figure) defaultDrawing0);
      point2D_Double0.x = 0.39269908169872414;
      defaultDrawing0.setBounds(point2D_Double0, point2D_Double0);
      assertEquals(0, defaultDrawing0.getLayer());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      ListFigure listFigure0 = new ListFigure(labeledLineConnectionFigure0);
      listFigure0.willChange();
      boolean boolean0 = listFigure0.add((Figure) labeledLineConnectionFigure0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Collection<Handle> collection0 = defaultDrawing0.createHandles((-1));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      defaultDrawing0.basicAdd(0, (Figure) labeledLineConnectionFigure0);
      assertTrue(labeledLineConnectionFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure();
      AbstractCompositeFigure.EventHandler abstractCompositeFigure_EventHandler0 = graphicalCompositeFigure0.new EventHandler();
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      BezierPath bezierPath0 = labeledLineConnectionFigure0.getCappedPath();
      Rectangle2D.Double rectangle2D_Double0 = bezierPath0.getBounds2D();
      FigureEvent figureEvent0 = new FigureEvent(graphicalCompositeFigure0, rectangle2D_Double0);
      abstractCompositeFigure_EventHandler0.figureRemoved(figureEvent0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      groupFigure0.validate();
      assertEquals(0, groupFigure0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure((Figure) null);
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Class<BezierControlPointHandle> class0 = BezierControlPointHandle.class;
      BezierControlPointHandle bezierControlPointHandle0 = new BezierControlPointHandle(labeledLineConnectionFigure0, 0, 0);
      AttributeKey<BezierControlPointHandle> attributeKey0 = new AttributeKey<BezierControlPointHandle>("", class0, bezierControlPointHandle0, true);
      graphicalCompositeFigure0.set(attributeKey0, bezierControlPointHandle0);
      assertEquals("", attributeKey0.toString());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      ListFigure listFigure0 = new ListFigure(labeledLineConnectionFigure0);
      listFigure0.invalidate();
      assertEquals(0, listFigure0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      ListFigure listFigure0 = new ListFigure(labeledLineConnectionFigure0);
      listFigure0.fireFigureAdded(labeledLineConnectionFigure0, 1412);
      assertTrue(listFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      RectangleFigure rectangleFigure0 = new RectangleFigure(1.5, 1.5, 0.0, (-2068.68070568));
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure(rectangleFigure0);
      AbstractCompositeFigure.EventHandler abstractCompositeFigure_EventHandler0 = graphicalCompositeFigure0.new EventHandler();
      Rectangle2D.Double rectangle2D_Double0 = graphicalCompositeFigure0.getBounds();
      FigureEvent figureEvent0 = new FigureEvent(rectangleFigure0, rectangle2D_Double0);
      abstractCompositeFigure_EventHandler0.figureChanged(figureEvent0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      ListFigure listFigure0 = new ListFigure(defaultDrawing0);
      LinkedList linkedList0 = (LinkedList)listFigure0.getTransformRestoreData();
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      Layouter layouter0 = listFigure0.getLayouter();
      assertNotNull(layouter0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ImageFigure imageFigure0 = new ImageFigure(511.760862, 511.760862, 511.760862, 2510.4052613236);
      ListFigure listFigure0 = new ListFigure(imageFigure0);
      Rectangle2D.Double rectangle2D_Double0 = listFigure0.getDrawingArea();
      assertEquals(1024.021724, rectangle2D_Double0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ImageFigure imageFigure0 = new ImageFigure(511.760862, 511.760862, 511.760862, 2510.4052613236);
      ListFigure listFigure0 = new ListFigure(imageFigure0);
      Rectangle2D.Double rectangle2D_Double0 = listFigure0.getBounds();
      assertEquals(1023.521724, rectangle2D_Double0.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      Map<AttributeKey<?>, Object> map0 = listFigure0.getAttributes();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure();
      Class<OrientationHandle> class0 = OrientationHandle.class;
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      OrientationHandle orientationHandle0 = new OrientationHandle(triangleFigure0);
      AttributeKey<OrientationHandle> attributeKey0 = new AttributeKey<OrientationHandle>("majorGridSpacing", class0, orientationHandle0, false);
      OrientationHandle orientationHandle1 = graphicalCompositeFigure0.get(attributeKey0);
      assertSame(orientationHandle0, orientationHandle1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      AbstractCompositeFigure abstractCompositeFigure0 = defaultDrawing0.clone();
      assertNotSame(abstractCompositeFigure0, defaultDrawing0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      JavaPrimitivesDOMFactory javaPrimitivesDOMFactory0 = new JavaPrimitivesDOMFactory();
      JavaxDOMOutput javaxDOMOutput0 = new JavaxDOMOutput(javaPrimitivesDOMFactory0);
      defaultDrawing0.write(javaxDOMOutput0);
      // Undeclared exception!
      try { 
        defaultDrawing0.write(javaxDOMOutput0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      // Undeclared exception!
      try { 
        defaultDrawing0.write((DOMOutput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AbstractDrawing", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure();
      DefaultDOMFactory defaultDOMFactory0 = new DefaultDOMFactory();
      JavaxDOMOutput javaxDOMOutput0 = new JavaxDOMOutput(defaultDOMFactory0);
      // Undeclared exception!
      try { 
        graphicalCompositeFigure0.write(javaxDOMOutput0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Storable name not known to factory: #document
         //
         verifyException("org.jhotdraw.xml.DefaultDOMFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      // Undeclared exception!
      try { 
        defaultDrawing0.restoreTransformTo(lineConnectionFigure0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jhotdraw.draw.figure.LineConnectionFigure cannot be cast to java.util.LinkedList
         //
         verifyException("org.jhotdraw.draw.figure.AbstractCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      // Undeclared exception!
      try { 
        groupFigure0.restoreAttributesTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      // Undeclared exception!
      try { 
        defaultDrawing0.restoreAttributesTo(defaultDrawing0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jhotdraw.draw.DefaultDrawing cannot be cast to java.util.LinkedList
         //
         verifyException("org.jhotdraw.draw.figure.AbstractAttributedCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure();
      // Undeclared exception!
      try { 
        graphicalCompositeFigure0.removeChild(567);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 567, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      // Undeclared exception!
      try { 
        groupFigure0.removeChild((-2784));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      AbstractDrawing abstractDrawing0 = defaultDrawing0.clone();
      abstractDrawing0.basicAdd((Figure) defaultDrawing0);
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      BezierControlPointHandle bezierControlPointHandle0 = new BezierControlPointHandle(labeledLineConnectionFigure0, 0, 0, defaultDrawing0);
      LinkedHashSet<LabelFigure> linkedHashSet0 = new LinkedHashSet<LabelFigure>();
      // Undeclared exception!
      try { 
        abstractDrawing0.removeAll(linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.handle.BezierControlPointHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure();
      // Undeclared exception!
      try { 
        graphicalCompositeFigure0.read((DOMInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      // Undeclared exception!
      try { 
        listFigure0.getChild((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      // Undeclared exception!
      try { 
        defaultDrawing0.findChildIndex((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.RectangularShape", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      // Undeclared exception!
      try { 
        quadTreeDrawing0.findChild((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.RectangularShape", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure();
      // Undeclared exception!
      try { 
        graphicalCompositeFigure0.draw((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      // Undeclared exception!
      try { 
        defaultDrawing0.contains((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.RectangularShape", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      // Undeclared exception!
      try { 
        listFigure0.basicRemoveChild((-1674));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure();
      // Undeclared exception!
      try { 
        graphicalCompositeFigure0.basicAddAll(0, (Collection<? extends Figure>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      ListFigure listFigure0 = new ListFigure(labeledLineConnectionFigure0);
      // Undeclared exception!
      try { 
        listFigure0.basicAdd((Figure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      // Undeclared exception!
      try { 
        defaultDrawing0.addAll((-2680), (Collection<? extends Figure>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure((Figure) null);
      // Undeclared exception!
      try { 
        graphicalCompositeFigure0.add(0, (Figure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure((Figure) null);
      // Undeclared exception!
      try { 
        defaultDrawing0.add(3, (Figure) graphicalCompositeFigure0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Rectangle2D.Double rectangle2D_Double0 = defaultDrawing0.getBounds();
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      Point2D.Double point2D_Double0 = new Point2D.Double(619.33763512748, 619.33763512748);
      groupFigure0.chop(point2D_Double0);
      Rectangle2D.Double rectangle2D_Double0 = groupFigure0.getBounds();
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure();
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      boolean boolean0 = graphicalCompositeFigure0.add((Figure) lineConnectionFigure0);
      assertTrue(boolean0);
      
      Rectangle2D.Double rectangle2D_Double0 = graphicalCompositeFigure0.getDrawingArea((double) 0.0F);
      assertEquals(5.0, rectangle2D_Double0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      LinkedHashSet<RoundRectangleFigure> linkedHashSet0 = new LinkedHashSet<RoundRectangleFigure>();
      listFigure0.removeAll(linkedHashSet0);
      Rectangle2D.Double rectangle2D_Double0 = listFigure0.getDrawingArea(1.0);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure();
      Rectangle2D.Double rectangle2D_Double0 = graphicalCompositeFigure0.getDrawingArea((double) 0.0F);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure((Figure) null);
      int int0 = graphicalCompositeFigure0.basicRemove((Figure) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      // Undeclared exception!
      try { 
        defaultDrawing0.changed();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // changed was called without a prior call to willChange. 0
         //
         verifyException("org.jhotdraw.draw.figure.AbstractFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      DiamondFigure diamondFigure0 = new DiamondFigure();
      groupFigure0.add((Figure) diamondFigure0);
      groupFigure0.clone();
      assertEquals(1, groupFigure0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      listFigure0.layout();
      assertTrue(listFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Point2D.Double point2D_Double0 = new Point2D.Double(619.33763512748, 619.33763512748);
      Figure figure0 = defaultDrawing0.findChild(point2D_Double0);
      assertNull(figure0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      RelativeDecoratorLocator relativeDecoratorLocator0 = new RelativeDecoratorLocator(0.0, (-28.418470753));
      Point2D.Double point2D_Double0 = relativeDecoratorLocator0.locate((Figure) defaultDrawing0);
      defaultDrawing0.setBounds(point2D_Double0, point2D_Double0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      boolean boolean0 = defaultDrawing0.remove(defaultDrawing0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      List<Figure> list0 = defaultDrawing0.getChildrenFrontToBack();
      defaultDrawing0.addAll((-1), (Collection<? extends Figure>) list0);
      assertTrue(defaultDrawing0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure();
      ArrayList<TextAreaFigure> arrayList0 = new ArrayList<TextAreaFigure>();
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      arrayList0.add(textAreaFigure0);
      // Undeclared exception!
      try { 
        graphicalCompositeFigure0.addAll(1, (Collection<? extends Figure>) arrayList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure();
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      graphicalCompositeFigure0.add(0, (Figure) quadTreeDrawing0);
      assertEquals(1, graphicalCompositeFigure0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Rectangle2D.Double rectangle2D_Double0 = defaultDrawing0.getDrawingArea();
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure();
      // Undeclared exception!
      try { 
        graphicalCompositeFigure0.basicRemoveChild(288);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 288, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      ListFigure listFigure0 = new ListFigure(labeledLineConnectionFigure0);
      LocatorLayouter locatorLayouter0 = new LocatorLayouter();
      listFigure0.setLayouter(locatorLayouter0);
      assertTrue(listFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Layouter layouter0 = defaultDrawing0.getLayouter();
      assertNull(layouter0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      int int0 = listFigure0.getChildCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      ImageFigure imageFigure0 = new ImageFigure();
      // Undeclared exception!
      try { 
        groupFigure0.basicAdd(23, (Figure) imageFigure0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 23, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      List<Figure> list0 = listFigure0.getChildren();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure();
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      boolean boolean0 = graphicalCompositeFigure0.add((Figure) lineConnectionFigure0);
      assertTrue(boolean0);
      
      graphicalCompositeFigure0.getPreferredSize();
      Rectangle2D.Double rectangle2D_Double0 = graphicalCompositeFigure0.getDrawingArea((double) 0.0F);
      assertEquals((-2.5), rectangle2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      AbstractDrawing abstractDrawing0 = defaultDrawing0.clone();
      abstractDrawing0.basicAdd((Figure) defaultDrawing0);
      LinkedHashSet<LabelFigure> linkedHashSet0 = new LinkedHashSet<LabelFigure>();
      abstractDrawing0.removeAll(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      DefaultDOMFactory defaultDOMFactory0 = new DefaultDOMFactory();
      JavaxDOMOutput javaxDOMOutput0 = new JavaxDOMOutput(defaultDOMFactory0);
      groupFigure0.write(javaxDOMOutput0);
      assertEquals(0, groupFigure0.getLayer());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure();
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat();
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      List<Figure> list0 = labeledLineConnectionFigure0.getChildren();
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) quadTreeDrawing0, list0, (-1567.5904), true);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      graphicalCompositeFigure0.draw(sunGraphics2D0);
      assertEquals(1, sunGraphics2D0.interpolationType);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      Dimension2DDouble dimension2DDouble0 = listFigure0.getPreferredSize();
      assertEquals(0.0, dimension2DDouble0.height, 0.01);
      assertEquals(0.0, dimension2DDouble0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      graphicalCompositeFigure0.add((Figure) labeledLineConnectionFigure0);
      graphicalCompositeFigure0.layout();
      assertTrue(graphicalCompositeFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      RelativeDecoratorLocator relativeDecoratorLocator0 = new RelativeDecoratorLocator(0.0, (-28.418470753));
      Point2D.Double point2D_Double0 = relativeDecoratorLocator0.locate((Figure) defaultDrawing0);
      int int0 = defaultDrawing0.findChildIndex(point2D_Double0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      DiamondFigure diamondFigure0 = new DiamondFigure();
      Point2D.Double point2D_Double0 = diamondFigure0.getStartPoint();
      ListFigure listFigure0 = new ListFigure(labeledLineConnectionFigure0);
      Figure figure0 = listFigure0.findFigureInside(point2D_Double0);
      assertNull(figure0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      Point2D.Double point2D_Double0 = lineConnectionFigure0.getStartPoint();
      Figure figure0 = groupFigure0.findFigureInside(point2D_Double0);
      assertNull(figure0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      ListFigure listFigure0 = new ListFigure(labeledLineConnectionFigure0);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      boolean boolean0 = listFigure0.contains(point2D_Double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Point2D.Double point2D_Double0 = labeledLineConnectionFigure0.getPoint(1, 1);
      boolean boolean0 = groupFigure0.contains(point2D_Double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      boolean boolean0 = listFigure0.contains((Figure) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      LinkedList linkedList0 = (LinkedList)groupFigure0.getAttributesRestoreData();
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      Class<GroupFigure> class0 = GroupFigure.class;
      AttributeKey<GroupFigure> attributeKey0 = new AttributeKey<GroupFigure>("name", class0);
      attributeKey0.set(groupFigure0, groupFigure0);
      assertEquals("name", attributeKey0.getKey());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure((Figure) null);
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      graphicalCompositeFigure0.basicAdd((Figure) labeledLineConnectionFigure0);
      graphicalCompositeFigure0.bringToFront(labeledLineConnectionFigure0);
      assertEquals(1, graphicalCompositeFigure0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      groupFigure0.bringToFront(lineConnectionFigure0);
      assertEquals(0, groupFigure0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      listFigure0.sendToBack(listFigure0);
      assertEquals(0, listFigure0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ArrayList<ListFigure> arrayList0 = new ArrayList<ListFigure>();
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure((Figure) null);
      ListFigure listFigure0 = new ListFigure();
      arrayList0.add(listFigure0);
      graphicalCompositeFigure0.basicRemoveAll(arrayList0);
      assertEquals(0, graphicalCompositeFigure0.getLayer());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Stack<ListFigure> stack0 = new Stack<ListFigure>();
      ListFigure listFigure0 = new ListFigure(defaultDrawing0);
      stack0.add(listFigure0);
      defaultDrawing0.removeAll(stack0);
      assertEquals(1, stack0.size());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      defaultDrawing0.addNotify(quadTreeDrawing0);
      assertEquals(0, quadTreeDrawing0.getLayer());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      ArrayDeque<BezierFigure> arrayDeque0 = new ArrayDeque<BezierFigure>();
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      arrayDeque0.add(lineConnectionFigure0);
      // Undeclared exception!
      try { 
        defaultDrawing0.basicAddAll(125, arrayDeque0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 125, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      Stack<LineConnectionFigure> stack0 = new Stack<LineConnectionFigure>();
      groupFigure0.basicAddAll((-1318), stack0);
      assertTrue(groupFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      ArrayDeque<TextAreaFigure> arrayDeque0 = new ArrayDeque<TextAreaFigure>();
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("{*nJWQ(");
      arrayDeque0.add(textAreaFigure0);
      groupFigure0.addAll((Collection<? extends Figure>) arrayDeque0);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(0.0, (-1675.94628703734), 544.1055173697);
      groupFigure0.transform(affineTransform0);
      assertEquals(1, groupFigure0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("");
      boolean boolean0 = quadTreeDrawing0.add((Figure) textAreaFigure0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      Collection<Handle> collection0 = groupFigure0.createHandles(0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Collection<Handle> collection0 = defaultDrawing0.createHandles(2774);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      AbstractCompositeFigure.EventHandler abstractCompositeFigure_EventHandler0 = listFigure0.createEventHandler();
      Class<TextAreaFigure> class0 = TextAreaFigure.class;
      AttributeKey<TextAreaFigure> attributeKey0 = new AttributeKey<TextAreaFigure>("", class0, (TextAreaFigure) null, true);
      FigureEvent figureEvent0 = new FigureEvent(listFigure0, attributeKey0, class0, (Object) null);
      // Undeclared exception!
      try { 
        abstractCompositeFigure_EventHandler0.figureChanged(figureEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Rectangle2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      DiamondFigure diamondFigure0 = new DiamondFigure();
      AbstractCompositeFigure.EventHandler abstractCompositeFigure_EventHandler0 = groupFigure0.createEventHandler();
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      FigureEvent figureEvent0 = new FigureEvent(groupFigure0, diamondFigure0.IS_QUADRATIC, triangleFigure0, (Object) null);
      abstractCompositeFigure_EventHandler0.areaInvalidated(figureEvent0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      DiamondFigure diamondFigure0 = new DiamondFigure();
      AbstractCompositeFigure.EventHandler abstractCompositeFigure_EventHandler0 = groupFigure0.createEventHandler();
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      FigureEvent figureEvent0 = new FigureEvent(groupFigure0, diamondFigure0.IS_QUADRATIC, triangleFigure0, (Object) null);
      abstractCompositeFigure_EventHandler0.attributeChanged(figureEvent0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      groupFigure0.add((Figure) labeledLineConnectionFigure0);
      groupFigure0.removeNotify((Drawing) null);
      assertFalse(groupFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      LocatorLayouter locatorLayouter0 = new LocatorLayouter();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Rectangle2D.Double rectangle2D_Double0 = locatorLayouter0.layout(groupFigure0, point2D_Double0, point2D_Double0);
      FigureEvent figureEvent0 = new FigureEvent(groupFigure0, rectangle2D_Double0);
      AbstractCompositeFigure.EventHandler abstractCompositeFigure_EventHandler0 = groupFigure0.createEventHandler();
      abstractCompositeFigure_EventHandler0.figureAdded(figureEvent0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      ListFigure listFigure0 = new ListFigure(labeledLineConnectionFigure0);
      AbstractCompositeFigure.EventHandler abstractCompositeFigure_EventHandler0 = listFigure0.new EventHandler();
      Class<RectangleFigure> class0 = RectangleFigure.class;
      RectangleFigure rectangleFigure0 = new RectangleFigure();
      AttributeKey<RectangleFigure> attributeKey0 = new AttributeKey<RectangleFigure>("liner", class0, rectangleFigure0);
      FigureEvent figureEvent0 = new FigureEvent(listFigure0, attributeKey0, class0, (Object) null);
      abstractCompositeFigure_EventHandler0.figureRequestRemove(figureEvent0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      AbstractCompositeFigure.EventHandler abstractCompositeFigure_EventHandler0 = listFigure0.new EventHandler();
      CompoundEdit compoundEdit0 = new CompoundEdit();
      UndoableEditEvent undoableEditEvent0 = new UndoableEditEvent(listFigure0, compoundEdit0);
      abstractCompositeFigure_EventHandler0.undoableEditHappened(undoableEditEvent0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      // Undeclared exception!
      try { 
        groupFigure0.getChild(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Collection<Figure> collection0 = defaultDrawing0.getDecomposition();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      CompositeFigureListener compositeFigureListener0 = mock(CompositeFigureListener.class, new ViolatedAssumptionAnswer());
      groupFigure0.addCompositeFigureListener(compositeFigureListener0);
      assertEquals(0, groupFigure0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure();
      graphicalCompositeFigure0.removeCompositeFigureListener((CompositeFigureListener) null);
      assertTrue(graphicalCompositeFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      Class<GroupFigure> class0 = GroupFigure.class;
      AttributeKey<GroupFigure> attributeKey0 = new AttributeKey<GroupFigure>("name", class0);
      GroupFigure groupFigure1 = groupFigure0.get(attributeKey0);
      assertNull(groupFigure1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      ListFigure listFigure0 = new ListFigure(labeledLineConnectionFigure0);
      GroupFigure groupFigure0 = new GroupFigure();
      groupFigure0.basicAdd((Figure) listFigure0);
      groupFigure0.basicRemoveAllChildren();
      assertEquals(0, groupFigure0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      BezierFigure bezierFigure0 = new BezierFigure(false);
      groupFigure0.fireFigureRemoved(bezierFigure0, 13290186);
      assertFalse(groupFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure();
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      graphicalCompositeFigure0.add((Figure) lineConnectionFigure0);
      graphicalCompositeFigure0.layout();
      assertTrue(graphicalCompositeFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      ListFigure listFigure0 = new ListFigure(labeledLineConnectionFigure0);
      GroupFigure groupFigure0 = new GroupFigure();
      int int0 = groupFigure0.indexOf(listFigure0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      Map<AttributeKey<?>, Object> map0 = groupFigure0.getAttributes();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      listFigure0.removeAllChildren();
      assertTrue(listFigure0.isVisible());
  }
}
