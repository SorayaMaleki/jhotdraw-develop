/*
 * This file was automatically generated by EvoSuite
 * Sat May 29 14:01:44 GMT 2021
 */

package org.jhotdraw.draw.figure;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Stack;
import javax.swing.event.UndoableEditEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.undo.UndoableEdit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jhotdraw.draw.AbstractDrawing;
import org.jhotdraw.draw.AttributeKey;
import org.jhotdraw.draw.AttributeKeys;
import org.jhotdraw.draw.DefaultDrawing;
import org.jhotdraw.draw.GraphicalCompositeFigure;
import org.jhotdraw.draw.QuadTreeDrawing;
import org.jhotdraw.draw.event.CompositeFigureListener;
import org.jhotdraw.draw.event.FigureEvent;
import org.jhotdraw.draw.figure.AbstractCompositeFigure;
import org.jhotdraw.draw.figure.DiamondFigure;
import org.jhotdraw.draw.figure.EllipseFigure;
import org.jhotdraw.draw.figure.Figure;
import org.jhotdraw.draw.figure.GroupFigure;
import org.jhotdraw.draw.figure.ImageFigure;
import org.jhotdraw.draw.figure.LabelFigure;
import org.jhotdraw.draw.figure.LabeledLineConnectionFigure;
import org.jhotdraw.draw.figure.LineConnectionFigure;
import org.jhotdraw.draw.figure.ListFigure;
import org.jhotdraw.draw.figure.RoundRectangleFigure;
import org.jhotdraw.draw.figure.TextFigure;
import org.jhotdraw.draw.figure.TriangleFigure;
import org.jhotdraw.draw.handle.CloseHandle;
import org.jhotdraw.draw.handle.FontSizeHandle;
import org.jhotdraw.draw.handle.Handle;
import org.jhotdraw.draw.handle.OrientationHandle;
import org.jhotdraw.draw.layouter.Layouter;
import org.jhotdraw.draw.locator.FontSizeLocator;
import org.jhotdraw.draw.locator.Locator;
import org.jhotdraw.draw.locator.RelativeDecoratorLocator;
import org.jhotdraw.geom.Dimension2DDouble;
import org.jhotdraw.xml.DOMInput;
import org.jhotdraw.xml.DOMOutput;
import org.jhotdraw.xml.DefaultDOMFactory;
import org.jhotdraw.xml.JavaPrimitivesDOMFactory;
import org.jhotdraw.xml.JavaxDOMOutput;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractCompositeFigure_ESTest extends AbstractCompositeFigure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      groupFigure0.fireFigureRemoved(lineConnectionFigure0, (-301));
      assertTrue(groupFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      LabelFigure labelFigure0 = new LabelFigure();
      groupFigure0.basicAdd((Figure) lineConnectionFigure0);
      boolean boolean0 = groupFigure0.add((Figure) labelFigure0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      Collection<Handle> collection0 = groupFigure0.createHandles((-364));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      DefaultDOMFactory defaultDOMFactory0 = new DefaultDOMFactory();
      JavaxDOMOutput javaxDOMOutput0 = new JavaxDOMOutput(defaultDOMFactory0);
      defaultDrawing0.write(javaxDOMOutput0);
      assertTrue(defaultDrawing0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      defaultDrawing0.basicAdd(0, (Figure) lineConnectionFigure0);
      assertFalse(defaultDrawing0.isDebugMode());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      AbstractCompositeFigure.EventHandler abstractCompositeFigure_EventHandler0 = defaultDrawing0.new EventHandler();
      Class<DefaultTableModel> class0 = DefaultTableModel.class;
      Object[] objectArray0 = new Object[9];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 0);
      AttributeKey<DefaultTableModel> attributeKey0 = new AttributeKey<DefaultTableModel>(".icon", class0, defaultTableModel0);
      FigureEvent figureEvent0 = new FigureEvent(defaultDrawing0, attributeKey0, defaultDrawing0, defaultTableModel0);
      abstractCompositeFigure_EventHandler0.figureAdded(figureEvent0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      AbstractCompositeFigure.EventHandler abstractCompositeFigure_EventHandler0 = groupFigure0.createEventHandler();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-1.0), 479.0, 479.0, (-1.0));
      FigureEvent figureEvent0 = new FigureEvent(groupFigure0, rectangle2D_Double0);
      abstractCompositeFigure_EventHandler0.areaInvalidated(figureEvent0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      listFigure0.validate();
      assertTrue(listFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure();
      graphicalCompositeFigure0.setLayouter((Layouter) null);
      assertTrue(graphicalCompositeFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      groupFigure0.invalidate();
      assertTrue(groupFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      groupFigure0.basicAdd((Figure) lineConnectionFigure0);
      int int0 = groupFigure0.getChildCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure(defaultDrawing0);
      Rectangle2D.Double rectangle2D_Double0 = graphicalCompositeFigure0.getBounds();
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      Map<AttributeKey<?>, Object> map0 = listFigure0.getAttributes();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure((Figure) null);
      Class<DiamondFigure> class0 = DiamondFigure.class;
      AttributeKey<DiamondFigure> attributeKey0 = new AttributeKey<DiamondFigure>("Illegal ref attribute value: <", class0);
      DiamondFigure diamondFigure0 = listFigure0.get(attributeKey0);
      assertNull(diamondFigure0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure((-1.57), (-1.57), (-1.57), 0.5, attributeKeys_Orientation0);
      ListFigure listFigure0 = new ListFigure(triangleFigure0);
      AbstractCompositeFigure abstractCompositeFigure0 = listFigure0.clone();
      assertNotSame(abstractCompositeFigure0, listFigure0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      // Undeclared exception!
      try { 
        groupFigure0.write((DOMOutput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Locator locator0 = RelativeDecoratorLocator.southEast();
      CloseHandle closeHandle0 = new CloseHandle(defaultDrawing0, locator0);
      // Undeclared exception!
      try { 
        defaultDrawing0.willChange();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.handle.LocatorHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      // Undeclared exception!
      try { 
        defaultDrawing0.restoreTransformTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DiamondFigure diamondFigure0 = new DiamondFigure(0.0, 0.0, 0.0, 0.0);
      ListFigure listFigure0 = new ListFigure(diamondFigure0);
      EllipseFigure ellipseFigure0 = new EllipseFigure();
      // Undeclared exception!
      try { 
        listFigure0.restoreAttributesTo(ellipseFigure0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jhotdraw.draw.figure.EllipseFigure cannot be cast to java.util.LinkedList
         //
         verifyException("org.jhotdraw.draw.figure.AbstractCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      // Undeclared exception!
      try { 
        groupFigure0.removeChild(640);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 640, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      // Undeclared exception!
      try { 
        defaultDrawing0.removeChild((-3817));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      // Undeclared exception!
      try { 
        listFigure0.removeAll((Collection<? extends Figure>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      // Undeclared exception!
      try { 
        groupFigure0.read((DOMInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      // Undeclared exception!
      try { 
        defaultDrawing0.getChild((-2253));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      // Undeclared exception!
      try { 
        listFigure0.get((AttributeKey<LineConnectionFigure>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.GraphicalCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      // Undeclared exception!
      try { 
        groupFigure0.contains((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.RectangularShape", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure();
      // Undeclared exception!
      try { 
        graphicalCompositeFigure0.basicRemoveChild((-419));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      // Undeclared exception!
      try { 
        listFigure0.basicAddAll((-1835), (Collection<? extends Figure>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      // Undeclared exception!
      try { 
        quadTreeDrawing0.basicAdd(0, (Figure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure();
      // Undeclared exception!
      try { 
        graphicalCompositeFigure0.addAll((Collection<? extends Figure>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      // Undeclared exception!
      try { 
        groupFigure0.addAll(0, (Collection<? extends Figure>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      // Undeclared exception!
      try { 
        listFigure0.add((Figure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure((Figure) null);
      DiamondFigure diamondFigure0 = new DiamondFigure();
      // Undeclared exception!
      try { 
        graphicalCompositeFigure0.add((-1), (Figure) diamondFigure0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Rectangle2D.Double rectangle2D_Double0 = defaultDrawing0.getBounds();
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      LinkedList<ImageFigure> linkedList0 = new LinkedList<ImageFigure>();
      ImageFigure imageFigure0 = new ImageFigure();
      linkedList0.add(imageFigure0);
      listFigure0.basicAddAll(0, linkedList0);
      listFigure0.getDrawingArea((double) 0);
      assertEquals(1, listFigure0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure();
      graphicalCompositeFigure0.fireAreaInvalidated();
      Rectangle2D.Double rectangle2D_Double0 = graphicalCompositeFigure0.getDrawingArea(0.5);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Rectangle2D.Double rectangle2D_Double0 = defaultDrawing0.getDrawingArea(0.0);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure((Figure) null);
      int int0 = graphicalCompositeFigure0.basicRemove(defaultDrawing0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      // Undeclared exception!
      try { 
        defaultDrawing0.changed();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // changed was called without a prior call to willChange. 0
         //
         verifyException("org.jhotdraw.draw.figure.AbstractFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      AbstractCompositeFigure abstractCompositeFigure0 = groupFigure0.clone();
      assertNotSame(abstractCompositeFigure0, groupFigure0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      listFigure0.layout();
      assertTrue(listFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      DiamondFigure diamondFigure0 = new DiamondFigure(0.0, (-4209.666), (-350.749), (-4209.666));
      Point2D.Double point2D_Double0 = diamondFigure0.getEndPoint();
      boolean boolean0 = defaultDrawing0.contains(point2D_Double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      Class<String> class0 = String.class;
      AttributeKey<String> attributeKey0 = new AttributeKey<String>("liner", class0, "fontBold", false);
      groupFigure0.set(attributeKey0, "liner");
      assertTrue(groupFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      FontSizeLocator fontSizeLocator0 = new FontSizeLocator();
      Point2D.Double point2D_Double0 = fontSizeLocator0.locate((Figure) defaultDrawing0);
      defaultDrawing0.setBounds(point2D_Double0, point2D_Double0);
      assertFalse(defaultDrawing0.isDebugMode());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      defaultDrawing0.transform((AffineTransform) null);
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure();
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      boolean boolean0 = graphicalCompositeFigure0.remove(defaultDrawing0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      groupFigure0.addNotify(defaultDrawing0);
      assertEquals(0, defaultDrawing0.getLayer());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      ArrayList<GroupFigure> arrayList0 = new ArrayList<GroupFigure>();
      listFigure0.addAll((-1075), (Collection<? extends Figure>) arrayList0);
      assertTrue(listFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      HashSet<TriangleFigure> hashSet0 = new HashSet<TriangleFigure>();
      TriangleFigure triangleFigure0 = new TriangleFigure((-2), 2065.059682546, (-2), (-1372.061377639));
      hashSet0.add(triangleFigure0);
      // Undeclared exception!
      try { 
        groupFigure0.addAll((-2), (Collection<? extends Figure>) hashSet0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      Rectangle2D.Double rectangle2D_Double0 = groupFigure0.getDrawingArea();
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      // Undeclared exception!
      try { 
        defaultDrawing0.basicRemoveChild(16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 16, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Layouter layouter0 = defaultDrawing0.getLayouter();
      assertNull(layouter0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      int int0 = defaultDrawing0.getChildCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      GroupFigure groupFigure0 = new GroupFigure();
      // Undeclared exception!
      try { 
        groupFigure0.basicAdd((-2791), (Figure) listFigure0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2791, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      List<Figure> list0 = listFigure0.getChildren();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      ListFigure listFigure0 = new ListFigure(groupFigure0);
      groupFigure0.fireFigureRemoved(listFigure0, 704);
      assertTrue(groupFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      CompositeFigureListener compositeFigureListener0 = mock(CompositeFigureListener.class, new ViolatedAssumptionAnswer());
      groupFigure0.addCompositeFigureListener(compositeFigureListener0);
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      groupFigure0.fireFigureAdded(quadTreeDrawing0, 5);
      assertFalse(groupFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      ListFigure listFigure0 = new ListFigure(groupFigure0);
      Stack<RoundRectangleFigure> stack0 = new Stack<RoundRectangleFigure>();
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      stack0.add(roundRectangleFigure0);
      groupFigure0.addAll((Collection<? extends Figure>) stack0);
      listFigure0.getDrawingArea();
      assertEquals(1, groupFigure0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      Stack<RoundRectangleFigure> stack0 = new Stack<RoundRectangleFigure>();
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      stack0.add(roundRectangleFigure0);
      stack0.add(roundRectangleFigure0);
      groupFigure0.addAll((Collection<? extends Figure>) stack0);
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Point2D.Double point2D_Double0 = labeledLineConnectionFigure0.getOutermostPoint();
      groupFigure0.findChild(point2D_Double0);
      assertEquals(2, groupFigure0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ImageFigure imageFigure0 = new ImageFigure();
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure((Figure) null);
      graphicalCompositeFigure0.basicAdd((Figure) imageFigure0);
      // Undeclared exception!
      try { 
        graphicalCompositeFigure0.changed();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // changed was called without a prior call to willChange. 0
         //
         verifyException("org.jhotdraw.draw.figure.AbstractFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ImageFigure imageFigure0 = new ImageFigure();
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure((Figure) null);
      graphicalCompositeFigure0.basicAdd((Figure) imageFigure0);
      LinkedList linkedList0 = (LinkedList)graphicalCompositeFigure0.getTransformRestoreData();
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure();
      LinkedList<DiamondFigure> linkedList0 = new LinkedList<DiamondFigure>();
      DiamondFigure diamondFigure0 = new DiamondFigure(0.1, 0.1, (-2677.080311), 1563.539458771572);
      linkedList0.add(diamondFigure0);
      graphicalCompositeFigure0.addAll((Collection<? extends Figure>) linkedList0);
      // Undeclared exception!
      try { 
        graphicalCompositeFigure0.restoreTransformTo(linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jhotdraw.draw.figure.DiamondFigure cannot be cast to java.awt.geom.Rectangle2D$Double
         //
         verifyException("org.jhotdraw.draw.figure.DiamondFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure();
      Object object0 = graphicalCompositeFigure0.getTransformRestoreData();
      graphicalCompositeFigure0.restoreTransformTo(object0);
      assertTrue(graphicalCompositeFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      JavaPrimitivesDOMFactory javaPrimitivesDOMFactory0 = new JavaPrimitivesDOMFactory();
      JavaxDOMOutput javaxDOMOutput0 = new JavaxDOMOutput(javaPrimitivesDOMFactory0);
      // Undeclared exception!
      try { 
        listFigure0.write(javaxDOMOutput0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class #document does not exist
         //
         verifyException("org.jhotdraw.xml.JavaPrimitivesDOMFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      Dimension2DDouble dimension2DDouble0 = listFigure0.getPreferredSize();
      assertEquals(0.0, dimension2DDouble0.width, 0.01);
      assertEquals(0.0, dimension2DDouble0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure();
      Dimension2DDouble dimension2DDouble0 = graphicalCompositeFigure0.getPreferredSize();
      assertEquals(0.0, dimension2DDouble0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ImageFigure imageFigure0 = new ImageFigure();
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure((Figure) null);
      graphicalCompositeFigure0.basicAdd((Figure) imageFigure0);
      graphicalCompositeFigure0.layout();
      assertTrue(graphicalCompositeFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure((Figure) null);
      DiamondFigure diamondFigure0 = new DiamondFigure();
      Point2D.Double point2D_Double0 = diamondFigure0.getStartPoint();
      int int0 = graphicalCompositeFigure0.findChildIndex(point2D_Double0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      LabelFigure labelFigure0 = new LabelFigure();
      Point2D.Double point2D_Double0 = labelFigure0.origin;
      Figure figure0 = listFigure0.findFigureInside(point2D_Double0);
      assertNull(figure0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      boolean boolean0 = defaultDrawing0.contains((Figure) labeledLineConnectionFigure0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      LinkedList linkedList0 = (LinkedList)groupFigure0.getAttributesRestoreData();
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      List<Figure> list0 = defaultDrawing0.getChildrenFrontToBack();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure(defaultDrawing0);
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Rectangle2D.Double rectangle2D_Double0 = labeledLineConnectionFigure0.getDrawingArea(1207.03);
      graphicalCompositeFigure0.setBounds(rectangle2D_Double0);
      assertTrue(graphicalCompositeFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      TextFigure textFigure0 = new TextFigure();
      listFigure0.basicAdd((Figure) textFigure0);
      // Undeclared exception!
      try { 
        listFigure0.transform((AffineTransform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TextFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure(defaultDrawing0);
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      graphicalCompositeFigure0.bringToFront(labeledLineConnectionFigure0);
      assertEquals(0, graphicalCompositeFigure0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      DiamondFigure diamondFigure0 = new DiamondFigure();
      groupFigure0.sendToBack(diamondFigure0);
      assertEquals(0, groupFigure0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      PriorityQueue<ListFigure> priorityQueue0 = new PriorityQueue<ListFigure>();
      ListFigure listFigure0 = new ListFigure();
      priorityQueue0.add(listFigure0);
      defaultDrawing0.basicRemoveAll(priorityQueue0);
      assertTrue(defaultDrawing0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      groupFigure0.basicRemoveAllChildren();
      assertEquals(0, groupFigure0.getLayer());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      LinkedHashSet<ListFigure> linkedHashSet0 = new LinkedHashSet<ListFigure>();
      ListFigure listFigure0 = new ListFigure();
      linkedHashSet0.add(listFigure0);
      groupFigure0.removeAll(linkedHashSet0);
      assertFalse(groupFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure(defaultDrawing0);
      graphicalCompositeFigure0.removeNotify(defaultDrawing0);
      assertEquals(0, graphicalCompositeFigure0.getLayer());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      LinkedList<TriangleFigure> linkedList0 = new LinkedList<TriangleFigure>();
      TriangleFigure triangleFigure0 = new TriangleFigure();
      linkedList0.addFirst(triangleFigure0);
      // Undeclared exception!
      try { 
        defaultDrawing0.basicAddAll(2235, linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2235, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      groupFigure0.add(0, (Figure) labeledLineConnectionFigure0);
      boolean boolean0 = groupFigure0.contains((Figure) labeledLineConnectionFigure0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Collection<Handle> collection0 = defaultDrawing0.createHandles(0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Collection<Handle> collection0 = defaultDrawing0.createHandles(1);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      DiamondFigure diamondFigure0 = new DiamondFigure();
      AbstractCompositeFigure.EventHandler abstractCompositeFigure_EventHandler0 = listFigure0.new EventHandler();
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(427.4144, 795.5844828283646, 1812, 795.5844828283646, attributeKeys_Orientation0);
      TextFigure textFigure0 = new TextFigure("1%W^#H_98H");
      FontSizeHandle fontSizeHandle0 = new FontSizeHandle(textFigure0, (Locator) null);
      FigureEvent figureEvent0 = new FigureEvent(triangleFigure0, diamondFigure0.IS_QUADRATIC, attributeKeys_Orientation0, fontSizeHandle0);
      // Undeclared exception!
      try { 
        abstractCompositeFigure_EventHandler0.figureChanged(figureEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Rectangle2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      AbstractCompositeFigure.EventHandler abstractCompositeFigure_EventHandler0 = defaultDrawing0.new EventHandler();
      Class<OrientationHandle> class0 = OrientationHandle.class;
      TriangleFigure triangleFigure0 = new TriangleFigure();
      OrientationHandle orientationHandle0 = new OrientationHandle(triangleFigure0);
      AttributeKey<OrientationHandle> attributeKey0 = new AttributeKey<OrientationHandle>((String) null, class0, orientationHandle0, true);
      FigureEvent figureEvent0 = new FigureEvent(defaultDrawing0, attributeKey0, orientationHandle0, defaultDrawing0);
      abstractCompositeFigure_EventHandler0.attributeChanged(figureEvent0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      AbstractCompositeFigure.EventHandler abstractCompositeFigure_EventHandler0 = groupFigure0.createEventHandler();
      Class<GroupFigure> class0 = GroupFigure.class;
      AttributeKey<GroupFigure> attributeKey0 = new AttributeKey<GroupFigure>("$uG'U*<@7\"dC`", class0, groupFigure0, true);
      FigureEvent figureEvent0 = new FigureEvent(groupFigure0, attributeKey0, class0, class0);
      abstractCompositeFigure_EventHandler0.figureRemoved(figureEvent0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      AbstractCompositeFigure.EventHandler abstractCompositeFigure_EventHandler0 = groupFigure0.new EventHandler();
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Rectangle2D.Double rectangle2D_Double0 = labeledLineConnectionFigure0.getDrawingArea(0.0);
      FigureEvent figureEvent0 = new FigureEvent(groupFigure0, rectangle2D_Double0);
      abstractCompositeFigure_EventHandler0.figureRequestRemove(figureEvent0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      AbstractCompositeFigure.EventHandler abstractCompositeFigure_EventHandler0 = quadTreeDrawing0.new EventHandler();
      UndoableEditEvent undoableEditEvent0 = new UndoableEditEvent(quadTreeDrawing0, (UndoableEdit) null);
      abstractCompositeFigure_EventHandler0.undoableEditHappened(undoableEditEvent0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      // Undeclared exception!
      try { 
        quadTreeDrawing0.getChild(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      Collection<Figure> collection0 = quadTreeDrawing0.getDecomposition();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure(defaultDrawing0);
      CompositeFigureListener compositeFigureListener0 = mock(CompositeFigureListener.class, new ViolatedAssumptionAnswer());
      graphicalCompositeFigure0.removeCompositeFigureListener(compositeFigureListener0);
      assertTrue(graphicalCompositeFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      groupFigure0.basicAdd((Figure) lineConnectionFigure0);
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      groupFigure0.removeNotify(quadTreeDrawing0);
      assertEquals(0, groupFigure0.getLayer());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      AbstractDrawing abstractDrawing0 = defaultDrawing0.clone();
      abstractDrawing0.add((Figure) defaultDrawing0);
      abstractDrawing0.willChange();
      assertNotSame(defaultDrawing0, abstractDrawing0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure();
      int int0 = graphicalCompositeFigure0.indexOf((Figure) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      Map<AttributeKey<?>, Object> map0 = groupFigure0.getAttributes();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      ListFigure listFigure0 = new ListFigure(groupFigure0);
      listFigure0.removeAllChildren();
      assertTrue(listFigure0.isConnectable());
  }
}
