/*
 * This file was automatically generated by EvoSuite
 * Sat May 29 14:04:13 GMT 2021
 */

package org.jhotdraw.draw.figure;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import java.time.format.ResolverStyle;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.jhotdraw.draw.AttributeKey;
import org.jhotdraw.draw.AttributeKeys;
import org.jhotdraw.draw.figure.AbstractAttributedFigure;
import org.jhotdraw.draw.figure.BezierFigure;
import org.jhotdraw.draw.figure.DiamondFigure;
import org.jhotdraw.draw.figure.EllipseFigure;
import org.jhotdraw.draw.figure.LabelFigure;
import org.jhotdraw.draw.figure.LabeledLineConnectionFigure;
import org.jhotdraw.draw.figure.LineConnectionFigure;
import org.jhotdraw.draw.figure.LineFigure;
import org.jhotdraw.draw.figure.RectangleFigure;
import org.jhotdraw.draw.figure.RoundRectangleFigure;
import org.jhotdraw.draw.figure.TextAreaFigure;
import org.jhotdraw.draw.figure.TextFigure;
import org.jhotdraw.draw.figure.TriangleFigure;
import org.jhotdraw.xml.DOMInput;
import org.jhotdraw.xml.DOMOutput;
import org.jhotdraw.xml.DefaultDOMFactory;
import org.jhotdraw.xml.JavaPrimitivesDOMFactory;
import org.jhotdraw.xml.JavaxDOMOutput;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractAttributedFigure_ESTest extends AbstractAttributedFigure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.restoreAttributesTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractAttributedFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Rectangle2D.Double rectangle2D_Double0 = labeledLineConnectionFigure0.getDrawingArea(10.0);
      assertEquals((-2.5), rectangle2D_Double0.x, 0.01);
      assertEquals((-2.5), rectangle2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure("F|;YV:RgYaZn$C!,8Hv");
      Rectangle2D.Double rectangle2D_Double0 = labelFigure0.getDrawingArea();
      assertEquals((-2.0), rectangle2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure(0.0, (-2195.0), (-2195.0), (-2195.0));
      Rectangle2D.Double rectangle2D_Double0 = roundRectangleFigure0.getDrawingArea();
      assertEquals((-2192.0), rectangle2D_Double0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure();
      Map<AttributeKey<?>, Object> map0 = ellipseFigure0.getAttributes();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RectangleFigure rectangleFigure0 = new RectangleFigure((-1170.451686), 0.0, (-1170.451686), 0.0);
      AbstractAttributedFigure abstractAttributedFigure0 = rectangleFigure0.clone();
      assertNotSame(abstractAttributedFigure0, rectangleFigure0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LineFigure lineFigure0 = new LineFigure();
      AbstractAttributedFigure abstractAttributedFigure0 = lineFigure0.clone();
      assertNotSame(abstractAttributedFigure0, lineFigure0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      // Undeclared exception!
      try { 
        lineConnectionFigure0.writeAttributes((DOMOutput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractAttributedFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BezierFigure bezierFigure0 = new BezierFigure();
      JavaPrimitivesDOMFactory javaPrimitivesDOMFactory0 = new JavaPrimitivesDOMFactory();
      JavaxDOMOutput javaxDOMOutput0 = new JavaxDOMOutput(javaPrimitivesDOMFactory0);
      // Undeclared exception!
      try { 
        bezierFigure0.writeAttributes(javaxDOMOutput0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class #document does not exist
         //
         verifyException("org.jhotdraw.xml.JavaPrimitivesDOMFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      Class<BezierFigure> class0 = BezierFigure.class;
      AttributeKey<BezierFigure> attributeKey0 = new AttributeKey<BezierFigure>("liner", class0);
      textAreaFigure0.set(attributeKey0, (BezierFigure) lineConnectionFigure0);
      assertEquals(8, textAreaFigure0.getTabSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure(1.0E-4, 10.0, 229.0498906, 0);
      Class<Byte> class0 = Byte.class;
      Byte byte0 = new Byte((byte)49);
      AttributeKey<Byte> attributeKey0 = new AttributeKey<Byte>("liner", class0, byte0);
      boolean boolean0 = roundRectangleFigure0.isAttributeEnabled(attributeKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BezierFigure bezierFigure0 = new BezierFigure();
      Map<AttributeKey<?>, Object> map0 = bezierFigure0.getAttributes();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Class<ResolverStyle> class0 = ResolverStyle.class;
      ResolverStyle resolverStyle0 = ResolverStyle.STRICT;
      AttributeKey<ResolverStyle> attributeKey0 = new AttributeKey<ResolverStyle>("liner", class0, resolverStyle0);
      ResolverStyle resolverStyle1 = labeledLineConnectionFigure0.get(attributeKey0);
      assertSame(resolverStyle1, resolverStyle0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure(10.0, 2.0, 2.0, 0.0);
      DefaultDOMFactory defaultDOMFactory0 = new DefaultDOMFactory();
      JavaxDOMOutput javaxDOMOutput0 = new JavaxDOMOutput(defaultDOMFactory0);
      // Undeclared exception!
      try { 
        ellipseFigure0.write(javaxDOMOutput0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.sun.org.apache.xerces.internal.dom.DocumentImpl cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.jhotdraw.xml.JavaxDOMOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure();
      Class<TextAreaFigure> class0 = TextAreaFigure.class;
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      AttributeKey<TextAreaFigure> attributeKey0 = new AttributeKey<TextAreaFigure>("_;", class0, textAreaFigure0, false);
      textFigure0.removeAttribute(attributeKey0);
      assertTrue(textFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RectangleFigure rectangleFigure0 = new RectangleFigure((-1878.00296570177), (-1878.00296570177), (-1878.00296570177), 0.0);
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      lineConnectionFigure0.applyAttributesTo(rectangleFigure0);
      assertEquals(3.0, lineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      double double0 = triangleFigure0.getStrokeMiterLimitFactor();
      assertEquals(3.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Class<BezierFigure> class0 = BezierFigure.class;
      AttributeKey<BezierFigure> attributeKey0 = new AttributeKey<BezierFigure>("", class0, labeledLineConnectionFigure0);
      attributeKey0.setClone(labeledLineConnectionFigure0, labeledLineConnectionFigure0);
      labeledLineConnectionFigure0.removeAttribute(attributeKey0);
      assertFalse(labeledLineConnectionFigure0.isClosed());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DiamondFigure diamondFigure0 = new DiamondFigure();
      diamondFigure0.setAttributeEnabled(diamondFigure0.IS_QUADRATIC, false);
      assertTrue(diamondFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DiamondFigure diamondFigure0 = new DiamondFigure();
      diamondFigure0.setAttributeEnabled(diamondFigure0.IS_QUADRATIC, true);
      assertTrue(diamondFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      Rectangle2D.Double rectangle2D_Double0 = lineConnectionFigure0.getDrawingArea();
      assertEquals((-2.5), rectangle2D_Double0.y, 0.01);
      assertEquals(5.0, rectangle2D_Double0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure("w");
      AttributeKey<?> attributeKey0 = labelFigure0.getAttributeKey("w");
      assertNull(attributeKey0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DiamondFigure diamondFigure0 = new DiamondFigure(2.0, 1996.6191110895604, (-1.0), (-1.0));
      diamondFigure0.drawText((Graphics2D) null);
      assertEquals(3.0, diamondFigure0.getStrokeMiterLimitFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure(1.0, 1.0, 3315.290851504842, 1.0);
      // Undeclared exception!
      try { 
        roundRectangleFigure0.read((DOMInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractAttributedFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure((String) null);
      HashMap hashMap0 = (HashMap)textAreaFigure0.getAttributesRestoreData();
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BezierFigure bezierFigure0 = new BezierFigure(false);
      DefaultDOMFactory defaultDOMFactory0 = new DefaultDOMFactory();
      // Undeclared exception!
      try { 
        bezierFigure0.restoreAttributesTo(defaultDOMFactory0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jhotdraw.xml.DefaultDOMFactory cannot be cast to java.util.HashMap
         //
         verifyException("org.jhotdraw.draw.figure.AbstractAttributedFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure(0.0, 0.8999999761581421, 255.0, 0.8999999761581421);
      Class<TextFigure> class0 = TextFigure.class;
      AttributeKey<TextFigure> attributeKey0 = new AttributeKey<TextFigure>(";C>x].u", class0);
      boolean boolean0 = ellipseFigure0.hasAttribute(attributeKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure((-3486.696307565), (-3486.696307565), 0.0, 1120.715037423859);
      Rectangle2D.Double rectangle2D_Double0 = ellipseFigure0.getDrawingArea((-2244.5));
      assertEquals(5.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-3489.196307565), rectangle2D_Double0.y, 0.01);
  }
}
