/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 01 05:54:00 GMT 2021
 */

package org.jhotdraw.draw.figure;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jhotdraw.draw.AttributeKey;
import org.jhotdraw.draw.figure.AbstractAttributedFigure;
import org.jhotdraw.draw.figure.DiamondFigure;
import org.jhotdraw.draw.figure.EllipseFigure;
import org.jhotdraw.draw.figure.Figure;
import org.jhotdraw.draw.figure.ImageFigure;
import org.jhotdraw.draw.figure.LabelFigure;
import org.jhotdraw.draw.figure.LabeledLineConnectionFigure;
import org.jhotdraw.draw.figure.LineConnectionFigure;
import org.jhotdraw.draw.figure.RectangleFigure;
import org.jhotdraw.draw.figure.RoundRectangleFigure;
import org.jhotdraw.draw.figure.TextAreaFigure;
import org.jhotdraw.draw.figure.TextFigure;
import org.jhotdraw.draw.figure.TriangleFigure;
import org.jhotdraw.geom.Dimension2DDouble;
import org.jhotdraw.xml.DOMFactory;
import org.jhotdraw.xml.DOMInput;
import org.jhotdraw.xml.DOMOutput;
import org.jhotdraw.xml.JavaPrimitivesDOMFactory;
import org.jhotdraw.xml.JavaxDOMOutput;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractAttributedFigure_ESTest extends AbstractAttributedFigure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DiamondFigure diamondFigure0 = new DiamondFigure();
      Rectangle2D.Double rectangle2D_Double0 = diamondFigure0.getDrawingArea(0.0);
      assertEquals((-2.5), rectangle2D_Double0.y, 0.01);
      assertEquals(5.0, rectangle2D_Double0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      AffineTransform affineTransform0 = new AffineTransform(0.0F, (-764.8F), 0.0F, 0.0F, 0.0F, 1.0F);
      triangleFigure0.transform(affineTransform0);
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getDrawingArea();
      assertEquals(3.5999999999999996, rectangle2D_Double0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure("O0y6*U{U'H!8N");
      HashMap hashMap0 = (HashMap)labelFigure0.getAttributesRestoreData();
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure();
      Map<AttributeKey<?>, Object> map0 = ellipseFigure0.getAttributes();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Map<AttributeKey<?>, Object> map0 = labeledLineConnectionFigure0.getAttributes();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      AbstractAttributedFigure abstractAttributedFigure0 = lineConnectionFigure0.clone();
      assertNotSame(abstractAttributedFigure0, lineConnectionFigure0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure();
      JavaxDOMOutput javaxDOMOutput0 = new JavaxDOMOutput((DOMFactory) null);
      // Undeclared exception!
      try { 
        textFigure0.writeAttributes(javaxDOMOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.xml.JavaxDOMOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure();
      JavaPrimitivesDOMFactory javaPrimitivesDOMFactory0 = new JavaPrimitivesDOMFactory();
      JavaxDOMOutput javaxDOMOutput0 = new JavaxDOMOutput(javaPrimitivesDOMFactory0);
      // Undeclared exception!
      try { 
        textFigure0.writeAttributes(javaxDOMOutput0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class #document does not exist
         //
         verifyException("org.jhotdraw.xml.JavaPrimitivesDOMFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure();
      // Undeclared exception!
      try { 
        textFigure0.write((DOMOutput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TextFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      // Undeclared exception!
      try { 
        lineConnectionFigure0.restoreAttributesTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractAttributedFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure("");
      Class<DiamondFigure> class0 = DiamondFigure.class;
      DiamondFigure diamondFigure0 = new DiamondFigure(1149.9147655076672, 86.652, 1.0, 1149.9147655076672);
      AttributeKey<DiamondFigure> attributeKey0 = new AttributeKey<DiamondFigure>((String) null, class0, diamondFigure0, false);
      // Undeclared exception!
      try { 
        labelFigure0.removeAttribute(attributeKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ImageFigure imageFigure0 = new ImageFigure(0.0, 0.0, 0.0, 0.0);
      // Undeclared exception!
      try { 
        imageFigure0.readAttributes((DOMInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractAttributedFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure("W");
      Class<TextAreaFigure> class0 = TextAreaFigure.class;
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      AttributeKey<TextAreaFigure> attributeKey0 = new AttributeKey<TextAreaFigure>("W", class0, textAreaFigure0);
      labelFigure0.set(attributeKey0, textAreaFigure0);
      assertEquals(4, textAreaFigure0.getTextColumns());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure("Grcd8gNU_\"-Gc:=<f");
      Class<Dimension2DDouble> class0 = Dimension2DDouble.class;
      Dimension2DDouble dimension2DDouble0 = new Dimension2DDouble();
      AttributeKey<Dimension2DDouble> attributeKey0 = new AttributeKey<Dimension2DDouble>("}AJ4", class0, dimension2DDouble0, false);
      boolean boolean0 = labelFigure0.isAttributeEnabled(attributeKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      Class<TextAreaFigure> class0 = TextAreaFigure.class;
      AttributeKey<TextAreaFigure> attributeKey0 = new AttributeKey<TextAreaFigure>("CTT*", class0);
      boolean boolean0 = lineConnectionFigure0.hasAttribute(attributeKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Class<DiamondFigure> class0 = DiamondFigure.class;
      AttributeKey<DiamondFigure> attributeKey0 = new AttributeKey<DiamondFigure>("liner", class0);
      DiamondFigure diamondFigure0 = new DiamondFigure();
      attributeKey0.setUndoable(labeledLineConnectionFigure0, diamondFigure0);
      labeledLineConnectionFigure0.removeAttribute(attributeKey0);
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.applyAttributesTo((Figure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractAttributedFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      double double0 = triangleFigure0.getStrokeMiterLimitFactor();
      assertEquals(3.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RectangleFigure rectangleFigure0 = new RectangleFigure(0.0, 0.0, 0.0, 0.0);
      // Undeclared exception!
      try { 
        rectangleFigure0.draw((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractAttributedFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ImageFigure imageFigure0 = new ImageFigure();
      DiamondFigure diamondFigure0 = new DiamondFigure(1259.543, 1259.543, 2749.200051945681, 0.0);
      imageFigure0.setAttributeEnabled(diamondFigure0.IS_QUADRATIC, true);
      assertEquals(0, imageFigure0.getLayer());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DiamondFigure diamondFigure0 = new DiamondFigure((-6.4912539), 47.905680038142, 47.905680038142, (-1.0));
      LabelFigure labelFigure0 = new LabelFigure("");
      labelFigure0.setAttributeEnabled(diamondFigure0.IS_QUADRATIC, false);
      assertEquals(3.0, labelFigure0.getStrokeMiterLimitFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Rectangle2D.Double rectangle2D_Double0 = labeledLineConnectionFigure0.getDrawingArea();
      assertEquals((-2.5), rectangle2D_Double0.y, 0.01);
      assertEquals((-2.5), rectangle2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      AttributeKey<?> attributeKey0 = textAreaFigure0.getAttributeKey("");
      assertNull(attributeKey0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        roundRectangleFigure0.restoreAttributesTo(labeledLineConnectionFigure0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jhotdraw.draw.figure.LabeledLineConnectionFigure cannot be cast to java.util.HashMap
         //
         verifyException("org.jhotdraw.draw.figure.AbstractAttributedFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      LabelFigure labelFigure0 = new LabelFigure();
      Class<LabeledLineConnectionFigure> class0 = LabeledLineConnectionFigure.class;
      AttributeKey<LabeledLineConnectionFigure> attributeKey0 = new AttributeKey<LabeledLineConnectionFigure>("cm:YG[3%}fJ5A", class0, labeledLineConnectionFigure0);
      labelFigure0.removeAttribute(attributeKey0);
      assertEquals(3.0, labelFigure0.getStrokeMiterLimitFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RectangleFigure rectangleFigure0 = new RectangleFigure();
      JavaPrimitivesDOMFactory javaPrimitivesDOMFactory0 = new JavaPrimitivesDOMFactory();
      JavaxDOMOutput javaxDOMOutput0 = new JavaxDOMOutput(javaPrimitivesDOMFactory0);
      // Undeclared exception!
      try { 
        rectangleFigure0.write(javaxDOMOutput0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.sun.org.apache.xerces.internal.dom.DocumentImpl cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.jhotdraw.xml.JavaxDOMOutput", e);
      }
  }
}
