/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 01 05:26:13 GMT 2021
 */

package org.jhotdraw.draw.figure;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.Hashtable;
import java.util.List;
import javax.swing.Box;
import javax.swing.plaf.basic.BasicSplitPaneUI;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jhotdraw.draw.AttributeKey;
import org.jhotdraw.draw.DefaultDrawing;
import org.jhotdraw.draw.Drawing;
import org.jhotdraw.draw.QuadTreeDrawing;
import org.jhotdraw.draw.event.CompositeFigureListener;
import org.jhotdraw.draw.figure.DiamondFigure;
import org.jhotdraw.draw.figure.Figure;
import org.jhotdraw.draw.figure.GroupFigure;
import org.jhotdraw.draw.figure.ImageFigure;
import org.jhotdraw.draw.figure.LabeledLineConnectionFigure;
import org.jhotdraw.draw.figure.LineFigure;
import org.jhotdraw.draw.figure.ListFigure;
import org.jhotdraw.draw.figure.RectangleFigure;
import org.jhotdraw.draw.figure.TriangleFigure;
import org.jhotdraw.draw.handle.BezierControlPointHandle;
import org.jhotdraw.draw.handle.CloseHandle;
import org.jhotdraw.draw.io.ImageOutputFormat;
import org.jhotdraw.draw.layouter.HorizontalLayouter;
import org.jhotdraw.draw.layouter.Layouter;
import org.jhotdraw.draw.locator.FontSizeLocator;
import org.jhotdraw.draw.locator.RelativeDecoratorLocator;
import org.jhotdraw.geom.BezierPath;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LabeledLineConnectionFigure_ESTest extends LabeledLineConnectionFigure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      CompositeFigureListener compositeFigureListener0 = mock(CompositeFigureListener.class, new ViolatedAssumptionAnswer());
      labeledLineConnectionFigure0.addCompositeFigureListener(compositeFigureListener0);
      labeledLineConnectionFigure0.fireFigureRemoved(labeledLineConnectionFigure0, 12);
      assertTrue(labeledLineConnectionFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      GroupFigure groupFigure0 = new GroupFigure();
      labeledLineConnectionFigure0.basicAdd((Figure) groupFigure0);
      int int0 = labeledLineConnectionFigure0.indexOf(groupFigure0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      ImageFigure imageFigure0 = new ImageFigure();
      boolean boolean0 = labeledLineConnectionFigure0.add((Figure) imageFigure0);
      assertTrue(boolean0);
      
      List<Figure> list0 = labeledLineConnectionFigure0.getChildrenFrontToBack();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.createHandles(0);
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.updateConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.handle.AbstractConnectionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Class<DefaultTableModel> class0 = DefaultTableModel.class;
      AttributeKey<DefaultTableModel> attributeKey0 = new AttributeKey<DefaultTableModel>((String) null, class0);
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.set(attributeKey0, (DefaultTableModel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.removeChild(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.removeChild((-2387));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Hashtable<Figure, Figure> hashtable0 = new Hashtable<Figure, Figure>();
      CloseHandle closeHandle0 = new CloseHandle(labeledLineConnectionFigure0);
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.remap(hashtable0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.handle.LocatorHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      BezierControlPointHandle bezierControlPointHandle0 = new BezierControlPointHandle(labeledLineConnectionFigure0, 0, 538);
      Hashtable<Figure, Figure> hashtable0 = new Hashtable<Figure, Figure>();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.remap(hashtable0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 538
         //
         verifyException("org.jhotdraw.geom.BezierPath$Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.getChild((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.findFigureInside((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.RectangularShape", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.draw((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractAttributedFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.contains((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.RectangularShape", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.basicRemoveChild(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.basicAdd((Figure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.LabeledLineConnectionFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.basicAdd((-3430), (Figure) labeledLineConnectionFigure0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3430, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.add((Figure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.LabeledLineConnectionFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.add(0, (Figure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.LabeledLineConnectionFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.add(1, (Figure) labeledLineConnectionFigure0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.layout();
      assertTrue(labeledLineConnectionFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      List<Figure> list0 = labeledLineConnectionFigure0.getChildrenFrontToBack();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.add((Figure) labeledLineConnectionFigure0);
      Rectangle2D.Double rectangle2D_Double0 = labeledLineConnectionFigure0.getDrawingArea();
      assertEquals((-2.5), rectangle2D_Double0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.updateConnection();
      Rectangle2D.Double rectangle2D_Double0 = labeledLineConnectionFigure0.getDrawingArea();
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.invalidate();
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Layouter layouter0 = labeledLineConnectionFigure0.getLayouter();
      assertNull(layouter0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.validate();
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.basicAdd((Figure) labeledLineConnectionFigure0);
      boolean boolean0 = labeledLineConnectionFigure0.contains((Figure) labeledLineConnectionFigure0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      ImageFigure imageFigure0 = new ImageFigure((-1), (-524.8), (-1.0), (-524.8));
      boolean boolean0 = labeledLineConnectionFigure0.contains((Figure) imageFigure0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      labeledLineConnectionFigure1.basicAdd((Figure) labeledLineConnectionFigure0);
      Hashtable<Figure, Figure> hashtable0 = new Hashtable<Figure, Figure>();
      labeledLineConnectionFigure1.remap(hashtable0, false);
      assertEquals(1, labeledLineConnectionFigure1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      labeledLineConnectionFigure1.add((Figure) labeledLineConnectionFigure0);
      labeledLineConnectionFigure1.clone();
      assertEquals(1, labeledLineConnectionFigure1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      ListFigure listFigure0 = new ListFigure(labeledLineConnectionFigure0);
      labeledLineConnectionFigure0.fireFigureAdded(listFigure0, 219);
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      labeledLineConnectionFigure0.removeNotify(quadTreeDrawing0);
      assertFalse(labeledLineConnectionFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      labeledLineConnectionFigure0.basicAdd((Figure) quadTreeDrawing0);
      labeledLineConnectionFigure0.addNotify(quadTreeDrawing0);
      assertEquals(0, quadTreeDrawing0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      HorizontalLayouter horizontalLayouter0 = new HorizontalLayouter();
      labeledLineConnectionFigure0.setLayouter(horizontalLayouter0);
      labeledLineConnectionFigure0.updateConnection();
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.basicRemoveAllChildren();
      assertFalse(labeledLineConnectionFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      labeledLineConnectionFigure0.basicAdd((Figure) labeledLineConnectionFigure1);
      labeledLineConnectionFigure0.removeAllChildren();
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.basicAdd((Figure) labeledLineConnectionFigure0);
      int int0 = labeledLineConnectionFigure0.basicRemove(labeledLineConnectionFigure0);
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      int int0 = labeledLineConnectionFigure0.basicRemove(labeledLineConnectionFigure0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      boolean boolean0 = labeledLineConnectionFigure0.remove(labeledLineConnectionFigure0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      labeledLineConnectionFigure1.addNotify(quadTreeDrawing0);
      labeledLineConnectionFigure1.add(0, (Figure) labeledLineConnectionFigure0);
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.add(0, (Figure) labeledLineConnectionFigure0);
      assertFalse(labeledLineConnectionFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      TriangleFigure triangleFigure0 = new TriangleFigure();
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      Point2D.Double point2D_Double0 = bezierPath0.getPointOnPath(355.7453606426151, 355.7453606426151);
      RectangleFigure rectangleFigure0 = new RectangleFigure();
      labeledLineConnectionFigure0.basicAdd(0, (Figure) rectangleFigure0);
      Figure figure0 = labeledLineConnectionFigure0.findFigureInside(point2D_Double0);
      assertTrue(figure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      RectangleFigure rectangleFigure0 = new RectangleFigure((-2108.063504208), 0.0, (-2108.063504208), 2556.9157031);
      labeledLineConnectionFigure0.basicAdd((Figure) rectangleFigure0);
      Point2D.Double point2D_Double0 = labeledLineConnectionFigure0.getStartPoint();
      Figure figure0 = labeledLineConnectionFigure0.findFigureInside(point2D_Double0);
      assertNull(figure0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      RectangleFigure rectangleFigure0 = new RectangleFigure();
      Point2D.Double point2D_Double0 = labeledLineConnectionFigure0.getStartPoint();
      FontSizeLocator fontSizeLocator0 = new FontSizeLocator();
      Point2D.Double point2D_Double1 = fontSizeLocator0.locate((Figure) rectangleFigure0, (Figure) labeledLineConnectionFigure0);
      point2D_Double0.setLocation((Point2D) point2D_Double1);
      Figure figure0 = labeledLineConnectionFigure0.findFigureInside(point2D_Double0);
      assertNull(figure0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      BezierPath bezierPath0 = labeledLineConnectionFigure1.getBezierPath();
      labeledLineConnectionFigure1.add((Figure) labeledLineConnectionFigure0);
      labeledLineConnectionFigure1.setBezierPath(bezierPath0);
      assertFalse(bezierPath0.isClosed());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Class<LineFigure> class0 = LineFigure.class;
      AttributeKey<LineFigure> attributeKey0 = new AttributeKey<LineFigure>("org.jhotdraw.draw.figure.LabeledLineConnectionFigure$ChildHandler", class0);
      labeledLineConnectionFigure0.set(attributeKey0, (LineFigure) labeledLineConnectionFigure0);
      assertTrue(labeledLineConnectionFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      RelativeDecoratorLocator relativeDecoratorLocator0 = new RelativeDecoratorLocator(0, 2283.1258, false);
      Point2D.Double point2D_Double0 = relativeDecoratorLocator0.locate((Figure) labeledLineConnectionFigure0);
      boolean boolean0 = labeledLineConnectionFigure0.contains(point2D_Double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Point2D.Double point2D_Double0 = labeledLineConnectionFigure0.getEndPoint();
      point2D_Double0.setLocation(1.575, 216.7675503);
      boolean boolean0 = labeledLineConnectionFigure0.contains(point2D_Double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      DiamondFigure diamondFigure0 = new DiamondFigure(0.0, 0.8999999761581421, 813.3394301046029, 3328.89707);
      labeledLineConnectionFigure0.add((Figure) diamondFigure0);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((-1982.382976), 0.8999999761581421);
      labeledLineConnectionFigure0.transform(affineTransform0);
      assertTrue(labeledLineConnectionFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat();
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      List<Figure> list0 = defaultDrawing0.getFiguresFrontToBack();
      double[] doubleArray0 = new double[8];
      AffineTransform affineTransform0 = new AffineTransform(doubleArray0);
      BasicSplitPaneUI basicSplitPaneUI0 = new BasicSplitPaneUI();
      Box box0 = Box.createHorizontalBox();
      Dimension dimension0 = basicSplitPaneUI0.getMaximumSize(box0);
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) quadTreeDrawing0, list0, affineTransform0, dimension0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      labeledLineConnectionFigure0.draw(graphics2D0);
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.fireFigureRemoved(labeledLineConnectionFigure0, 0);
      assertFalse(labeledLineConnectionFigure0.isClosed());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      CompositeFigureListener compositeFigureListener0 = mock(CompositeFigureListener.class, new ViolatedAssumptionAnswer());
      labeledLineConnectionFigure0.removeCompositeFigureListener(compositeFigureListener0);
      assertTrue(labeledLineConnectionFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.getChild(32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 32, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      List<Figure> list0 = labeledLineConnectionFigure0.getChildren();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      labeledLineConnectionFigure1.basicAdd((Figure) labeledLineConnectionFigure0);
      boolean boolean0 = labeledLineConnectionFigure1.remove(labeledLineConnectionFigure0);
      assertEquals(0, labeledLineConnectionFigure1.getChildCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      int int0 = labeledLineConnectionFigure0.getChildCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.basicRemoveChild((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.fireFigureAdded((Figure) null, 0);
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      int int0 = labeledLineConnectionFigure0.indexOf(labeledLineConnectionFigure0);
      assertEquals((-1), int0);
  }
}
