/*
 * This file was automatically generated by EvoSuite
 * Sat May 29 13:44:47 GMT 2021
 */

package org.jhotdraw.draw.figure;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.Hashtable;
import java.util.List;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jhotdraw.draw.AttributeKey;
import org.jhotdraw.draw.AttributeKeys;
import org.jhotdraw.draw.DefaultDrawing;
import org.jhotdraw.draw.Drawing;
import org.jhotdraw.draw.QuadTreeDrawing;
import org.jhotdraw.draw.event.CompositeFigureListener;
import org.jhotdraw.draw.figure.DiamondFigure;
import org.jhotdraw.draw.figure.Figure;
import org.jhotdraw.draw.figure.LabeledLineConnectionFigure;
import org.jhotdraw.draw.figure.TriangleFigure;
import org.jhotdraw.draw.io.ImageOutputFormat;
import org.jhotdraw.draw.layouter.Layouter;
import org.jhotdraw.draw.locator.BezierLabelLocator;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LabeledLineConnectionFigure_ESTest extends LabeledLineConnectionFigure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      DiamondFigure diamondFigure0 = new DiamondFigure();
      labeledLineConnectionFigure0.add(0, (Figure) diamondFigure0);
      int int0 = labeledLineConnectionFigure0.indexOf(diamondFigure0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((-1828.31276), (-612.7086), (-1828.31276), (-612.7086));
      affineTransform0.setToRotation((-612.7086), 3.14, 551.5838736829, (-1.0));
      labeledLineConnectionFigure0.transform(affineTransform0);
      Rectangle2D.Double rectangle2D_Double0 = labeledLineConnectionFigure0.getDrawingArea();
      assertEquals(1100.655379549957, rectangle2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      AffineTransform affineTransform0 = AffineTransform.getScaleInstance(1092.9817512104858, 1092.9817512104858);
      AffineTransform affineTransform1 = new AffineTransform((-3023.695312316396), (-707.04351525846), (-618.569641628), (-707.04351525846), (-3023.695312316396), 2071.0692);
      affineTransform0.concatenate(affineTransform1);
      labeledLineConnectionFigure0.transform(affineTransform0);
      Rectangle2D.Double rectangle2D_Double0 = labeledLineConnectionFigure0.getDrawingArea();
      assertEquals((-3304846.2975825113), rectangle2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      DiamondFigure diamondFigure0 = new DiamondFigure();
      labeledLineConnectionFigure0.add(0, (Figure) diamondFigure0);
      List<Figure> list0 = labeledLineConnectionFigure0.getChildrenFrontToBack();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      DiamondFigure diamondFigure0 = new DiamondFigure();
      labeledLineConnectionFigure0.add(0, (Figure) diamondFigure0);
      int int0 = labeledLineConnectionFigure0.getChildCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      DiamondFigure diamondFigure0 = new DiamondFigure();
      labeledLineConnectionFigure0.add(0, (Figure) diamondFigure0);
      Figure figure0 = labeledLineConnectionFigure0.getChild(0);
      assertTrue(figure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.transform((AffineTransform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.geom.BezierPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.set((AttributeKey<LabeledLineConnectionFigure>) null, labeledLineConnectionFigure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractAttributedFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.removeChild(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.removeChild((-1038));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.getChild((-2094));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.findFigureInside((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.RectangularShape", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.draw((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractAttributedFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.contains((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.RectangularShape", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.basicRemoveChild(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.basicAdd(346, (Figure) labeledLineConnectionFigure0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 346, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.add((Figure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.LabeledLineConnectionFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.add(0, (Figure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.LabeledLineConnectionFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.add((-2907), (Figure) quadTreeDrawing0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2907, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.layout();
      assertTrue(labeledLineConnectionFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      List<Figure> list0 = labeledLineConnectionFigure0.getChildrenFrontToBack();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      TriangleFigure triangleFigure0 = new TriangleFigure();
      labeledLineConnectionFigure0.basicAdd((Figure) triangleFigure0);
      Rectangle2D.Double rectangle2D_Double0 = labeledLineConnectionFigure0.getDrawingArea();
      assertEquals((-2.5), rectangle2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Rectangle2D.Double rectangle2D_Double0 = labeledLineConnectionFigure0.getDrawingArea();
      Rectangle2D.Double rectangle2D_Double1 = labeledLineConnectionFigure0.getDrawingArea();
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.invalidate();
      assertTrue(labeledLineConnectionFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      labeledLineConnectionFigure0.basicAdd(0, (Figure) triangleFigure0);
      assertEquals(1, labeledLineConnectionFigure0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.updateConnection();
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Layouter layouter0 = labeledLineConnectionFigure0.getLayouter();
      assertNull(layouter0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      DiamondFigure diamondFigure0 = new DiamondFigure();
      labeledLineConnectionFigure0.add(0, (Figure) diamondFigure0);
      boolean boolean0 = labeledLineConnectionFigure0.contains((Figure) diamondFigure0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      boolean boolean0 = labeledLineConnectionFigure0.contains((Figure) labeledLineConnectionFigure0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      DiamondFigure diamondFigure0 = new DiamondFigure();
      labeledLineConnectionFigure0.add(0, (Figure) diamondFigure0);
      Hashtable<Figure, Figure> hashtable0 = new Hashtable<Figure, Figure>();
      labeledLineConnectionFigure0.remap(hashtable0, false);
      assertFalse(labeledLineConnectionFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      labeledLineConnectionFigure1.add((Figure) labeledLineConnectionFigure0);
      labeledLineConnectionFigure1.clone();
      assertEquals(1, labeledLineConnectionFigure1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.add((Figure) labeledLineConnectionFigure0);
      labeledLineConnectionFigure0.fireFigureRemoved(labeledLineConnectionFigure0, (-703));
      assertEquals(1, labeledLineConnectionFigure0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      DiamondFigure diamondFigure0 = new DiamondFigure();
      labeledLineConnectionFigure0.fireFigureRemoved(diamondFigure0, (-2214));
      assertTrue(diamondFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      DiamondFigure diamondFigure0 = new DiamondFigure();
      labeledLineConnectionFigure0.fireFigureAdded(diamondFigure0, 503);
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      labeledLineConnectionFigure0.basicAdd((Figure) labeledLineConnectionFigure1);
      labeledLineConnectionFigure0.removeNotify((Drawing) null);
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.basicRemoveAllChildren();
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      DiamondFigure diamondFigure0 = new DiamondFigure(0.0, (-196.328869580565), 1637.404447075, 255.0);
      labeledLineConnectionFigure0.add((Figure) diamondFigure0);
      labeledLineConnectionFigure0.removeAllChildren();
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      int int0 = labeledLineConnectionFigure0.basicRemove(labeledLineConnectionFigure0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      boolean boolean0 = labeledLineConnectionFigure0.remove(labeledLineConnectionFigure0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      DiamondFigure diamondFigure0 = new DiamondFigure();
      labeledLineConnectionFigure0.add(0, (Figure) diamondFigure0);
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      labeledLineConnectionFigure0.addNotify(defaultDrawing0);
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      labeledLineConnectionFigure0.addNotify(defaultDrawing0);
      boolean boolean0 = labeledLineConnectionFigure0.add((Figure) defaultDrawing0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.add((Figure) labeledLineConnectionFigure0);
      labeledLineConnectionFigure0.basicRemoveAllChildren();
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Point2D.Double point2D_Double0 = labeledLineConnectionFigure0.getOutermostPoint();
      Figure figure0 = labeledLineConnectionFigure0.findFigureInside(point2D_Double0);
      assertNull(figure0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Point2D.Double point2D_Double0 = labeledLineConnectionFigure0.getStartPoint();
      point2D_Double0.x = 511.1956808;
      Figure figure0 = labeledLineConnectionFigure0.findFigureInside(point2D_Double0);
      assertNull(figure0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      labeledLineConnectionFigure1.basicAdd((Figure) labeledLineConnectionFigure0);
      Class<Integer> class0 = Integer.class;
      AttributeKey<Integer> attributeKey0 = new AttributeKey<Integer>("VB", class0);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      labeledLineConnectionFigure1.set(attributeKey0, integer0);
      assertEquals("VB", attributeKey0.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.setClosed(true);
      labeledLineConnectionFigure0.clone();
      assertTrue(labeledLineConnectionFigure0.isClosed());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Point2D.Double point2D_Double0 = labeledLineConnectionFigure0.getOutermostPoint();
      boolean boolean0 = labeledLineConnectionFigure0.contains(point2D_Double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      BezierLabelLocator bezierLabelLocator0 = new BezierLabelLocator((-599.27458), 1968.9, 8.0);
      Point2D.Double point2D_Double0 = bezierLabelLocator0.locate((Figure) labeledLineConnectionFigure0, (Figure) labeledLineConnectionFigure0);
      boolean boolean0 = labeledLineConnectionFigure0.contains(point2D_Double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      labeledLineConnectionFigure0.basicAdd((Figure) defaultDrawing0);
      boolean boolean0 = labeledLineConnectionFigure0.remove(defaultDrawing0);
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat("liner", "liner", "liner", 215);
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      List<Figure> list0 = quadTreeDrawing0.getFiguresFrontToBack();
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) quadTreeDrawing0, list0, 0.0, false);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      labeledLineConnectionFigure0.draw(sunGraphics2D0);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      labeledLineConnectionFigure1.basicAdd((Figure) labeledLineConnectionFigure0);
      labeledLineConnectionFigure1.willChange();
      labeledLineConnectionFigure0.fireAreaInvalidated();
      assertFalse(labeledLineConnectionFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      Hashtable<Figure, Figure> hashtable0 = new Hashtable<Figure, Figure>();
      labeledLineConnectionFigure1.basicAdd((Figure) labeledLineConnectionFigure0);
      labeledLineConnectionFigure0.remap(hashtable0, false);
      assertTrue(labeledLineConnectionFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      CompositeFigureListener compositeFigureListener0 = mock(CompositeFigureListener.class, new ViolatedAssumptionAnswer());
      labeledLineConnectionFigure0.removeCompositeFigureListener(compositeFigureListener0);
      assertTrue(labeledLineConnectionFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.getChild(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      List<Figure> list0 = labeledLineConnectionFigure0.getChildren();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.validate();
      assertTrue(labeledLineConnectionFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      int int0 = labeledLineConnectionFigure0.getChildCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.addCompositeFigureListener((CompositeFigureListener) null);
      assertTrue(labeledLineConnectionFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.basicRemoveChild((-784));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.setLayouter((Layouter) null);
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.basicAdd((Figure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.LabeledLineConnectionFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      int int0 = labeledLineConnectionFigure0.indexOf((Figure) null);
      assertEquals((-1), int0);
  }
}
