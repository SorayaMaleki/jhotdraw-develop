/*
 * This file was automatically generated by EvoSuite
 * Sat May 29 13:40:01 GMT 2021
 */

package org.jhotdraw.draw.figure;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.awt.event.MouseEvent;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.util.HashMap;
import java.util.Hashtable;
import javax.swing.JPanel;
import javax.swing.JToolBar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jhotdraw.draw.AttributeKeys;
import org.jhotdraw.draw.DefaultDrawing;
import org.jhotdraw.draw.DefaultDrawingView;
import org.jhotdraw.draw.Drawing;
import org.jhotdraw.draw.DrawingView;
import org.jhotdraw.draw.QuadTreeDrawing;
import org.jhotdraw.draw.connector.AbstractConnector;
import org.jhotdraw.draw.connector.ChopBezierConnector;
import org.jhotdraw.draw.connector.ChopDiamondConnector;
import org.jhotdraw.draw.connector.ChopEllipseConnector;
import org.jhotdraw.draw.connector.ChopTriangleConnector;
import org.jhotdraw.draw.connector.Connector;
import org.jhotdraw.draw.connector.StickyRectangleConnector;
import org.jhotdraw.draw.figure.DiamondFigure;
import org.jhotdraw.draw.figure.Figure;
import org.jhotdraw.draw.figure.GroupFigure;
import org.jhotdraw.draw.figure.LabeledLineConnectionFigure;
import org.jhotdraw.draw.figure.LineConnectionFigure;
import org.jhotdraw.draw.figure.RectangleFigure;
import org.jhotdraw.draw.figure.RoundRectangleFigure;
import org.jhotdraw.draw.figure.TriangleFigure;
import org.jhotdraw.draw.handle.ConnectorHandle;
import org.jhotdraw.draw.liner.CurvedLiner;
import org.jhotdraw.draw.liner.Liner;
import org.jhotdraw.draw.liner.SlantedLiner;
import org.jhotdraw.draw.locator.RelativeLocator;
import org.jhotdraw.geom.BezierPath;
import org.jhotdraw.xml.DOMInput;
import org.jhotdraw.xml.DOMOutput;
import org.jhotdraw.xml.DefaultDOMFactory;
import org.jhotdraw.xml.JavaPrimitivesDOMFactory;
import org.jhotdraw.xml.JavaxDOMOutput;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LineConnectionFigure_ESTest extends LineConnectionFigure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      DiamondFigure diamondFigure0 = new DiamondFigure(0.0, 0.0, 1984.57208291788, 1984.57208291788);
      Point2D.Double point2D_Double0 = diamondFigure0.getStartPoint();
      Dimension dimension0 = new Dimension();
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator(dimension0);
      MouseEvent mouseEvent0 = new MouseEvent(jToolBar_Separator0, 0, 0, 0, 1210, 576, 576, false, 0);
      DefaultDrawingView defaultDrawingView0 = new DefaultDrawingView();
      labeledLineConnectionFigure0.handleMouseClick(point2D_Double0, mouseEvent0, defaultDrawingView0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      ChopBezierConnector chopBezierConnector0 = new ChopBezierConnector(labeledLineConnectionFigure0);
      JavaPrimitivesDOMFactory javaPrimitivesDOMFactory0 = new JavaPrimitivesDOMFactory();
      JavaxDOMOutput javaxDOMOutput0 = new JavaxDOMOutput(javaPrimitivesDOMFactory0);
      chopBezierConnector0.write(javaxDOMOutput0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      ChopTriangleConnector chopTriangleConnector0 = new ChopTriangleConnector(triangleFigure0);
      lineConnectionFigure0.setEndConnector(chopTriangleConnector0);
      lineConnectionFigure0.getEndFigure();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      lineConnectionFigure0.setClosed(true);
      lineConnectionFigure0.clone();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      RectangleFigure rectangleFigure0 = new RectangleFigure((-21.35137369), (-1246.389479379011), 755.67521377, (-16.056146768));
      ChopDiamondConnector chopDiamondConnector0 = new ChopDiamondConnector(rectangleFigure0);
      labeledLineConnectionFigure0.canConnect((Connector) chopDiamondConnector0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      RelativeLocator relativeLocator0 = new RelativeLocator(0, 0, true);
      Point2D.Double point2D_Double0 = relativeLocator0.locate((Figure) labeledLineConnectionFigure0);
      Connector connector0 = labeledLineConnectionFigure0.findConnector(point2D_Double0, labeledLineConnectionFigure0);
      labeledLineConnectionFigure0.canConnect(connector0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      JavaPrimitivesDOMFactory javaPrimitivesDOMFactory0 = new JavaPrimitivesDOMFactory();
      JavaxDOMOutput javaxDOMOutput0 = new JavaxDOMOutput(javaPrimitivesDOMFactory0);
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.writePoints(javaxDOMOutput0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.write((DOMOutput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.BezierFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.transform((AffineTransform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.geom.BezierPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      ChopBezierConnector chopBezierConnector0 = new ChopBezierConnector();
      // Undeclared exception!
      try { 
        lineConnectionFigure0.setStartConnector(chopBezierConnector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.LineConnectionFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      Point2D.Double point2D_Double0 = lineConnectionFigure0.getStartPoint();
      // Undeclared exception!
      try { 
        lineConnectionFigure0.setPoint(896, point2D_Double0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 896, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      BezierPath bezierPath0 = lineConnectionFigure0.getCappedPath();
      Point2D.Double point2D_Double0 = bezierPath0.getPointOnPath(0.0, (-4637));
      // Undeclared exception!
      try { 
        lineConnectionFigure0.setPoint((-4637), point2D_Double0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4637
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      BezierPath.Node bezierPath_Node0 = new BezierPath.Node();
      // Undeclared exception!
      try { 
        lineConnectionFigure0.setNode((-2323), bezierPath_Node0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2323
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.setEndPoint((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.geom.BezierPath$Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      ChopEllipseConnector chopEllipseConnector0 = new ChopEllipseConnector();
      // Undeclared exception!
      try { 
        lineConnectionFigure0.setEndConnector(chopEllipseConnector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.LineConnectionFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      ChopDiamondConnector chopDiamondConnector0 = new ChopDiamondConnector(quadTreeDrawing0);
      Connector connector0 = roundRectangleFigure0.findCompatibleConnector(chopDiamondConnector0, false);
      ConnectorHandle connectorHandle0 = new ConnectorHandle(connector0, labeledLineConnectionFigure0);
      Point2D.Double point2D_Double0 = connectorHandle0.getLocationOnDrawing();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.handleMouseClick(point2D_Double0, (MouseEvent) null, (DrawingView) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.LineConnectionFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      StickyRectangleConnector stickyRectangleConnector0 = new StickyRectangleConnector();
      // Undeclared exception!
      try { 
        lineConnectionFigure0.canConnect((Connector) stickyRectangleConnector0, (Connector) stickyRectangleConnector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.LineConnectionFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.lineout();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      BezierPath.Node bezierPath_Node0 = labeledLineConnectionFigure0.getNode(1);
      labeledLineConnectionFigure0.setNode(1, bezierPath_Node0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      Hashtable<Figure, Figure> hashtable0 = new Hashtable<Figure, Figure>();
      lineConnectionFigure0.remap(hashtable0, false);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      lineConnectionFigure0.clone();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      lineConnectionFigure0.addNotify((Drawing) null);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      lineConnectionFigure0.setStartConnector((Connector) null);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.setEndConnector((Connector) null);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      StickyRectangleConnector stickyRectangleConnector0 = new StickyRectangleConnector(labeledLineConnectionFigure0);
      labeledLineConnectionFigure0.setStartConnector(stickyRectangleConnector0);
      labeledLineConnectionFigure0.getStartFigure();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.getStartFigure();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      ChopDiamondConnector chopDiamondConnector0 = new ChopDiamondConnector(labeledLineConnectionFigure0);
      labeledLineConnectionFigure0.setEndConnector(chopDiamondConnector0);
      labeledLineConnectionFigure0.getEndFigure();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.getEndFigure();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      lineConnectionFigure0.updateConnection();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      RelativeLocator relativeLocator0 = new RelativeLocator(0, 0, true);
      Point2D.Double point2D_Double0 = relativeLocator0.locate((Figure) labeledLineConnectionFigure0);
      labeledLineConnectionFigure0.setPoint(0, point2D_Double0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      GroupFigure groupFigure0 = new GroupFigure();
      Point2D.Double point2D_Double0 = groupFigure0.getStartPoint();
      labeledLineConnectionFigure0.setEndPoint(point2D_Double0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.setConnectable(true);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      lineConnectionFigure0.validate();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.getEndConnector();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      lineConnectionFigure0.getLiner();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.reverseConnection();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      CurvedLiner curvedLiner0 = new CurvedLiner();
      labeledLineConnectionFigure0.setLiner(curvedLiner0);
      labeledLineConnectionFigure0.validate();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      ChopDiamondConnector chopDiamondConnector0 = new ChopDiamondConnector(labeledLineConnectionFigure0);
      labeledLineConnectionFigure0.setEndConnector(chopDiamondConnector0);
      BezierPath.Node bezierPath_Node0 = labeledLineConnectionFigure0.removeNode(0);
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.setNode(2048, bezierPath_Node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2048, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      JavaPrimitivesDOMFactory javaPrimitivesDOMFactory0 = new JavaPrimitivesDOMFactory();
      JavaxDOMOutput javaxDOMOutput0 = new JavaxDOMOutput(javaPrimitivesDOMFactory0);
      labeledLineConnectionFigure0.writeLiner(javaxDOMOutput0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      AbstractConnector abstractConnector0 = new AbstractConnector(labeledLineConnectionFigure0);
      labeledLineConnectionFigure0.setEndConnector(abstractConnector0);
      HashMap<Figure, Figure> hashMap0 = new HashMap<Figure, Figure>();
      hashMap0.put(labeledLineConnectionFigure0, labeledLineConnectionFigure0);
      labeledLineConnectionFigure0.remap(hashMap0, false);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      AbstractConnector abstractConnector0 = new AbstractConnector(labeledLineConnectionFigure0);
      labeledLineConnectionFigure0.setEndConnector(abstractConnector0);
      labeledLineConnectionFigure0.clone();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      lineConnectionFigure0.removeNotify((Drawing) null);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      AbstractConnector abstractConnector0 = new AbstractConnector(labeledLineConnectionFigure0);
      labeledLineConnectionFigure0.setEndConnector(abstractConnector0);
      HashMap<Figure, Figure> hashMap0 = new HashMap<Figure, Figure>();
      labeledLineConnectionFigure0.remap(hashMap0, true);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      RectangleFigure rectangleFigure0 = new RectangleFigure(1.5, 1.5, 0.0, 61.404);
      Connector connector0 = rectangleFigure0.findCompatibleConnector((Connector) null, true);
      ChopDiamondConnector chopDiamondConnector0 = new ChopDiamondConnector(rectangleFigure0);
      labeledLineConnectionFigure0.canConnect(connector0, (Connector) chopDiamondConnector0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      StickyRectangleConnector stickyRectangleConnector0 = new StickyRectangleConnector(lineConnectionFigure0);
      lineConnectionFigure0.canConnect((Connector) stickyRectangleConnector0, (Connector) stickyRectangleConnector0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      BezierPath.Node bezierPath_Node0 = new BezierPath.Node(1249, 1, (-3065.38), (-1462.1), 0, 1360.057135238997, 1249);
      lineConnectionFigure0.addNode(bezierPath_Node0);
      lineConnectionFigure0.createHandles(0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.createHandles(2);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      ChopBezierConnector chopBezierConnector0 = new ChopBezierConnector(labeledLineConnectionFigure0);
      labeledLineConnectionFigure1.setEndConnector(chopBezierConnector0);
      float[] floatArray0 = new float[5];
      AffineTransform affineTransform0 = new AffineTransform(floatArray0);
      labeledLineConnectionFigure0.transform(affineTransform0);
      assertNotSame(labeledLineConnectionFigure0, labeledLineConnectionFigure1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      StickyRectangleConnector stickyRectangleConnector0 = new StickyRectangleConnector(labeledLineConnectionFigure0);
      labeledLineConnectionFigure0.setStartConnector(stickyRectangleConnector0);
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      labeledLineConnectionFigure0.removeNotify(defaultDrawing0);
      assertFalse(labeledLineConnectionFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      ChopTriangleConnector chopTriangleConnector0 = new ChopTriangleConnector();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.canConnect((Connector) chopTriangleConnector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.LineConnectionFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      AbstractConnector abstractConnector0 = new AbstractConnector(labeledLineConnectionFigure0);
      labeledLineConnectionFigure0.setEndConnector(abstractConnector0);
      HashMap<Figure, Figure> hashMap0 = new HashMap<Figure, Figure>();
      labeledLineConnectionFigure0.remap(hashMap0, false);
      assertFalse(labeledLineConnectionFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.getBezierPath();
      assertFalse(labeledLineConnectionFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.readPoints((DOMInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.BezierFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      RectangleFigure rectangleFigure0 = new RectangleFigure(1.5, 1.5, 0.0, 61.404);
      Connector connector0 = rectangleFigure0.findCompatibleConnector((Connector) null, true);
      Connector connector1 = labeledLineConnectionFigure0.findCompatibleConnector(connector0, true);
      labeledLineConnectionFigure0.handleConnect(connector1, connector0);
      assertFalse(labeledLineConnectionFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.read((DOMInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractAttributedFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      GroupFigure groupFigure0 = new GroupFigure();
      Point2D.Double point2D_Double0 = groupFigure0.getEndPoint();
      labeledLineConnectionFigure0.setStartPoint(point2D_Double0);
      assertFalse(labeledLineConnectionFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      ChopEllipseConnector chopEllipseConnector0 = new ChopEllipseConnector();
      lineConnectionFigure0.handleDisconnect(chopEllipseConnector0, chopEllipseConnector0);
      assertFalse(lineConnectionFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      DefaultDOMFactory defaultDOMFactory0 = new DefaultDOMFactory();
      JavaxDOMOutput javaxDOMOutput0 = new JavaxDOMOutput(defaultDOMFactory0);
      // Undeclared exception!
      try { 
        lineConnectionFigure0.write(javaxDOMOutput0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      AffineTransform affineTransform0 = new AffineTransform(600.0, 600.0, 600.0, 600.0, 600.0, 600.0);
      lineConnectionFigure0.transform(affineTransform0);
      assertFalse(lineConnectionFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      lineConnectionFigure0.getStartConnector();
      assertFalse(lineConnectionFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      SlantedLiner slantedLiner0 = new SlantedLiner();
      labeledLineConnectionFigure0.setLiner(slantedLiner0);
      Liner liner0 = labeledLineConnectionFigure0.getLiner();
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertNotNull(liner0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      JPanel jPanel0 = new JPanel(true);
      MouseEvent mouseEvent0 = new MouseEvent(jPanel0, 0, 0, 0, 0, 0, 0, false, 0);
      boolean boolean0 = labeledLineConnectionFigure0.handleMouseClick(point2D_Double0, mouseEvent0, (DrawingView) null);
      assertFalse(boolean0);
      assertFalse(labeledLineConnectionFigure0.isConnectable());
  }
}
