/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 02 10:37:43 GMT 2021
 */

package org.jhotdraw.draw.figure;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.Collection;
import java.util.List;
import javax.swing.Box;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jhotdraw.draw.AttributeKeys;
import org.jhotdraw.draw.DefaultDrawing;
import org.jhotdraw.draw.Drawing;
import org.jhotdraw.draw.QuadTreeDrawing;
import org.jhotdraw.draw.connector.AbstractConnector;
import org.jhotdraw.draw.connector.ChopTriangleConnector;
import org.jhotdraw.draw.figure.EllipseFigure;
import org.jhotdraw.draw.figure.Figure;
import org.jhotdraw.draw.figure.LineConnectionFigure;
import org.jhotdraw.draw.figure.TriangleFigure;
import org.jhotdraw.draw.handle.CloseHandle;
import org.jhotdraw.draw.handle.Handle;
import org.jhotdraw.draw.io.ImageOutputFormat;
import org.jhotdraw.draw.locator.FontSizeLocator;
import org.jhotdraw.draw.locator.RelativeDecoratorLocator;
import org.jhotdraw.geom.BezierPath;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TriangleFigure_ESTest extends TriangleFigure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(1128.4341313, (-825.19534642), 3516.0, 3516.0, attributeKeys_Orientation0);
      RelativeDecoratorLocator relativeDecoratorLocator0 = new RelativeDecoratorLocator((-825.19534642), (-825.19534642), true);
      Point2D.Double point2D_Double0 = relativeDecoratorLocator0.locate((Figure) triangleFigure0);
      triangleFigure0.setBounds(point2D_Double0, point2D_Double0);
      assertEquals((-2902212.03335914), point2D_Double0.y, 0.01);
      assertEquals((-2900258.40388142), point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(0.0, 0.1, 0.1, 0.1, attributeKeys_Orientation0);
      FontSizeLocator fontSizeLocator0 = new FontSizeLocator();
      Point2D.Double point2D_Double0 = fontSizeLocator0.locate((Figure) triangleFigure0);
      Point2D.Double point2D_Double1 = triangleFigure0.chop(point2D_Double0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.19410558511870524, point2D_Double1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure((-2077.95), (-2077.95), (-2077.95), (-2077.95));
      Collection<Handle> collection0 = triangleFigure0.createHandles((-1691));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH;
      TriangleFigure triangleFigure0 = new TriangleFigure(1222.5, 1222.5, 1222.5, 0.0, attributeKeys_Orientation0);
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getDrawingArea();
      assertEquals(2447.5, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1225.0, rectangle2D_Double0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(1.0, 2.0, 1.0, (-819.897), attributeKeys_Orientation0);
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getDrawingArea();
      assertEquals(4.5, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-815.397), rectangle2D_Double0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(0.0, 0.0, (-3582.791281442801), 0.0, attributeKeys_Orientation0);
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getDrawingArea();
      assertEquals((-3580.291281442801), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(2.5, rectangle2D_Double0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure((-2025.2555698955), (-2025.2555698955), 6251.10766, (-2025.2555698955));
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getBounds();
      assertEquals(4225.852090104499, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-4050.511139791), rectangle2D_Double0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure((-4172.377569), 6.0, 2465.32, 6.0, attributeKeys_Orientation0);
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getBounds();
      assertEquals((-1707.057569), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(12.0, rectangle2D_Double0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(0.0, 0.0, 0.0, (-1.575), attributeKeys_Orientation0);
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getBounds();
      assertEquals((-0.7875), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(1117.444272995633, 1117.444272995633, 2211.9698344046533, 1117.444272995633, attributeKeys_Orientation0);
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getBounds();
      assertEquals(3329.4141074002864, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1676.1664094934495, rectangle2D_Double0.getCenterY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      triangleFigure0.setVisible(false);
      TriangleFigure triangleFigure1 = triangleFigure0.clone();
      assertNotSame(triangleFigure1, triangleFigure0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      triangleFigure0.setSelectable(false);
      TriangleFigure triangleFigure1 = triangleFigure0.clone();
      assertNotSame(triangleFigure1, triangleFigure0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure((-36.454062), 0.0, (-36.454062), 0.0, attributeKeys_Orientation0);
      // Undeclared exception!
      try { 
        triangleFigure0.transform((AffineTransform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TriangleFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      Point2D.Double point2D_Double0 = triangleFigure0.getStartPoint();
      // Undeclared exception!
      try { 
        triangleFigure0.setBounds(point2D_Double0, (Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TriangleFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(1128.4341313, (-825.19534642), 3516.0, 3516.0, attributeKeys_Orientation0);
      // Undeclared exception!
      try { 
        triangleFigure0.restoreTransformTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TriangleFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      // Undeclared exception!
      try { 
        triangleFigure0.restoreTransformTo(attributeKeys_Orientation0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jhotdraw.draw.AttributeKeys$Orientation cannot be cast to java.awt.geom.Rectangle2D$Double
         //
         verifyException("org.jhotdraw.draw.figure.TriangleFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH;
      TriangleFigure triangleFigure0 = new TriangleFigure((-2.0), (-2.0), (-2.0), 1323.26, attributeKeys_Orientation0);
      // Undeclared exception!
      try { 
        triangleFigure0.drawStroke((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      // Undeclared exception!
      try { 
        triangleFigure0.drawFill((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure((-2259.1035), (-2259.1035), 0.0, (-2259.1035));
      // Undeclared exception!
      try { 
        triangleFigure0.contains((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Path2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure((-4172.377569), 6.0, 2465.32, 6.0, attributeKeys_Orientation0);
      // Undeclared exception!
      try { 
        triangleFigure0.chop((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.geom.Geom", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertEquals(0, BezierPath.C0_MASK);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(0.1, 2685.6, 0.1, 2685.6, attributeKeys_Orientation0);
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertEquals(1, BezierPath.C1_MASK);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH;
      TriangleFigure triangleFigure0 = new TriangleFigure(0.5, 0.0, (-3590.0), 0.0, attributeKeys_Orientation0);
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertEquals(0, BezierPath.C0_MASK);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH;
      TriangleFigure triangleFigure0 = new TriangleFigure((-16.36115), 1046.448288168125, 600.0, 0.0, attributeKeys_Orientation0);
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertEquals(3, BezierPath.C1C2_MASK);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(0.0, 0.0, (-3582.791281442801), 0.0, attributeKeys_Orientation0);
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getBounds();
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-1791.3956407214005), rectangle2D_Double0.getCenterX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getDrawingArea();
      assertEquals((-2.5), rectangle2D_Double0.x, 0.01);
      assertEquals((-2.5), rectangle2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertTrue(bezierPath0.isClosed());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertFalse(bezierPath0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(1222.5, 1222.5, 1222.5, 0.0, attributeKeys_Orientation0);
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      EllipseFigure ellipseFigure0 = new EllipseFigure();
      CloseHandle closeHandle0 = new CloseHandle(ellipseFigure0);
      Point2D.Double point2D_Double0 = closeHandle0.getLocationOnDrawing();
      point2D_Double0.y = 1188.74288478549;
      Point2D.Double point2D_Double1 = bezierPath0.chop(point2D_Double0);
      boolean boolean0 = triangleFigure0.contains(point2D_Double1);
      assertEquals(1833.75, point2D_Double1.x, 0.01);
      assertTrue(boolean0);
      assertEquals(1222.5, point2D_Double1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(0.0, 0.0, (-3582.791281442801), 0.0, attributeKeys_Orientation0);
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertEquals(0, bezierPath0.getWindingRule());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      Point2D.Double point2D_Double0 = lineConnectionFigure0.getStartPoint();
      boolean boolean0 = triangleFigure0.contains(point2D_Double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      Collection<Handle> collection0 = triangleFigure0.createHandles(0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      Collection<Handle> collection0 = triangleFigure0.createHandles(7);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure((-2259.1035), (-2259.1035), 0.0, (-2259.1035));
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat();
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) defaultDrawing0, (List<Figure>) null, 1304.0, false);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      triangleFigure0.drawFill(sunGraphics2D0);
      assertEquals(0, sunGraphics2D0.strokeState);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      AffineTransform affineTransform0 = new AffineTransform();
      triangleFigure0.transform(affineTransform0);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(0.0, 0.0, (-3582.791281442801), 0.0, attributeKeys_Orientation0);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)triangleFigure0.getTransformRestoreData();
      assertEquals((-3582.791281442801), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      Point2D.Double point2D_Double0 = triangleFigure0.getStartPoint();
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      triangleFigure0.findConnector(point2D_Double0, lineConnectionFigure0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat();
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-1.0), (-1.0), (-1.0), (-821.77358));
      List<Figure> list0 = quadTreeDrawing0.getChildren(rectangle2D_Double0);
      AffineTransform affineTransform0 = new AffineTransform();
      Box box0 = Box.createHorizontalBox();
      Dimension dimension0 = box0.getMaximumSize();
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) defaultDrawing0, list0, affineTransform0, dimension0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      triangleFigure0.drawStroke(sunGraphics2D0);
      assertEquals(0, sunGraphics2D0.transY);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getDrawingArea(4272.276066813988);
      triangleFigure0.restoreTransformTo(rectangle2D_Double0);
      assertTrue(triangleFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      AbstractConnector abstractConnector0 = new AbstractConnector(triangleFigure0);
      ChopTriangleConnector chopTriangleConnector0 = (ChopTriangleConnector)triangleFigure0.findCompatibleConnector(abstractConnector0, true);
      assertFalse(chopTriangleConnector0.isConnectToDecorator());
  }
}
