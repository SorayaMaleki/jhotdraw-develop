/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 01 05:07:27 GMT 2021
 */

package org.jhotdraw.draw.figure;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.Collection;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jhotdraw.draw.AttributeKeys;
import org.jhotdraw.draw.DefaultDrawing;
import org.jhotdraw.draw.Drawing;
import org.jhotdraw.draw.connector.ChopRoundRectangleConnector;
import org.jhotdraw.draw.connector.ChopTriangleConnector;
import org.jhotdraw.draw.figure.ConnectionFigure;
import org.jhotdraw.draw.figure.Figure;
import org.jhotdraw.draw.figure.LabelFigure;
import org.jhotdraw.draw.figure.LabeledLineConnectionFigure;
import org.jhotdraw.draw.figure.TriangleFigure;
import org.jhotdraw.draw.handle.Handle;
import org.jhotdraw.draw.io.ImageOutputFormat;
import org.jhotdraw.geom.BezierPath;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TriangleFigure_ESTest extends TriangleFigure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      ChopRoundRectangleConnector chopRoundRectangleConnector0 = new ChopRoundRectangleConnector(triangleFigure0);
      Rectangle2D.Double rectangle2D_Double0 = chopRoundRectangleConnector0.getDrawingArea();
      triangleFigure0.setBounds(rectangle2D_Double0);
      assertTrue(triangleFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure(0.0, 0.0, 0.0, (-3226.3222764));
      Collection<Handle> collection0 = triangleFigure0.createHandles((-2001));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure(538.1138, 538.1138, 538.1138, 538.1138);
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getDrawingArea();
      assertEquals(1078.7276, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1078.7276, rectangle2D_Double0.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH;
      TriangleFigure triangleFigure0 = new TriangleFigure((-295.614858452005), 259.79184875399295, (-295.614858452005), 0.0, attributeKeys_Orientation0);
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getDrawingArea();
      assertEquals((-588.72971690401), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(262.29184875399295, rectangle2D_Double0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      AffineTransform affineTransform0 = new AffineTransform((-565.7F), 0.0F, (-565.7F), 0.0F, 0.0F, (-7.3F));
      triangleFigure0.transform(affineTransform0);
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getDrawingArea();
      assertEquals(5.1, rectangle2D_Double0.height, 0.01);
      assertEquals(2.5999999999999996, rectangle2D_Double0.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure(0.0, 4728.060987976, 0.0, 0.0);
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getBounds();
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(4728.060987976, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(12.0, 0.0, 12.0, 0.0, attributeKeys_Orientation0);
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getBounds();
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(24.0, rectangle2D_Double0.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure((-3136.0), (-3136.0), 1054.29, 1054.29);
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getBounds();
      assertEquals((-2081.71), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-2608.855), rectangle2D_Double0.getCenterY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      Point2D.Double point2D_Double0 = triangleFigure0.getStartPoint();
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance(0.0, 0.0);
      triangleFigure0.transform(affineTransform0);
      triangleFigure0.contains(point2D_Double0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure(607.862195925003, 0.0, 607.862195925003, 0.0);
      triangleFigure0.setVisible(false);
      TriangleFigure triangleFigure1 = triangleFigure0.clone();
      assertNotSame(triangleFigure1, triangleFigure0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      triangleFigure0.setRemovable(false);
      TriangleFigure triangleFigure1 = triangleFigure0.clone();
      assertNotSame(triangleFigure1, triangleFigure0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(2143.5619, (-702.0), 1743.33761465, 0.0, attributeKeys_Orientation0);
      triangleFigure0.setConnectable(false);
      TriangleFigure triangleFigure1 = triangleFigure0.clone();
      assertNotSame(triangleFigure1, triangleFigure0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      // Undeclared exception!
      try { 
        triangleFigure0.transform((AffineTransform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TriangleFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH;
      TriangleFigure triangleFigure0 = new TriangleFigure(1857.9, 1857.9, 1857.9, 1857.9, attributeKeys_Orientation0);
      // Undeclared exception!
      try { 
        triangleFigure0.setBounds((Point2D.Double) null, (Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TriangleFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH;
      TriangleFigure triangleFigure0 = new TriangleFigure((-295.614858452005), 259.79184875399295, (-295.614858452005), 0.0, attributeKeys_Orientation0);
      // Undeclared exception!
      try { 
        triangleFigure0.restoreTransformTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TriangleFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(4218.634534, (-1.575), 4218.634534, 4218.634534, attributeKeys_Orientation0);
      // Undeclared exception!
      try { 
        triangleFigure0.restoreTransformTo(attributeKeys_Orientation0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jhotdraw.draw.AttributeKeys$Orientation cannot be cast to java.awt.geom.Rectangle2D$Double
         //
         verifyException("org.jhotdraw.draw.figure.TriangleFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      // Undeclared exception!
      try { 
        triangleFigure0.drawStroke((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure(0.0, 0.0, 3020.985046, 0.0);
      // Undeclared exception!
      try { 
        triangleFigure0.drawFill((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      // Undeclared exception!
      try { 
        triangleFigure0.contains((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Path2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure(0.0, 0.0, 0.0, 0.5);
      // Undeclared exception!
      try { 
        triangleFigure0.chop((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.geom.Geom", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TriangleFigure triangleFigure0 = null;
      try {
        triangleFigure0 = new TriangleFigure((AttributeKeys.Orientation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null value not allowed for AttributeKey orientation
         //
         verifyException("org.jhotdraw.draw.AttributeKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TriangleFigure triangleFigure0 = null;
      try {
        triangleFigure0 = new TriangleFigure((-1.0), 2.2183782412431583, (-1.0), (-1386.647499699001), (AttributeKeys.Orientation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null value not allowed for AttributeKey orientation
         //
         verifyException("org.jhotdraw.draw.AttributeKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertEquals(3, bezierPath0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertEquals(1, BezierPath.C1_MASK);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH;
      TriangleFigure triangleFigure0 = new TriangleFigure(2.0, (-2078.9), 3853.9077, (-2847.1419), attributeKeys_Orientation0);
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertEquals(3, BezierPath.C1C2_MASK);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      LabelFigure labelFigure0 = new LabelFigure();
      Point2D.Double point2D_Double0 = labelFigure0.origin;
      triangleFigure0.setBounds(point2D_Double0, point2D_Double0);
      assertTrue(triangleFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getDrawingArea();
      assertEquals((-2.5), rectangle2D_Double0.y, 0.01);
      assertEquals((-2.5), rectangle2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertTrue(bezierPath0.isClosed());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure((-642.21591), (-642.21591), (-642.21591), (-642.21591), attributeKeys_Orientation0);
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertEquals(3, BezierPath.C1C2_MASK);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat("", "", "", 1087);
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      List<Figure> list0 = defaultDrawing0.getChildren();
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) defaultDrawing0, list0, (-744.162259756108), false);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      triangleFigure0.drawFill(sunGraphics2D0);
      assertEquals(1, sunGraphics2D0.antialiasHint);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Point2D.Double point2D_Double1 = triangleFigure0.chop(point2D_Double0);
      assertEquals((-1.0), point2D_Double1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure((-915.91882285), 1.57, (-1.0), (-1386.647499699001), attributeKeys_Orientation0);
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertEquals(1, BezierPath.C1_MASK);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(0.0, 0.0, 0.0, 0.0, attributeKeys_Orientation0);
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertEquals(1, BezierPath.C1_MASK);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure(1011.3764848, 2.0, 1011.3764848, 2.0);
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat();
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      List<Figure> list0 = labeledLineConnectionFigure0.getChildren();
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) defaultDrawing0, list0, 1011.3764848, true);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      triangleFigure0.drawStroke(sunGraphics2D0);
      assertEquals(0, sunGraphics2D0.compositeState);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      Collection<Handle> collection0 = triangleFigure0.createHandles(0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      Collection<Handle> collection0 = triangleFigure0.createHandles(1551);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Point2D.Double point2D_Double0 = defaultDrawing0.getEndPoint();
      boolean boolean0 = triangleFigure0.contains(point2D_Double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)triangleFigure0.getTransformRestoreData();
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Point2D.Double point2D_Double0 = defaultDrawing0.getEndPoint();
      ChopTriangleConnector chopTriangleConnector0 = (ChopTriangleConnector)triangleFigure0.findConnector(point2D_Double0, (ConnectionFigure) null);
      assertFalse(chopTriangleConnector0.isConnectToDecorator());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getBounds();
      triangleFigure0.restoreTransformTo(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      ChopTriangleConnector chopTriangleConnector0 = new ChopTriangleConnector(triangleFigure0);
      ChopTriangleConnector chopTriangleConnector1 = (ChopTriangleConnector)triangleFigure0.findCompatibleConnector(chopTriangleConnector0, true);
      assertFalse(chopTriangleConnector1.isConnectToDecorator());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertEquals(3, BezierPath.C1C2_MASK);
  }
}
