/*
 * This file was automatically generated by EvoSuite
 * Sat May 29 17:49:28 GMT 2021
 */

package org.jhotdraw.draw.figure;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.Collection;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jhotdraw.draw.AttributeKeys;
import org.jhotdraw.draw.DefaultDrawingView;
import org.jhotdraw.draw.Drawing;
import org.jhotdraw.draw.QuadTreeDrawing;
import org.jhotdraw.draw.connector.ChopTriangleConnector;
import org.jhotdraw.draw.connector.Connector;
import org.jhotdraw.draw.figure.EllipseFigure;
import org.jhotdraw.draw.figure.Figure;
import org.jhotdraw.draw.figure.LabeledLineConnectionFigure;
import org.jhotdraw.draw.figure.LineConnectionFigure;
import org.jhotdraw.draw.figure.TriangleFigure;
import org.jhotdraw.draw.handle.Handle;
import org.jhotdraw.draw.io.ImageOutputFormat;
import org.jhotdraw.draw.locator.RelativeDecoratorLocator;
import org.jhotdraw.geom.BezierPath;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TriangleFigure_ESTest extends TriangleFigure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      double[] doubleArray0 = new double[8];
      doubleArray0[5] = 4.0;
      AffineTransform affineTransform0 = new AffineTransform(doubleArray0);
      triangleFigure0.transform(affineTransform0);
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      double[] doubleArray0 = new double[8];
      doubleArray0[4] = 880.7832225;
      AffineTransform affineTransform0 = new AffineTransform(doubleArray0);
      triangleFigure0.transform(affineTransform0);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure((-979.61604007), (-984.37916427984), (-979.61604007), (-979.61604007));
      Collection<Handle> collection0 = triangleFigure0.createHandles((-1867));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure(940.4122884, 940.4122884, 940.4122884, 940.4122884);
      BufferedImage bufferedImage0 = new BufferedImage(8, 8, 7);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      triangleFigure0.drawFill(sunGraphics2D0);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(630.7, 630.7, 630.7, 4048.4392224659, attributeKeys_Orientation0);
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getDrawingArea();
      assertEquals(4681.6392224659, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1263.9, rectangle2D_Double0.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(0.0, 0.0, (-841.4), (-841.4), attributeKeys_Orientation0);
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getDrawingArea();
      assertEquals((-838.9), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-838.9), rectangle2D_Double0.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure(940.4122884, 940.4122884, 940.4122884, 940.4122884);
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getBounds();
      assertEquals(1880.8245768, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1880.8245768, rectangle2D_Double0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure((-1209.41), (-1209.41), (-1209.41), (-1209.41));
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getBounds();
      assertEquals((-2418.82), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-1814.1150000000002), rectangle2D_Double0.getCenterY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      DefaultDrawingView defaultDrawingView0 = new DefaultDrawingView();
      Point point0 = new Point();
      Point2D.Double point2D_Double0 = defaultDrawingView0.viewToDrawing(point0);
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance(0, 699.76, 0.0);
      triangleFigure0.transform(affineTransform0);
      boolean boolean0 = triangleFigure0.contains(point2D_Double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      triangleFigure0.setVisible(false);
      TriangleFigure triangleFigure1 = triangleFigure0.clone();
      assertNotSame(triangleFigure1, triangleFigure0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure(0.0, 0.0, 0.0, 0.0);
      triangleFigure0.setRemovable(false);
      TriangleFigure triangleFigure1 = triangleFigure0.clone();
      assertNotSame(triangleFigure1, triangleFigure0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure(3.0, 3.0, 3.0, 3.0);
      // Undeclared exception!
      try { 
        triangleFigure0.transform((AffineTransform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TriangleFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(1645.59947, 0.0, 1.0, 305.82115, attributeKeys_Orientation0);
      // Undeclared exception!
      try { 
        triangleFigure0.restoreTransformTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TriangleFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(0.0, 0.0, (-841.4), (-841.4), attributeKeys_Orientation0);
      // Undeclared exception!
      try { 
        triangleFigure0.restoreTransformTo(attributeKeys_Orientation0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jhotdraw.draw.AttributeKeys$Orientation cannot be cast to java.awt.geom.Rectangle2D$Double
         //
         verifyException("org.jhotdraw.draw.figure.TriangleFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure((-979.61604007), (-984.37916427984), (-979.61604007), (-979.61604007));
      // Undeclared exception!
      try { 
        triangleFigure0.contains((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Path2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure(18.0, (-3637.60445681549), (-3637.60445681549), 18.0);
      // Undeclared exception!
      try { 
        triangleFigure0.chop((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.geom.Geom", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TriangleFigure triangleFigure0 = null;
      try {
        triangleFigure0 = new TriangleFigure((AttributeKeys.Orientation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null value not allowed for AttributeKey orientation
         //
         verifyException("org.jhotdraw.draw.AttributeKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertEquals(0, bezierPath0.getWindingRule());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(0.0, 0.0, 0.0, 0.0, attributeKeys_Orientation0);
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertEquals(1, BezierPath.C1_MASK);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertEquals(3, bezierPath0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertEquals(3, BezierPath.C1C2_MASK);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertTrue(bezierPath0.isClosed());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      DefaultDrawingView defaultDrawingView0 = new DefaultDrawingView();
      Point point0 = new Point();
      Point2D.Double point2D_Double0 = defaultDrawingView0.viewToDrawing(point0);
      triangleFigure0.setBounds(point2D_Double0, point2D_Double0);
      assertTrue(triangleFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getDrawingArea();
      assertEquals((-2.5), rectangle2D_Double0.y, 0.01);
      assertEquals(5.0, rectangle2D_Double0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      Point2D.Double point2D_Double0 = lineConnectionFigure0.getStartPoint();
      boolean boolean0 = triangleFigure0.contains(point2D_Double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(180.0, (-1.0), 0.0, 0.0, attributeKeys_Orientation0);
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertEquals(3, bezierPath0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH;
      TriangleFigure triangleFigure0 = new TriangleFigure(0.0, 1410.15996, 1410.15996, 1410.15996, attributeKeys_Orientation0);
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertEquals(1, BezierPath.C1_MASK);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(0.1, 0.0, 0.0, 0.0, attributeKeys_Orientation0);
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat();
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) quadTreeDrawing0, (List<Figure>) null, 0.1, true);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      triangleFigure0.drawStroke(sunGraphics2D0);
      assertEquals(0, sunGraphics2D0.strokeHint);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertTrue(bezierPath0.isClosed());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(0.1, 0.0, 0.0, 0.0, attributeKeys_Orientation0);
      Collection<Handle> collection0 = triangleFigure0.createHandles(0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure(18.0, (-3637.60445681549), (-3637.60445681549), 18.0);
      Collection<Handle> collection0 = triangleFigure0.createHandles(61);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      // Undeclared exception!
      try { 
        triangleFigure0.drawFill((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)triangleFigure0.getTransformRestoreData();
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(0.0, 0.0, 0.0, 0.0, attributeKeys_Orientation0);
      RelativeDecoratorLocator relativeDecoratorLocator0 = new RelativeDecoratorLocator();
      Point2D.Double point2D_Double0 = relativeDecoratorLocator0.locate((Figure) triangleFigure0);
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      ChopTriangleConnector chopTriangleConnector0 = (ChopTriangleConnector)triangleFigure0.findConnector(point2D_Double0, labeledLineConnectionFigure0);
      assertFalse(chopTriangleConnector0.isConnectToDecorator());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      // Undeclared exception!
      try { 
        triangleFigure0.drawStroke((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getBounds();
      triangleFigure0.restoreTransformTo(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(0.0, 0.0, 0.0, 0.0, attributeKeys_Orientation0);
      RelativeDecoratorLocator relativeDecoratorLocator0 = new RelativeDecoratorLocator();
      Point2D.Double point2D_Double0 = relativeDecoratorLocator0.locate((Figure) triangleFigure0);
      Point2D.Double point2D_Double1 = triangleFigure0.chop(point2D_Double0);
      assertEquals((-1.0), point2D_Double1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      EllipseFigure ellipseFigure0 = new EllipseFigure(0.0, 161.682, 2722.072136937719, 0.017453292519943295);
      ChopTriangleConnector chopTriangleConnector0 = new ChopTriangleConnector();
      Connector connector0 = ellipseFigure0.findCompatibleConnector(chopTriangleConnector0, false);
      ChopTriangleConnector chopTriangleConnector1 = (ChopTriangleConnector)triangleFigure0.findCompatibleConnector(connector0, true);
      assertFalse(chopTriangleConnector1.isConnectToDecorator());
  }
}
