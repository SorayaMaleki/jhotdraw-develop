/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 02 11:54:02 GMT 2021
 */

package org.jhotdraw.draw.figure;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.font.TextLayout;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jhotdraw.draw.GridConstrainer;
import org.jhotdraw.draw.TranslationDirection;
import org.jhotdraw.draw.figure.Figure;
import org.jhotdraw.draw.figure.LabelFigure;
import org.jhotdraw.draw.figure.LabeledLineConnectionFigure;
import org.jhotdraw.draw.figure.LineConnectionFigure;
import org.jhotdraw.draw.figure.TextFigure;
import org.jhotdraw.draw.figure.TextHolderFigure;
import org.jhotdraw.draw.handle.BezierOutlineHandle;
import org.jhotdraw.draw.locator.BezierLabelLocator;
import org.jhotdraw.draw.locator.FontSizeLocator;
import org.jhotdraw.draw.tool.Tool;
import org.jhotdraw.geom.Dimension2DDouble;
import org.jhotdraw.xml.DOMInput;
import org.jhotdraw.xml.DOMOutput;
import org.jhotdraw.xml.DefaultDOMFactory;
import org.jhotdraw.xml.JavaxDOMOutput;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextFigure_ESTest extends TextFigure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure();
      Point2D.Double point2D_Double0 = new Point2D.Double(640.25268360189, 20.0);
      textFigure0.setBounds(point2D_Double0, point2D_Double0);
      double double0 = textFigure0.getBaseline();
      assertEquals("Text", textFigure0.getText());
      assertTrue(textFigure0.isEditable());
      assertEquals(12.064453125, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure("Drawing-Clip");
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 12.0F);
      Point2D.Double point2D_Double1 = textFigure0.origin;
      textFigure0.setBounds(point2D_Double0, point2D_Double1);
      assertEquals("Drawing-Clip", textFigure0.getText());
      assertTrue(textFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure();
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(1071.2460582, 1071.2460582);
      textFigure0.transform(affineTransform0);
      assertTrue(textFigure0.isEditable());
      assertEquals("Text", textFigure0.getText());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure("");
      Object object0 = textFigure0.getTransformRestoreData();
      textFigure0.restoreTransformTo(object0);
      assertEquals("", textFigure0.getText());
      assertTrue(textFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure();
      labelFigure0.isEditable();
      assertEquals("Label", labelFigure0.getText());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure("Drawing-Clip");
      String string0 = textFigure0.getText();
      assertEquals("Drawing-Clip", string0);
      assertTrue(textFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure();
      labelFigure0.setVisible(false);
      TextHolderFigure textHolderFigure0 = labelFigure0.getLabelFor();
      assertEquals("Label", textHolderFigure0.getText());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure("");
      labelFigure0.setRemovable(false);
      TextHolderFigure textHolderFigure0 = labelFigure0.getLabelFor();
      assertEquals("", textHolderFigure0.getText());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure();
      textFigure0.setConnectable(false);
      TextHolderFigure textHolderFigure0 = textFigure0.getLabelFor();
      assertEquals("Text", textHolderFigure0.getText());
      assertTrue(textHolderFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure();
      textFigure0.setFontSize(0.0F);
      textFigure0.getLabelFor();
      assertEquals(0.0F, textFigure0.getFontSize(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure((String) null);
      Rectangle2D.Double rectangle2D_Double0 = textFigure0.getFigureDrawingArea();
      assertTrue(textFigure0.isEditable());
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(14.583984375, rectangle2D_Double0.height, 0.01);
      assertEquals(4.21875, rectangle2D_Double0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure("Drawing-Clip");
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 12.0F);
      point2D_Double0.setLocation(18.548828125, (double) 12.0F);
      textFigure0.setBounds(point2D_Double0, point2D_Double0);
      Rectangle2D.Double rectangle2D_Double0 = textFigure0.getFigureDrawingArea();
      assertEquals(16.548828125, rectangle2D_Double0.x, 0.01);
      assertTrue(textFigure0.isEditable());
      assertEquals(10.0, rectangle2D_Double0.y, 0.01);
      assertEquals(81.6484375, rectangle2D_Double0.width, 0.01);
      assertEquals(28.548828125, rectangle2D_Double0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure("n:7O#{ 1l^/}C");
      FontSizeLocator fontSizeLocator0 = new FontSizeLocator();
      Point2D.Double point2D_Double0 = fontSizeLocator0.locate((Figure) textFigure0, (Figure) textFigure0);
      textFigure0.setBounds(point2D_Double0, point2D_Double0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      
      Rectangle2D.Double rectangle2D_Double0 = textFigure0.getBounds();
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertTrue(textFigure0.isEditable());
      assertEquals(19.2919921875, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(93.9609375, rectangle2D_Double0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure("");
      labelFigure0.setRemovable(false);
      TextFigure textFigure0 = labelFigure0.clone();
      assertEquals("", textFigure0.getText());
      assertNotSame(textFigure0, labelFigure0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure("2_wY");
      TextFigure textFigure1 = textFigure0.clone();
      assertEquals("2_wY", textFigure1.getText());
      assertNotSame(textFigure1, textFigure0);
      assertTrue(textFigure1.isEditable());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure("");
      DefaultDOMFactory defaultDOMFactory0 = new DefaultDOMFactory();
      JavaxDOMOutput javaxDOMOutput0 = new JavaxDOMOutput(defaultDOMFactory0);
      // Undeclared exception!
      try { 
        labelFigure0.write(javaxDOMOutput0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.sun.org.apache.xerces.internal.dom.DocumentImpl cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.jhotdraw.xml.JavaxDOMOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure("");
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      BezierOutlineHandle bezierOutlineHandle0 = new BezierOutlineHandle(lineConnectionFigure0, false);
      // Undeclared exception!
      try { 
        labelFigure0.restoreTransformTo(bezierOutlineHandle0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jhotdraw.draw.handle.BezierOutlineHandle cannot be cast to java.awt.geom.Point2D$Double
         //
         verifyException("org.jhotdraw.draw.figure.TextFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure();
      // Undeclared exception!
      try { 
        textFigure0.getTool((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.RectangularShape", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure("");
      // Undeclared exception!
      try { 
        labelFigure0.figureContains((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.RectangularShape", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure();
      BezierLabelLocator bezierLabelLocator0 = new BezierLabelLocator();
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Point2D.Double point2D_Double0 = bezierLabelLocator0.getRelativeLabelPoint(labeledLineConnectionFigure0, labeledLineConnectionFigure0);
      boolean boolean0 = textFigure0.figureContains(point2D_Double0);
      assertEquals("Text", textFigure0.getText());
      assertTrue(boolean0);
      assertTrue(textFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure("");
      labelFigure0.setText("");
      assertEquals("", labelFigure0.getText());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure("");
      String string0 = labelFigure0.getText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure();
      textFigure0.getInsets();
      assertTrue(textFigure0.isEditable());
      assertEquals("Text", textFigure0.getText());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure("");
      labelFigure0.getFont();
      assertEquals("", labelFigure0.getText());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure("Drawing-Clip");
      textFigure0.getFontSize();
      assertTrue(textFigure0.isEditable());
      assertEquals("Drawing-Clip", textFigure0.getText());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure();
      GridConstrainer gridConstrainer0 = new GridConstrainer();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      TranslationDirection translationDirection0 = TranslationDirection.NORTH_EAST;
      Figure[] figureArray0 = new Figure[1];
      Point2D.Double point2D_Double1 = gridConstrainer0.translatePoint(point2D_Double0, translationDirection0, figureArray0);
      Tool tool0 = textFigure0.getTool(point2D_Double1);
      assertEquals("Text", textFigure0.getText());
      assertTrue(textFigure0.isEditable());
      assertNull(tool0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure();
      assertTrue(textFigure0.isEditable());
      
      textFigure0.setEditable(false);
      assertFalse(textFigure0.isEditable());
      
      textFigure0.getTool((Point2D.Double) null);
      assertEquals("Text", textFigure0.getText());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure();
      textFigure0.createHandles(0);
      assertEquals("Text", textFigure0.getText());
      assertTrue(textFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure();
      textFigure0.createHandles((-2416));
      assertEquals("Text", textFigure0.getText());
      assertTrue(textFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure("");
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labelFigure0.setDecorator(labeledLineConnectionFigure0);
      assertEquals("", labelFigure0.getText());
      assertFalse(labelFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure("");
      Rectangle2D.Double rectangle2D_Double0 = labelFigure0.getBounds();
      assertFalse(labelFigure0.isEditable());
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(4.21875, rectangle2D_Double0.width, 0.01);
      assertEquals(14.583984375, rectangle2D_Double0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure((String) null);
      TextLayout textLayout0 = labelFigure0.getTextLayout();
      assertEquals(1, textLayout0.getCharacterCount());
      assertFalse(labelFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure("Drawing-Clip");
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 12.0F);
      Tool tool0 = textFigure0.getTool(point2D_Double0);
      assertEquals("Drawing-Clip", textFigure0.getText());
      assertNotNull(tool0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure();
      // Undeclared exception!
      try { 
        labelFigure0.drawText((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TextFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure("!");
      int int0 = textFigure0.getTabSize();
      assertTrue(textFigure0.isEditable());
      assertEquals(8, int0);
      assertEquals("!", textFigure0.getText());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure();
      textFigure0.drawStroke((Graphics2D) null);
      assertTrue(textFigure0.isEditable());
      assertEquals("Text", textFigure0.getText());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure();
      textFigure0.getTextColor();
      assertTrue(textFigure0.isEditable());
      assertEquals("Text", textFigure0.getText());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure();
      Dimension2DDouble dimension2DDouble0 = labelFigure0.getPreferredSize();
      assertFalse(labelFigure0.isEditable());
      assertEquals(31.8046875, dimension2DDouble0.width, 0.01);
      assertEquals(14.583984375, dimension2DDouble0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure();
      // Undeclared exception!
      try { 
        labelFigure0.transform((AffineTransform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TextFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure("Name");
      // Undeclared exception!
      try { 
        textFigure0.read((DOMInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TextFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure("Drawing-Clip");
      textFigure0.invalidate();
      assertTrue(textFigure0.isEditable());
      assertEquals("Drawing-Clip", textFigure0.getText());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure("");
      // Undeclared exception!
      try { 
        labelFigure0.restoreTransformTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TextFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure("TextFigure.defaultText");
      labelFigure0.drawFill((Graphics2D) null);
      assertEquals("TextFigure.defaultText", labelFigure0.getText());
      assertFalse(labelFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure("!");
      FontSizeLocator fontSizeLocator0 = new FontSizeLocator();
      Point2D.Double point2D_Double0 = fontSizeLocator0.locate((Figure) textFigure0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      
      point2D_Double0.setLocation(930.296522428, 12.0);
      boolean boolean0 = textFigure0.figureContains(point2D_Double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure("Drawing-Clip");
      textFigure0.validate();
      assertEquals("Drawing-Clip", textFigure0.getText());
      assertTrue(textFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure();
      // Undeclared exception!
      try { 
        labelFigure0.write((DOMOutput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TextFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure();
      labelFigure0.getFillColor();
      assertEquals("Label", labelFigure0.getText());
      assertFalse(labelFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure("Drawing-Clip");
      boolean boolean0 = textFigure0.isEditable();
      assertEquals("Drawing-Clip", textFigure0.getText());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure();
      double double0 = textFigure0.getBaseline();
      assertTrue(textFigure0.isEditable());
      assertEquals(12.064453125, double0, 0.01);
      assertEquals("Text", textFigure0.getText());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure("!");
      int int0 = textFigure0.getTextColumns();
      assertTrue(textFigure0.isEditable());
      assertEquals("!", textFigure0.getText());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure("Drawing-Clip");
      Rectangle2D.Double rectangle2D_Double0 = textFigure0.getFigureDrawingArea();
      assertEquals(81.6484375, rectangle2D_Double0.width, 0.01);
      assertTrue(textFigure0.isEditable());
      assertEquals(18.548828125, rectangle2D_Double0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure("Drawing-Clip");
      boolean boolean0 = textFigure0.isTextOverflow();
      assertEquals("Drawing-Clip", textFigure0.getText());
      assertTrue(textFigure0.isEditable());
      assertFalse(boolean0);
  }
}
