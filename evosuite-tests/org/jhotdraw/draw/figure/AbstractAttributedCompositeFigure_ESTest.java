/*
 * This file was automatically generated by EvoSuite
 * Sat May 29 14:10:25 GMT 2021
 */

package org.jhotdraw.draw.figure;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Graphics2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jhotdraw.draw.AttributeKey;
import org.jhotdraw.draw.AttributeKeys;
import org.jhotdraw.draw.DefaultDrawing;
import org.jhotdraw.draw.Drawing;
import org.jhotdraw.draw.QuadTreeDrawing;
import org.jhotdraw.draw.figure.AbstractAttributedCompositeFigure;
import org.jhotdraw.draw.figure.BezierFigure;
import org.jhotdraw.draw.figure.DiamondFigure;
import org.jhotdraw.draw.figure.EllipseFigure;
import org.jhotdraw.draw.figure.Figure;
import org.jhotdraw.draw.figure.LabeledLineConnectionFigure;
import org.jhotdraw.draw.figure.LineConnectionFigure;
import org.jhotdraw.draw.figure.LineFigure;
import org.jhotdraw.draw.figure.ListFigure;
import org.jhotdraw.draw.figure.RectangleFigure;
import org.jhotdraw.draw.figure.TextAreaFigure;
import org.jhotdraw.draw.figure.TextFigure;
import org.jhotdraw.draw.figure.TriangleFigure;
import org.jhotdraw.draw.io.ImageOutputFormat;
import org.jhotdraw.xml.DOMFactory;
import org.jhotdraw.xml.DOMInput;
import org.jhotdraw.xml.DOMOutput;
import org.jhotdraw.xml.JavaxDOMOutput;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractAttributedCompositeFigure_ESTest extends AbstractAttributedCompositeFigure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      JavaxDOMOutput javaxDOMOutput0 = new JavaxDOMOutput((DOMFactory) null);
      defaultDrawing0.write(javaxDOMOutput0);
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Class<DiamondFigure> class0 = DiamondFigure.class;
      AttributeKey<DiamondFigure> attributeKey0 = new AttributeKey<DiamondFigure>("", class0);
      DiamondFigure diamondFigure0 = new DiamondFigure();
      defaultDrawing0.set(attributeKey0, diamondFigure0);
      assertTrue(defaultDrawing0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      Rectangle2D.Double rectangle2D_Double0 = textAreaFigure0.getBounds();
      triangleFigure0.setBounds(rectangle2D_Double0);
      quadTreeDrawing0.basicAdd(0, (Figure) triangleFigure0);
      Rectangle2D.Double rectangle2D_Double1 = quadTreeDrawing0.getFigureDrawBounds();
      assertNotNull(rectangle2D_Double1);
      assertEquals(5.1, rectangle2D_Double1.width, 0.01);
      assertEquals(5.1, rectangle2D_Double1.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      Class<DiamondFigure> class0 = DiamondFigure.class;
      AttributeKey<DiamondFigure> attributeKey0 = new AttributeKey<DiamondFigure>("F7~i?yj$_eGiF}h6", class0, (DiamondFigure) null, false);
      DiamondFigure diamondFigure0 = quadTreeDrawing0.get(attributeKey0);
      assertNull(diamondFigure0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      quadTreeDrawing0.basicAdd(0, (Figure) triangleFigure0);
      AbstractAttributedCompositeFigure abstractAttributedCompositeFigure0 = quadTreeDrawing0.clone();
      assertNotSame(abstractAttributedCompositeFigure0, quadTreeDrawing0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      JavaxDOMOutput javaxDOMOutput0 = new JavaxDOMOutput((DOMFactory) null);
      // Undeclared exception!
      try { 
        ((AbstractAttributedCompositeFigure)quadTreeDrawing0).writeAttributes(javaxDOMOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.xml.JavaxDOMOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      // Undeclared exception!
      try { 
        quadTreeDrawing0.write((DOMOutput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AbstractDrawing", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      LineFigure lineFigure0 = new LineFigure();
      Point2D.Double point2D_Double0 = lineFigure0.getOutermostPoint();
      // Undeclared exception!
      try { 
        quadTreeDrawing0.restoreAttributesTo(point2D_Double0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.geom.Point2D$Double cannot be cast to java.util.LinkedList
         //
         verifyException("org.jhotdraw.draw.figure.AbstractAttributedCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      // Undeclared exception!
      try { 
        defaultDrawing0.read((DOMInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AbstractDrawing", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      // Undeclared exception!
      try { 
        quadTreeDrawing0.drawFigure((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractAttributedCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Class<LineFigure> class0 = LineFigure.class;
      AttributeKey<LineFigure> attributeKey0 = new AttributeKey<LineFigure>((String) null, class0);
      // Undeclared exception!
      try { 
        defaultDrawing0.get(attributeKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Class<RectangleFigure> class0 = RectangleFigure.class;
      RectangleFigure rectangleFigure0 = new RectangleFigure(764.199605738, (-774.45), (-774.45), 800.0);
      AttributeKey<RectangleFigure> attributeKey0 = new AttributeKey<RectangleFigure>("moveTo only allowed when empty", class0, rectangleFigure0);
      attributeKey0.setClone(defaultDrawing0, rectangleFigure0);
      defaultDrawing0.removeAttribute(attributeKey0);
      assertFalse(defaultDrawing0.isDebugMode());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      Class<BezierFigure> class0 = BezierFigure.class;
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      AttributeKey<BezierFigure> attributeKey0 = new AttributeKey<BezierFigure>("<!DOCTYPE ", class0, lineConnectionFigure0);
      quadTreeDrawing0.removeAttribute(attributeKey0);
      assertEquals(0, quadTreeDrawing0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Class<EllipseFigure> class0 = EllipseFigure.class;
      EllipseFigure ellipseFigure0 = new EllipseFigure();
      AttributeKey<EllipseFigure> attributeKey0 = new AttributeKey<EllipseFigure>("", class0, ellipseFigure0, true);
      defaultDrawing0.setAttributeEnabled(attributeKey0, false);
      AbstractAttributedCompositeFigure abstractAttributedCompositeFigure0 = defaultDrawing0.clone();
      assertNotSame(abstractAttributedCompositeFigure0, defaultDrawing0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      double double0 = defaultDrawing0.getStrokeMiterLimitFactor();
      assertEquals(3.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      LinkedList linkedList0 = (LinkedList)defaultDrawing0.getAttributesRestoreData();
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Class<TriangleFigure> class0 = TriangleFigure.class;
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(929.98749, (-880.2), 3006.8251, 0.0, attributeKeys_Orientation0);
      AttributeKey<TriangleFigure> attributeKey0 = new AttributeKey<TriangleFigure>((String) null, class0, triangleFigure0, true);
      // Undeclared exception!
      try { 
        defaultDrawing0.set(attributeKey0, triangleFigure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Class<LabeledLineConnectionFigure> class0 = LabeledLineConnectionFigure.class;
      AttributeKey<LabeledLineConnectionFigure> attributeKey0 = new AttributeKey<LabeledLineConnectionFigure>("", class0);
      boolean boolean0 = defaultDrawing0.isAttributeEnabled((AttributeKey<?>) attributeKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Class<EllipseFigure> class0 = EllipseFigure.class;
      AttributeKey<EllipseFigure> attributeKey0 = new AttributeKey<EllipseFigure>("", class0, (EllipseFigure) null, false);
      defaultDrawing0.setAttributeEnabled(attributeKey0, true);
      assertEquals("", attributeKey0.getKey());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Class<Integer> class0 = Integer.class;
      AttributeKey<Integer> attributeKey0 = new AttributeKey<Integer>((String) null, class0);
      // Undeclared exception!
      try { 
        defaultDrawing0.setAttributeEnabled(attributeKey0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Map<AttributeKey<?>, Object> map0 = defaultDrawing0.getAttributes();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat("", "", "", 1);
      LinkedList<ListFigure> linkedList0 = new LinkedList<ListFigure>();
      List<Figure> list0 = quadTreeDrawing0.sort(linkedList0);
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) quadTreeDrawing0, list0, (double) 1, false);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      quadTreeDrawing0.drawFigure(sunGraphics2D0);
      assertEquals(0, sunGraphics2D0.compositeState);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      BasicStroke basicStroke0 = (BasicStroke)quadTreeDrawing0.getStroke();
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      Rectangle2D.Double rectangle2D_Double0 = quadTreeDrawing0.getFigureDrawBounds();
      assertEquals((-2.5), rectangle2D_Double0.x, 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals((-2.5), rectangle2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Class<TextFigure> class0 = TextFigure.class;
      TextFigure textFigure0 = new TextFigure("ojR7");
      AttributeKey<TextFigure> attributeKey0 = new AttributeKey<TextFigure>("ojR7", class0, textFigure0, true);
      boolean boolean0 = defaultDrawing0.hasAttribute(attributeKey0);
      assertFalse(boolean0);
  }
}
