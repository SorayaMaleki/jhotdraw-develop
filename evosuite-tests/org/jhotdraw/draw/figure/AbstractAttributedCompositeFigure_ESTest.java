/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 01 05:59:32 GMT 2021
 */

package org.jhotdraw.draw.figure;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jhotdraw.draw.AttributeKey;
import org.jhotdraw.draw.DefaultDrawing;
import org.jhotdraw.draw.Drawing;
import org.jhotdraw.draw.QuadTreeDrawing;
import org.jhotdraw.draw.figure.AbstractAttributedCompositeFigure;
import org.jhotdraw.draw.figure.EllipseFigure;
import org.jhotdraw.draw.figure.Figure;
import org.jhotdraw.draw.figure.GroupFigure;
import org.jhotdraw.draw.figure.LabeledLineConnectionFigure;
import org.jhotdraw.draw.figure.LineConnectionFigure;
import org.jhotdraw.draw.figure.LineFigure;
import org.jhotdraw.draw.figure.RectangleFigure;
import org.jhotdraw.draw.figure.RoundRectangleFigure;
import org.jhotdraw.draw.handle.Handle;
import org.jhotdraw.draw.io.ImageOutputFormat;
import org.jhotdraw.geom.Dimension2DDouble;
import org.jhotdraw.xml.DOMInput;
import org.jhotdraw.xml.DOMOutput;
import org.jhotdraw.xml.DefaultDOMFactory;
import org.jhotdraw.xml.JavaxDOMOutput;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractAttributedCompositeFigure_ESTest extends AbstractAttributedCompositeFigure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      DefaultDOMFactory defaultDOMFactory0 = new DefaultDOMFactory();
      JavaxDOMOutput javaxDOMOutput0 = new JavaxDOMOutput(defaultDOMFactory0);
      defaultDrawing0.write(javaxDOMOutput0);
      assertEquals(0, defaultDrawing0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      Class<Integer> class0 = Integer.class;
      AttributeKey<Integer> attributeKey0 = new AttributeKey<Integer>("|", class0);
      Integer integer0 = quadTreeDrawing0.get(attributeKey0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      // Undeclared exception!
      try { 
        defaultDrawing0.write((DOMOutput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AbstractDrawing", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Class<Dimension2DDouble> class0 = Dimension2DDouble.class;
      AttributeKey<Dimension2DDouble> attributeKey0 = new AttributeKey<Dimension2DDouble>((String) null, class0);
      // Undeclared exception!
      try { 
        defaultDrawing0.setAttributeEnabled(attributeKey0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      Collection<Handle> collection0 = quadTreeDrawing0.createHandles((-1603));
      // Undeclared exception!
      try { 
        quadTreeDrawing0.restoreAttributesTo(collection0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      // Undeclared exception!
      try { 
        quadTreeDrawing0.restoreAttributesTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractAttributedCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      // Undeclared exception!
      try { 
        defaultDrawing0.read((DOMInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AbstractDrawing", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      // Undeclared exception!
      try { 
        quadTreeDrawing0.drawFigure((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractAttributedCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      LinkedList linkedList0 = (LinkedList)defaultDrawing0.getAttributesRestoreData();
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Class<String> class0 = String.class;
      AttributeKey<String> attributeKey0 = new AttributeKey<String>("!", class0, "!", true);
      defaultDrawing0.set(attributeKey0, "m(%6av1$");
      assertTrue(attributeKey0.isNullValueAllowed());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      Map<AttributeKey<?>, Object> map0 = quadTreeDrawing0.getAttributes();
      // Undeclared exception!
      try { 
        quadTreeDrawing0.restoreAttributesTo(map0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.LinkedList
         //
         verifyException("org.jhotdraw.draw.figure.AbstractAttributedCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      Class<LabeledLineConnectionFigure> class0 = LabeledLineConnectionFigure.class;
      AttributeKey<LabeledLineConnectionFigure> attributeKey0 = new AttributeKey<LabeledLineConnectionFigure>("<Ld", class0);
      boolean boolean0 = quadTreeDrawing0.hasAttribute(attributeKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      Class<RoundRectangleFigure> class0 = RoundRectangleFigure.class;
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure(0.0, 0.0, 0.0, 1437.06320566796);
      AttributeKey<RoundRectangleFigure> attributeKey0 = new AttributeKey<RoundRectangleFigure>("sIke)j\"[-", class0, roundRectangleFigure0, true);
      RoundRectangleFigure roundRectangleFigure1 = quadTreeDrawing0.get(attributeKey0);
      assertEquals(20.0, roundRectangleFigure1.getArcHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      Class<Short> class0 = Short.class;
      Short short0 = new Short((short)0);
      AttributeKey<Short> attributeKey0 = new AttributeKey<Short>("szahmah1]]tyc.vUP", class0, short0, false);
      quadTreeDrawing0.removeAttribute(attributeKey0);
      assertTrue(quadTreeDrawing0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      Class<DefaultDrawing> class0 = DefaultDrawing.class;
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      AttributeKey<DefaultDrawing> attributeKey0 = new AttributeKey<DefaultDrawing>("g*2", class0, defaultDrawing0, false);
      quadTreeDrawing0.setAttributeEnabled(attributeKey0, true);
      AbstractAttributedCompositeFigure abstractAttributedCompositeFigure0 = quadTreeDrawing0.clone();
      assertNotSame(abstractAttributedCompositeFigure0, quadTreeDrawing0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      QuadTreeDrawing quadTreeDrawing1 = quadTreeDrawing0.clone();
      assertNotSame(quadTreeDrawing1, quadTreeDrawing0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      double double0 = quadTreeDrawing0.getStrokeMiterLimitFactor();
      assertEquals(3.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      RectangleFigure rectangleFigure0 = new RectangleFigure();
      Rectangle2D.Double rectangle2D_Double0 = rectangleFigure0.getDrawingArea();
      List<Figure> list0 = defaultDrawing0.findFiguresWithin(rectangle2D_Double0);
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat("", "", "", 3700);
      LinkedList<Figure> linkedList0 = new LinkedList<Figure>(list0);
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) defaultDrawing0, (List<Figure>) linkedList0, 180.0, false);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      quadTreeDrawing0.basicAdd(0, (Figure) defaultDrawing0);
      quadTreeDrawing0.drawFigure(graphics2D0);
      assertEquals(1, quadTreeDrawing0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Class<EllipseFigure> class0 = EllipseFigure.class;
      EllipseFigure ellipseFigure0 = new EllipseFigure(0.0, 4477.43248139, 0.0, 4477.43248139);
      Class<GroupFigure> class1 = GroupFigure.class;
      AttributeKey<GroupFigure> attributeKey0 = new AttributeKey<GroupFigure>("~s$n+Gc2", class1);
      defaultDrawing0.setAttributeEnabled(attributeKey0, false);
      AttributeKey<EllipseFigure> attributeKey1 = new AttributeKey<EllipseFigure>("UXE:'!oq+<\"{/", class0, ellipseFigure0, false);
      defaultDrawing0.set(attributeKey1, ellipseFigure0);
      assertFalse(attributeKey1.isNullValueAllowed());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      Class<Short> class0 = Short.class;
      Short short0 = new Short((short)0);
      AttributeKey<Short> attributeKey0 = new AttributeKey<Short>("szahmah1]]tyc.vUP", class0, short0, false);
      quadTreeDrawing0.setAttributeEnabled((AttributeKey<?>) null, true);
      boolean boolean0 = quadTreeDrawing0.isAttributeEnabled((AttributeKey<?>) attributeKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      Class<LineFigure> class0 = LineFigure.class;
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      AttributeKey<LineFigure> attributeKey0 = new AttributeKey<LineFigure>("_YX.Z#", class0, lineConnectionFigure0);
      boolean boolean0 = quadTreeDrawing0.isAttributeEnabled((AttributeKey<?>) attributeKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Rectangle2D.Double rectangle2D_Double0 = defaultDrawing0.getFigureDrawBounds();
      assertNotNull(rectangle2D_Double0);
      assertEquals(5.0, rectangle2D_Double0.width, 0.01);
      assertEquals(5.0, rectangle2D_Double0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      BasicStroke basicStroke0 = (BasicStroke)defaultDrawing0.getStroke();
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Class<Long> class0 = Long.class;
      AttributeKey<Long> attributeKey0 = new AttributeKey<Long>("%HEQnI~Y", class0);
      Long long0 = new Long(0L);
      attributeKey0.setUndoable(defaultDrawing0, long0);
      defaultDrawing0.removeAttribute(attributeKey0);
      assertTrue(defaultDrawing0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Class<Object> class0 = Object.class;
      Byte byte0 = Byte.valueOf((byte)0);
      AttributeKey<Object> attributeKey0 = new AttributeKey<Object>((String) null, class0, byte0);
      // Undeclared exception!
      try { 
        defaultDrawing0.removeAttribute(attributeKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKey", e);
      }
  }
}
