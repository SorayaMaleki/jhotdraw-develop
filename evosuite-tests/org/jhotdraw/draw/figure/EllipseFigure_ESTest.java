/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 01 05:33:28 GMT 2021
 */

package org.jhotdraw.draw.figure;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jhotdraw.draw.DefaultDrawing;
import org.jhotdraw.draw.Drawing;
import org.jhotdraw.draw.QuadTreeDrawing;
import org.jhotdraw.draw.connector.ChopEllipseConnector;
import org.jhotdraw.draw.figure.EllipseFigure;
import org.jhotdraw.draw.figure.Figure;
import org.jhotdraw.draw.figure.GroupFigure;
import org.jhotdraw.draw.figure.LabelFigure;
import org.jhotdraw.draw.figure.LabeledLineConnectionFigure;
import org.jhotdraw.draw.io.ImageOutputFormat;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EllipseFigure_ESTest extends EllipseFigure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure((-1696.4676041619684), 0.0, 0.0, 0.0);
      AffineTransform affineTransform0 = new AffineTransform(0.0, 3048.6, (-185.48923), 0.8999999761581421, (-1442.2605650003568), (-1696.4676041619684));
      ellipseFigure0.transform(affineTransform0);
      assertEquals(3048.6, affineTransform0.getShearY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure((-3.14), 18.0, (-2667.00111682), (-1475.850790969));
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat();
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      List<Figure> list0 = defaultDrawing0.findFiguresWithin((Rectangle2D.Double) null);
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) quadTreeDrawing0, list0, 0.14019472612085337, false);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      ellipseFigure0.drawStroke(sunGraphics2D0);
      assertEquals(0, sunGraphics2D0.strokeState);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure((-3.14), 18.0, (-2667.00111682), (-1475.850790969));
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat();
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      List<Figure> list0 = defaultDrawing0.findFiguresWithin((Rectangle2D.Double) null);
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) quadTreeDrawing0, list0, 0.14019472612085337, false);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ellipseFigure0.drawFill(graphics2D0);
      assertEquals(3.0, ellipseFigure0.getStrokeMiterLimitFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Point2D.Double point2D_Double0 = labeledLineConnectionFigure0.getPoint(0);
      ellipseFigure0.setBounds(point2D_Double0, point2D_Double0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure();
      Ellipse2D.Double ellipse2D_Double0 = ellipseFigure0.ellipse;
      ellipseFigure0.restoreTransformTo(ellipse2D_Double0);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure(2.0, 2.0, (-2667.00111682), (-2667.00111682));
      Rectangle2D.Double rectangle2D_Double0 = ellipseFigure0.getDrawingArea();
      assertEquals((-2663.50111682), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-2663.50111682), rectangle2D_Double0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure();
      Rectangle2D.Double rectangle2D_Double0 = ellipseFigure0.getDrawingArea();
      assertEquals(3.0, rectangle2D_Double0.height, 0.01);
      assertEquals(3.0, rectangle2D_Double0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure(0.0, 347.87478285, (-1532.011016), 2125.91);
      Rectangle2D.Double rectangle2D_Double0 = ellipseFigure0.getDrawingArea();
      assertEquals(2475.28478285, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-1530.511016), rectangle2D_Double0.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure((-1746.53475), (-1746.53475), (-1746.53475), (-1746.53475));
      Rectangle2D.Double rectangle2D_Double0 = ellipseFigure0.getBounds();
      assertEquals((-3493.0695), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-3493.0695), rectangle2D_Double0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure(2152.3, 436.0941624, 2152.3, 3120.4);
      Rectangle2D.Double rectangle2D_Double0 = ellipseFigure0.getBounds();
      assertEquals(4304.6, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1996.2941624, rectangle2D_Double0.getCenterY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure((-1696.4676041619684), 0.0, 0.0, 0.0);
      Rectangle2D.Double rectangle2D_Double0 = ellipseFigure0.getBounds();
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals((-1696.4676041619684), rectangle2D_Double0.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure();
      LabelFigure labelFigure0 = new LabelFigure();
      Point2D.Double point2D_Double0 = labelFigure0.origin;
      boolean boolean0 = ellipseFigure0.contains(point2D_Double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure((-1606.3607979409576), (-1606.3607979409576), 2459.35064, (-1606.3607979409576));
      Point2D.Double point2D_Double0 = ellipseFigure0.getEndPoint();
      ellipseFigure0.contains(point2D_Double0);
      assertEquals(852.9898420590425, point2D_Double0.x, 0.01);
      assertEquals((-3212.721595881915), point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure();
      ellipseFigure0.setVisible(false);
      EllipseFigure ellipseFigure1 = ellipseFigure0.clone();
      assertNotSame(ellipseFigure1, ellipseFigure0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure(2262.587, 2262.587, (-661.153223720878), 2262.587);
      ellipseFigure0.setSelectable(false);
      EllipseFigure ellipseFigure1 = ellipseFigure0.clone();
      assertNotSame(ellipseFigure1, ellipseFigure0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure();
      ellipseFigure0.setRemovable(false);
      EllipseFigure ellipseFigure1 = ellipseFigure0.clone();
      assertNotSame(ellipseFigure1, ellipseFigure0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure();
      ellipseFigure0.setConnectable(false);
      EllipseFigure ellipseFigure1 = ellipseFigure0.clone();
      assertNotSame(ellipseFigure1, ellipseFigure0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure();
      // Undeclared exception!
      try { 
        ellipseFigure0.transform((AffineTransform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.EllipseFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure();
      // Undeclared exception!
      try { 
        ellipseFigure0.restoreTransformTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.EllipseFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure((-63.721), 0.0, 0.0, (-63.721));
      // Undeclared exception!
      try { 
        ellipseFigure0.drawStroke((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure(0.0, 347.87478285, (-1532.011016), 2125.91);
      // Undeclared exception!
      try { 
        ellipseFigure0.drawFill((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure();
      // Undeclared exception!
      try { 
        ellipseFigure0.setBounds((Point2D.Double) null, (Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.EllipseFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure();
      Rectangle2D.Double rectangle2D_Double0 = ellipseFigure0.getBounds();
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure((-1606.360797940958), (-1606.360797940958), 2459.35064, (-1606.360797940958));
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat("org.jhotdraw.draw.figure.EllipseFigure", "org.jhotdraw.draw.figure.EllipseFigure", "org.jhotdraw.draw.figure.EllipseFigure", 896);
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      List<Figure> list0 = defaultDrawing0.getFiguresFrontToBack();
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) defaultDrawing0, list0, 3.0, false);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      ellipseFigure0.drawStroke(sunGraphics2D0);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure();
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat();
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      GroupFigure groupFigure0 = new GroupFigure();
      ArrayList<Figure> arrayList0 = groupFigure0.children;
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) quadTreeDrawing0, (List<Figure>) arrayList0, 0.0, false);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(0.0);
      ellipseFigure0.transform(affineTransform0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ellipseFigure0.drawStroke(graphics2D0);
      assertTrue(ellipseFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure();
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat();
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      GroupFigure groupFigure0 = new GroupFigure();
      ArrayList<Figure> arrayList0 = groupFigure0.children;
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) quadTreeDrawing0, (List<Figure>) arrayList0, 0.0, false);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(0.0);
      ellipseFigure0.transform(affineTransform0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      ellipseFigure0.drawFill(sunGraphics2D0);
      assertEquals(0, sunGraphics2D0.renderHint);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure();
      Ellipse2D.Double ellipse2D_Double0 = (Ellipse2D.Double)ellipseFigure0.getTransformRestoreData();
      ellipseFigure0.restoreTransformTo(ellipse2D_Double0);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure();
      // Undeclared exception!
      try { 
        ellipseFigure0.contains((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.RectangularShape", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure(2846.3638608578185, 2846.3638608578185, 2846.3638608578185, 2846.3638608578185);
      Rectangle2D.Double rectangle2D_Double0 = ellipseFigure0.getDrawingArea();
      assertEquals(5694.227721715637, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(5694.227721715637, rectangle2D_Double0.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure();
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat();
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      GroupFigure groupFigure0 = new GroupFigure();
      ArrayList<Figure> arrayList0 = groupFigure0.children;
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) quadTreeDrawing0, (List<Figure>) arrayList0, 0.0, false);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      ellipseFigure0.drawStroke(sunGraphics2D0);
      assertEquals((-1), sunGraphics2D0.pixel);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure();
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat();
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      GroupFigure groupFigure0 = new GroupFigure();
      ArrayList<Figure> arrayList0 = groupFigure0.children;
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) quadTreeDrawing0, (List<Figure>) arrayList0, 0.0, false);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      ellipseFigure0.drawFill(sunGraphics2D0);
      assertEquals(1, sunGraphics2D0.interpolationType);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      ChopEllipseConnector chopEllipseConnector0 = (ChopEllipseConnector)ellipseFigure0.findConnector((Point2D.Double) null, labeledLineConnectionFigure0);
      assertFalse(chopEllipseConnector0.isConnectToDecorator());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure();
      ChopEllipseConnector chopEllipseConnector0 = new ChopEllipseConnector(ellipseFigure0);
      ChopEllipseConnector chopEllipseConnector1 = (ChopEllipseConnector)ellipseFigure0.findCompatibleConnector(chopEllipseConnector0, false);
      assertFalse(chopEllipseConnector1.isConnectToDecorator());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure();
      // Undeclared exception!
      try { 
        ellipseFigure0.restoreTransformTo("liner");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.awt.geom.Ellipse2D$Double
         //
         verifyException("org.jhotdraw.draw.figure.EllipseFigure", e);
      }
  }
}
