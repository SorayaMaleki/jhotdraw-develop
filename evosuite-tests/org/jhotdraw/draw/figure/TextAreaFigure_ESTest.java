/*
 * This file was automatically generated by EvoSuite
 * Sat May 29 17:54:41 GMT 2021
 */

package org.jhotdraw.draw.figure;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jhotdraw.draw.DefaultDrawing;
import org.jhotdraw.draw.Drawing;
import org.jhotdraw.draw.QuadTreeDrawing;
import org.jhotdraw.draw.figure.Figure;
import org.jhotdraw.draw.figure.LineConnectionFigure;
import org.jhotdraw.draw.figure.LineFigure;
import org.jhotdraw.draw.figure.TextAreaFigure;
import org.jhotdraw.draw.figure.TextHolderFigure;
import org.jhotdraw.draw.io.ImageOutputFormat;
import org.jhotdraw.draw.locator.BezierLabelLocator;
import org.jhotdraw.draw.tool.Tool;
import org.jhotdraw.geom.Dimension2DDouble;
import org.jhotdraw.geom.Insets2D;
import org.jhotdraw.xml.DOMInput;
import org.jhotdraw.xml.DOMOutput;
import org.jhotdraw.xml.DefaultDOMFactory;
import org.jhotdraw.xml.JavaPrimitivesDOMFactory;
import org.jhotdraw.xml.JavaxDOMOutput;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextAreaFigure_ESTest extends TextAreaFigure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("");
      textAreaFigure0.createHandles((-352));
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      AffineTransform affineTransform0 = new AffineTransform(1922.6123628485, 0.0, (-312.494), 3548.1346678455, 1916.6883, 3548.1346678455);
      textAreaFigure0.transform(affineTransform0);
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("\t");
      Object object0 = textAreaFigure0.getTransformRestoreData();
      textAreaFigure0.restoreTransformTo(object0);
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure((String) null);
      String string0 = textAreaFigure0.getText();
      assertTrue(textAreaFigure0.isEditable());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("R7lqd~=10");
      String string0 = textAreaFigure0.getText();
      assertTrue(textAreaFigure0.isEditable());
      assertEquals("R7lqd~=10", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("N&wc 2fYnUe7CE'");
      textAreaFigure0.setRemovable(false);
      TextHolderFigure textHolderFigure0 = textAreaFigure0.getLabelFor();
      assertTrue(textHolderFigure0.isEditable());
      assertEquals(16, textHolderFigure0.getTextColumns());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("N&wc 2fYnUe7CE'");
      assertTrue(textAreaFigure0.isEditable());
      
      textAreaFigure0.setEditable(false);
      textAreaFigure0.getLabelFor();
      assertFalse(textAreaFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure((String) null);
      textAreaFigure0.setFontSize((-246.33965F));
      textAreaFigure0.getLabelFor();
      assertEquals((-246.33965F), textAreaFigure0.getFontSize(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      textAreaFigure0.setFontSize((-1192.771F));
      float float0 = textAreaFigure0.getFontSize();
      assertEquals((-1192.771F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure((String) null);
      textAreaFigure0.setFontSize((-246.33965F));
      textAreaFigure0.getFont();
      assertEquals((-246.33965F), textAreaFigure0.getFontSize(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      Point2D.Double point2D_Double0 = new Point2D.Double((-1053.46158928806), 1278);
      textAreaFigure0.figureContains(point2D_Double0);
      assertTrue(textAreaFigure0.isEditable());
      assertEquals("Text", textAreaFigure0.getText());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      textAreaFigure0.setRemovable(false);
      TextAreaFigure textAreaFigure1 = textAreaFigure0.clone();
      assertNotSame(textAreaFigure1, textAreaFigure0);
      assertEquals("Text", textAreaFigure1.getText());
      assertTrue(textAreaFigure1.isEditable());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      textAreaFigure0.setConnectable(false);
      TextAreaFigure textAreaFigure1 = textAreaFigure0.clone();
      assertNotSame(textAreaFigure1, textAreaFigure0);
      assertEquals(4, textAreaFigure1.getTextColumns());
      assertTrue(textAreaFigure1.isEditable());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      textAreaFigure0.setFontSize((-1192.771F));
      textAreaFigure0.clone();
      assertEquals((-1192.771F), textAreaFigure0.getFontSize(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("*Fy\"(g[Y0+");
      // Undeclared exception!
      try { 
        textAreaFigure0.writeBounds((DOMOutput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TextAreaFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("");
      // Undeclared exception!
      try { 
        textAreaFigure0.write((DOMOutput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TextAreaFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      // Undeclared exception!
      try { 
        textAreaFigure0.transform((AffineTransform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TextAreaFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      // Undeclared exception!
      try { 
        textAreaFigure0.restoreTransformTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TextAreaFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      // Undeclared exception!
      try { 
        textAreaFigure0.readBounds((DOMInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TextAreaFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      // Undeclared exception!
      try { 
        textAreaFigure0.drawText((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TextAreaFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure((String) null);
      // Undeclared exception!
      try { 
        textAreaFigure0.drawFill((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TextAreaFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("");
      Dimension2DDouble dimension2DDouble0 = textAreaFigure0.getPreferredTextSize(0.0);
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertEquals(0.0, dimension2DDouble0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("");
      String string0 = textAreaFigure0.getText();
      assertTrue(textAreaFigure0.isEditable());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure((String) null);
      boolean boolean0 = textAreaFigure0.isEditable();
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("RCy");
      LineFigure lineFigure0 = new LineFigure();
      Point2D.Double point2D_Double0 = lineFigure0.getEndPoint();
      textAreaFigure0.setBounds(point2D_Double0, point2D_Double0);
      boolean boolean0 = textAreaFigure0.figureContains(point2D_Double0);
      assertTrue(textAreaFigure0.isEditable());
      assertEquals("RCy", textAreaFigure0.getText());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("");
      int int0 = textAreaFigure0.getTabSize();
      assertEquals("", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("");
      // Undeclared exception!
      try { 
        textAreaFigure0.figureContains((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.RectangularShape", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("");
      textAreaFigure0.setText("");
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("*Fy\"(g[Y0+");
      textAreaFigure0.getFont();
      assertTrue(textAreaFigure0.isEditable());
      assertEquals("*Fy\"(g[Y0+", textAreaFigure0.getText());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("org.jhotdraw.draw.connector.ChopBezierConnector");
      Insets2D.Double insets2D_Double0 = textAreaFigure0.getInsets();
      assertEquals(47, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(5.0, insets2D_Double0.top, 0.01);
      assertEquals(5.0, insets2D_Double0.left, 0.01);
      assertEquals(5.0, insets2D_Double0.right, 0.01);
      assertEquals(5.0, insets2D_Double0.bottom, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("");
      Dimension2DDouble dimension2DDouble0 = textAreaFigure0.getPreferredTextSize(2.0);
      assertEquals(12.064453125, dimension2DDouble0.height, 0.01);
      assertEquals(8, textAreaFigure0.getTabSize());
      assertEquals(0.0, dimension2DDouble0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure((String) null);
      textAreaFigure0.getPreferredTextSize(0.0);
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("");
      textAreaFigure0.createHandles(0);
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      textAreaFigure0.createHandles(37);
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      Rectangle2D.Double rectangle2D_Double0 = textAreaFigure0.bounds;
      textAreaFigure0.setBounds(rectangle2D_Double0);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01);
      
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      Point2D.Double point2D_Double0 = lineConnectionFigure0.getEndPoint();
      textAreaFigure0.getTool(point2D_Double0);
      assertTrue(textAreaFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("sDe/etmP9D9qj>s)*{]");
      BezierLabelLocator bezierLabelLocator0 = new BezierLabelLocator();
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      Point2D.Double point2D_Double0 = bezierLabelLocator0.getRelativePoint(lineConnectionFigure0);
      Tool tool0 = textAreaFigure0.getTool(point2D_Double0);
      assertNull(tool0);
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(19, textAreaFigure0.getTextColumns());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure((String) null);
      int int0 = textAreaFigure0.getTextColumns();
      assertEquals(4, int0);
      assertTrue(textAreaFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("6IWz3,");
      int int0 = textAreaFigure0.getTextColumns();
      assertEquals(6, int0);
      assertTrue(textAreaFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("sDe/etmP9D9qj>s)*{]");
      textAreaFigure0.invalidate();
      assertEquals(19, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("");
      JavaPrimitivesDOMFactory javaPrimitivesDOMFactory0 = new JavaPrimitivesDOMFactory();
      JavaxDOMOutput javaxDOMOutput0 = new JavaxDOMOutput(javaPrimitivesDOMFactory0);
      // Undeclared exception!
      try { 
        textAreaFigure0.write(javaxDOMOutput0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.sun.org.apache.xerces.internal.dom.DocumentImpl cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.jhotdraw.xml.JavaxDOMOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("eRc>n./b0np0=Toqk");
      // Undeclared exception!
      try { 
        textAreaFigure0.read((DOMInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TextAreaFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat();
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      List<Figure> list0 = quadTreeDrawing0.findFiguresWithin(rectangle2D_Double0);
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) defaultDrawing0, list0, (-1664.8920058789677), true);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      textAreaFigure0.drawText(graphics2D0);
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("sDe/etmP9D9qj>s)*{]");
      DefaultDOMFactory defaultDOMFactory0 = new DefaultDOMFactory();
      JavaxDOMOutput javaxDOMOutput0 = new JavaxDOMOutput(defaultDOMFactory0);
      // Undeclared exception!
      try { 
        textAreaFigure0.writeBounds(javaxDOMOutput0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.sun.org.apache.xerces.internal.dom.DocumentImpl cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.jhotdraw.xml.JavaxDOMOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("!DJk[q7N=");
      textAreaFigure0.getFillColor();
      assertEquals("!DJk[q7N=", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("sDe/etmP9D9qj>s)*{]");
      double double0 = textAreaFigure0.getBaseline();
      assertEquals(17.064453125, double0, 0.01);
      assertTrue(textAreaFigure0.isEditable());
      assertEquals("sDe/etmP9D9qj>s)*{]", textAreaFigure0.getText());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure((String) null);
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat("h#u5f$`@", "", "", 762);
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-2035.0009748782), 762, (-3897.9166539152), (-3897.9166539152));
      List<Figure> list0 = defaultDrawing0.findFigures(rectangle2D_Double0);
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) defaultDrawing0, list0, 2.0, true);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      textAreaFigure0.drawFill(graphics2D0);
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("sDe/etmP9D9qj>s)*{]");
      textAreaFigure0.isTextOverflow();
      boolean boolean0 = textAreaFigure0.isTextOverflow();
      assertTrue(boolean0);
      assertEquals("sDe/etmP9D9qj>s)*{]", textAreaFigure0.getText());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      // Undeclared exception!
      try { 
        textAreaFigure0.drawStroke((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TextAreaFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      textAreaFigure0.getFontSize();
      assertTrue(textAreaFigure0.isEditable());
      assertEquals("Text", textAreaFigure0.getText());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("org.jhotdraw.draw.DefaultDrawingView$EventHandler");
      // Undeclared exception!
      try { 
        textAreaFigure0.restoreTransformTo("org.jhotdraw.draw.DefaultDrawingView$EventHandler");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.awt.geom.Rectangle2D$Double
         //
         verifyException("org.jhotdraw.draw.figure.TextAreaFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      Dimension2DDouble dimension2DDouble0 = textAreaFigure0.getPreferredTextSize(2.0);
      assertEquals(55.94140625, dimension2DDouble0.height, 0.01);
      assertEquals(8, textAreaFigure0.getTabSize());
      assertEquals(7.390625, dimension2DDouble0.width, 0.01);
      assertTrue(textAreaFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("");
      textAreaFigure0.getTextColor();
      assertEquals("", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("@4gI");
      // Undeclared exception!
      try { 
        textAreaFigure0.getTool((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.RectangularShape", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure(" ");
      textAreaFigure0.getBounds();
      assertEquals(" ", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isEditable());
  }
}
