/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 01 05:44:15 GMT 2021
 */

package org.jhotdraw.draw.figure;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Cursor;
import java.awt.event.MouseEvent;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import javax.swing.text.StyledEditorKit;
import javax.swing.undo.CompoundEdit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jhotdraw.draw.AttributeKey;
import org.jhotdraw.draw.AttributeKeys;
import org.jhotdraw.draw.DefaultDrawing;
import org.jhotdraw.draw.DefaultDrawingView;
import org.jhotdraw.draw.Drawing;
import org.jhotdraw.draw.DrawingView;
import org.jhotdraw.draw.GraphicalCompositeFigure;
import org.jhotdraw.draw.QuadTreeDrawing;
import org.jhotdraw.draw.connector.AbstractConnector;
import org.jhotdraw.draw.connector.Connector;
import org.jhotdraw.draw.event.FigureEvent;
import org.jhotdraw.draw.figure.AbstractCompositeFigure;
import org.jhotdraw.draw.figure.AbstractFigure;
import org.jhotdraw.draw.figure.BezierFigure;
import org.jhotdraw.draw.figure.ConnectionFigure;
import org.jhotdraw.draw.figure.DiamondFigure;
import org.jhotdraw.draw.figure.EllipseFigure;
import org.jhotdraw.draw.figure.Figure;
import org.jhotdraw.draw.figure.GroupFigure;
import org.jhotdraw.draw.figure.ImageFigure;
import org.jhotdraw.draw.figure.LabelFigure;
import org.jhotdraw.draw.figure.LabeledLineConnectionFigure;
import org.jhotdraw.draw.figure.LineConnectionFigure;
import org.jhotdraw.draw.figure.ListFigure;
import org.jhotdraw.draw.figure.RectangleFigure;
import org.jhotdraw.draw.figure.RoundRectangleFigure;
import org.jhotdraw.draw.figure.TextAreaFigure;
import org.jhotdraw.draw.figure.TextFigure;
import org.jhotdraw.draw.figure.TriangleFigure;
import org.jhotdraw.draw.handle.ConnectionStartHandle;
import org.jhotdraw.draw.handle.NullHandle;
import org.jhotdraw.draw.layouter.LocatorLayouter;
import org.jhotdraw.draw.locator.BezierLabelLocator;
import org.jhotdraw.draw.locator.Locator;
import org.jhotdraw.draw.locator.RelativeDecoratorLocator;
import org.jhotdraw.draw.locator.RelativeLocator;
import org.jhotdraw.geom.BezierPath;
import org.jhotdraw.geom.Dimension2DDouble;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractFigure_ESTest extends AbstractFigure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ImageFigure imageFigure0 = new ImageFigure();
      imageFigure0.setTransformable(false);
      assertTrue(imageFigure0.isSelectable());
      assertTrue(imageFigure0.isRemovable());
      assertTrue(imageFigure0.isConnectable());
      assertTrue(imageFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure(250.65, 250.65, (-1.0), (-1745));
      assertTrue(triangleFigure0.isRemovable());
      
      triangleFigure0.setRemovable(false);
      assertFalse(triangleFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RectangleFigure rectangleFigure0 = new RectangleFigure();
      ListFigure listFigure0 = new ListFigure(rectangleFigure0);
      rectangleFigure0.willChange();
      listFigure0.removeNotify((Drawing) null);
      assertTrue(listFigure0.isSelectable());
      assertTrue(listFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ImageFigure imageFigure0 = new ImageFigure();
      Class<StyledEditorKit.FontSizeAction> class0 = StyledEditorKit.FontSizeAction.class;
      StyledEditorKit.FontSizeAction styledEditorKit_FontSizeAction0 = new StyledEditorKit.FontSizeAction("org.jhotdraw.draw.figure.LabelFigure", (-1745));
      AttributeKey<StyledEditorKit.FontSizeAction> attributeKey0 = new AttributeKey<StyledEditorKit.FontSizeAction>("other", class0, styledEditorKit_FontSizeAction0);
      TriangleFigure triangleFigure0 = new TriangleFigure(250.65, 250.65, (-1.0), (-1745));
      FigureEvent figureEvent0 = new FigureEvent(imageFigure0, attributeKey0, triangleFigure0, styledEditorKit_FontSizeAction0);
      imageFigure0.fireAreaInvalidated(figureEvent0);
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(imageFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RectangleFigure rectangleFigure0 = new RectangleFigure();
      rectangleFigure0.validate();
      assertTrue(rectangleFigure0.isSelectable());
      assertTrue(rectangleFigure0.isVisible());
      assertTrue(rectangleFigure0.isRemovable());
      assertTrue(rectangleFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure("");
      Point2D.Double point2D_Double0 = new Point2D.Double(1866.2508674959, 1866.2508674959);
      labelFigure0.setBounds(point2D_Double0, point2D_Double0);
      assertTrue(labelFigure0.isConnectable());
      assertTrue(labelFigure0.isSelectable());
      assertTrue(labelFigure0.isRemovable());
      assertTrue(labelFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DiamondFigure diamondFigure0 = new DiamondFigure();
      GroupFigure groupFigure0 = new GroupFigure();
      AbstractCompositeFigure.EventHandler abstractCompositeFigure_EventHandler0 = groupFigure0.createEventHandler();
      diamondFigure0.removeFigureListener(abstractCompositeFigure_EventHandler0);
      assertTrue(groupFigure0.isVisible());
      assertTrue(groupFigure0.isRemovable());
      assertTrue(diamondFigure0.isConnectable());
      assertFalse(groupFigure0.isConnectable());
      assertTrue(groupFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure("Cf!8O[/{#");
      Hashtable<Figure, Figure> hashtable0 = new Hashtable<Figure, Figure>();
      labelFigure0.remap(hashtable0, false);
      assertTrue(labelFigure0.isVisible());
      assertTrue(labelFigure0.isRemovable());
      assertTrue(labelFigure0.isConnectable());
      assertTrue(labelFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RectangleFigure rectangleFigure0 = new RectangleFigure();
      rectangleFigure0.invalidate();
      assertTrue(rectangleFigure0.isVisible());
      assertTrue(rectangleFigure0.isSelectable());
      assertTrue(rectangleFigure0.isConnectable());
      assertTrue(rectangleFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure((-2.0), (-2.0), 2467.5692277067, 12.0);
      triangleFigure0.fireFigureRequestRemove();
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      textAreaFigure0.fireFigureRemoved();
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isConnectable());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ImageFigure imageFigure0 = new ImageFigure(0.0, 0.0, 1818.95167, 0.0);
      imageFigure0.fireFigureAdded();
      assertTrue(imageFigure0.isSelectable());
      assertTrue(imageFigure0.isRemovable());
      assertTrue(imageFigure0.isVisible());
      assertTrue(imageFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Locator locator0 = RelativeLocator.southWest();
      NullHandle nullHandle0 = new NullHandle(roundRectangleFigure0, locator0);
      labeledLineConnectionFigure0.addFigureListener(nullHandle0);
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertTrue(roundRectangleFigure0.isConnectable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      boolean boolean0 = roundRectangleFigure0.isTransformable();
      assertTrue(boolean0);
      assertTrue(roundRectangleFigure0.isSelectable());
      assertTrue(roundRectangleFigure0.isRemovable());
      assertTrue(roundRectangleFigure0.isVisible());
      assertTrue(roundRectangleFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ImageFigure imageFigure0 = new ImageFigure();
      boolean boolean0 = imageFigure0.isChanging();
      assertTrue(imageFigure0.isSelectable());
      assertTrue(imageFigure0.isRemovable());
      assertTrue(imageFigure0.isVisible());
      assertTrue(imageFigure0.isConnectable());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      lineConnectionFigure0.getStartPoint();
      assertTrue(lineConnectionFigure0.isSelectable());
      assertFalse(lineConnectionFigure0.isConnectable());
      assertTrue(lineConnectionFigure0.isRemovable());
      assertTrue(lineConnectionFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DiamondFigure diamondFigure0 = new DiamondFigure(1.0, 1.0, (-3069.887020208441), 1.0);
      Dimension2DDouble dimension2DDouble0 = diamondFigure0.getPreferredSize();
      assertTrue(diamondFigure0.isConnectable());
      assertTrue(diamondFigure0.isSelectable());
      assertEquals(1.0, dimension2DDouble0.height, 0.01);
      assertTrue(diamondFigure0.isRemovable());
      assertTrue(diamondFigure0.isVisible());
      assertEquals((-3069.887020208441), dimension2DDouble0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure();
      Dimension2DDouble dimension2DDouble0 = labelFigure0.getPreferredSize();
      assertTrue(labelFigure0.isVisible());
      assertTrue(labelFigure0.isConnectable());
      assertTrue(labelFigure0.isRemovable());
      assertEquals(31.8046875, dimension2DDouble0.width, 0.01);
      assertTrue(labelFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      FontRenderContext fontRenderContext0 = roundRectangleFigure0.getFontRenderContext();
      assertTrue(roundRectangleFigure0.isSelectable());
      assertTrue(fontRenderContext0.isAntiAliased());
      assertNotNull(fontRenderContext0);
      assertTrue(roundRectangleFigure0.isConnectable());
      assertTrue(roundRectangleFigure0.isVisible());
      assertTrue(roundRectangleFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.getEndPoint();
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure();
      textFigure0.getDrawing();
      assertTrue(textFigure0.isRemovable());
      assertTrue(textFigure0.isConnectable());
      assertTrue(textFigure0.isVisible());
      assertTrue(textFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      roundRectangleFigure0.getConnectors(labeledLineConnectionFigure0);
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(roundRectangleFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure();
      assertTrue(textFigure0.isConnectable());
      
      textFigure0.setConnectable(false);
      textFigure0.clone();
      assertFalse(textFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure();
      AbstractFigure abstractFigure0 = textFigure0.clone();
      assertTrue(abstractFigure0.isVisible());
      assertTrue(abstractFigure0.isRemovable());
      assertTrue(abstractFigure0.isConnectable());
      assertNotSame(abstractFigure0, textFigure0);
      assertTrue(abstractFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BezierFigure bezierFigure0 = new BezierFigure();
      // Undeclared exception!
      try { 
        bezierFigure0.getStartPoint();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BezierFigure bezierFigure0 = new BezierFigure();
      // Undeclared exception!
      try { 
        bezierFigure0.getEndPoint();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure();
      // Undeclared exception!
      try { 
        ellipseFigure0.getCursor((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.RectangularShape", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RectangleFigure rectangleFigure0 = new RectangleFigure();
      rectangleFigure0.createHandles(12);
      assertTrue(rectangleFigure0.isSelectable());
      assertTrue(rectangleFigure0.isVisible());
      assertTrue(rectangleFigure0.isRemovable());
      assertTrue(rectangleFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Rectangle2D.Double rectangle2D_Double0 = labeledLineConnectionFigure0.getBounds();
      labeledLineConnectionFigure0.fireFigureChanged(rectangle2D_Double0);
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure(")z#P<X}");
      ImageFigure imageFigure0 = new ImageFigure(0.0, (-1492.417), 0.0, (-369.23847747));
      Rectangle2D.Double rectangle2D_Double0 = imageFigure0.getBounds();
      textAreaFigure0.fireAreaInvalidated(rectangle2D_Double0);
      assertTrue(imageFigure0.isSelectable());
      assertTrue(imageFigure0.isRemovable());
      assertTrue(imageFigure0.isConnectable());
      assertTrue(imageFigure0.isVisible());
      assertTrue(textAreaFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Dimension2DDouble dimension2DDouble0 = labeledLineConnectionFigure0.getPreferredSize();
      assertEquals(0.0, dimension2DDouble0.height, 0.01);
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertEquals(0.0, dimension2DDouble0.width, 0.01);
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ImageFigure imageFigure0 = new ImageFigure();
      imageFigure0.fireAreaInvalidated();
      assertTrue(imageFigure0.isSelectable());
      assertTrue(imageFigure0.isVisible());
      assertTrue(imageFigure0.isRemovable());
      assertTrue(imageFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      boolean boolean0 = triangleFigure0.isVisible();
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(boolean0);
      assertTrue(triangleFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      Point2D.Double point2D_Double0 = groupFigure0.getEndPoint();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertTrue(groupFigure0.isVisible());
      assertFalse(groupFigure0.isConnectable());
      assertTrue(groupFigure0.isSelectable());
      assertTrue(groupFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      assertTrue(textAreaFigure0.isVisible());
      
      textAreaFigure0.setVisible(false);
      assertFalse(textAreaFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure();
      assertTrue(textFigure0.isVisible());
      
      textFigure0.setVisible(true);
      assertTrue(textFigure0.isRemovable());
      assertTrue(textFigure0.isConnectable());
      assertTrue(textFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      GroupFigure groupFigure0 = new GroupFigure();
      Point2D.Double point2D_Double0 = groupFigure0.getStartPoint();
      Figure figure0 = roundRectangleFigure0.findFigureInside(point2D_Double0);
      assertTrue(figure0.isSelectable());
      assertNotNull(figure0);
      assertTrue(figure0.isConnectable());
      assertTrue(figure0.isVisible());
      assertFalse(groupFigure0.isConnectable());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertTrue(figure0.isRemovable());
      assertEquals(0.0, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure(1.0, 1.0, (-1332.3), 256.0);
      BezierLabelLocator bezierLabelLocator0 = new BezierLabelLocator(370.61076069, 0.0, 3253.7263920876);
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Point2D.Double point2D_Double0 = bezierLabelLocator0.getRelativeLabelPoint(labeledLineConnectionFigure0, labeledLineConnectionFigure0);
      Figure figure0 = ellipseFigure0.findFigureInside(point2D_Double0);
      assertTrue(ellipseFigure0.isConnectable());
      assertNull(figure0);
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      GroupFigure groupFigure0 = new GroupFigure();
      boolean boolean0 = triangleFigure0.includes(groupFigure0);
      assertTrue(groupFigure0.isSelectable());
      assertTrue(triangleFigure0.isConnectable());
      assertFalse(boolean0);
      assertFalse(groupFigure0.isConnectable());
      assertTrue(groupFigure0.isRemovable());
      assertTrue(groupFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BezierFigure bezierFigure0 = new BezierFigure();
      // Undeclared exception!
      try { 
        bezierFigure0.changed();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // changed was called without a prior call to willChange. 0
         //
         verifyException("org.jhotdraw.draw.figure.AbstractFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      HashMap<Figure, Figure> hashMap0 = new HashMap<Figure, Figure>();
      lineConnectionFigure0.remap(hashMap0, false);
      assertTrue(lineConnectionFigure0.isVisible());
      assertTrue(lineConnectionFigure0.isRemovable());
      assertFalse(lineConnectionFigure0.isConnectable());
      assertTrue(lineConnectionFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Point2D.Double point2D_Double0 = labeledLineConnectionFigure0.getPointOnPath(0.0F, 0.0F);
      Cursor cursor0 = labeledLineConnectionFigure0.getCursor(point2D_Double0);
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertEquals(12, cursor0.getType());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure((Figure) null);
      LabelFigure labelFigure0 = new LabelFigure("W2`lr@U%QYq6D+0op/");
      Point2D.Double point2D_Double0 = labelFigure0.origin;
      Cursor cursor0 = listFigure0.getCursor(point2D_Double0);
      assertTrue(labelFigure0.isSelectable());
      assertTrue(labelFigure0.isConnectable());
      assertTrue(labelFigure0.isVisible());
      assertTrue(labelFigure0.isRemovable());
      assertEquals("Default Cursor", cursor0.getName());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BezierFigure bezierFigure0 = new BezierFigure(false);
      CompoundEdit compoundEdit0 = new CompoundEdit();
      bezierFigure0.fireUndoableEditHappened(compoundEdit0);
      assertTrue(bezierFigure0.isVisible());
      assertTrue(bezierFigure0.isRemovable());
      assertTrue(bezierFigure0.isSelectable());
      assertTrue(bezierFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      lineConnectionFigure0.fireFigureHandlesChanged();
      assertTrue(lineConnectionFigure0.isSelectable());
      assertFalse(lineConnectionFigure0.isConnectable());
      assertTrue(lineConnectionFigure0.isVisible());
      assertTrue(lineConnectionFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BezierFigure bezierFigure0 = new BezierFigure();
      bezierFigure0.createHandles(64);
      bezierFigure0.setClosed(true);
      assertTrue(bezierFigure0.isSelectable());
      assertTrue(bezierFigure0.isVisible());
      assertTrue(bezierFigure0.isRemovable());
      assertTrue(bezierFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      Class<ConnectionStartHandle> class0 = ConnectionStartHandle.class;
      AttributeKey<ConnectionStartHandle> attributeKey0 = new AttributeKey<ConnectionStartHandle>("liner", class0);
      ConnectionStartHandle connectionStartHandle0 = new ConnectionStartHandle(lineConnectionFigure0);
      lineConnectionFigure0.fireAttributeChanged(attributeKey0, connectionStartHandle0, connectionStartHandle0);
      assertFalse(lineConnectionFigure0.isConnectable());
      assertTrue(lineConnectionFigure0.isSelectable());
      assertTrue(lineConnectionFigure0.isVisible());
      assertTrue(lineConnectionFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ImageFigure imageFigure0 = new ImageFigure();
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getDrawingArea();
      FigureEvent figureEvent0 = new FigureEvent(imageFigure0, rectangle2D_Double0);
      imageFigure0.fireFigureChanged(figureEvent0);
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(imageFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RectangleFigure rectangleFigure0 = new RectangleFigure();
      ListFigure listFigure0 = new ListFigure(rectangleFigure0);
      Rectangle2D.Double rectangle2D_Double0 = listFigure0.getBounds();
      FigureEvent figureEvent0 = new FigureEvent(rectangleFigure0, rectangle2D_Double0);
      rectangleFigure0.fireAreaInvalidated(figureEvent0);
      assertTrue(listFigure0.isSelectable());
      assertTrue(listFigure0.isVisible());
      assertTrue(listFigure0.isRemovable());
      assertTrue(listFigure0.isConnectable());
      assertTrue(rectangleFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      TextAreaFigure textAreaFigure1 = (TextAreaFigure)textAreaFigure0.getLock();
      assertTrue(textAreaFigure1.isSelectable());
      assertTrue(textAreaFigure1.isVisible());
      assertTrue(textAreaFigure1.isRemovable());
      assertTrue(textAreaFigure1.isConnectable());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ImageFigure imageFigure0 = new ImageFigure((-750.544883), (-750.544883), 12.0, (-750.544883));
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance(0, 3462.27759699, 274.79775006);
      imageFigure0.transform(affineTransform0);
      assertTrue(imageFigure0.isSelectable());
      assertTrue(imageFigure0.isVisible());
      assertTrue(imageFigure0.isRemovable());
      assertTrue(imageFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RectangleFigure rectangleFigure0 = new RectangleFigure();
      assertTrue(rectangleFigure0.isSelectable());
      
      rectangleFigure0.setSelectable(false);
      assertFalse(rectangleFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.fireFigureChanged();
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure("isStrokeDashFactor");
      HashMap<Figure, Figure> hashMap0 = new HashMap<Figure, Figure>();
      textFigure0.remap(hashMap0, true);
      assertTrue(textFigure0.isVisible());
      assertTrue(textFigure0.isRemovable());
      assertTrue(textFigure0.isConnectable());
      assertTrue(textFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure(", ");
      EllipseFigure ellipseFigure0 = new EllipseFigure(1.0, 1.0, (-1332.3), 256.0);
      AbstractConnector abstractConnector0 = new AbstractConnector();
      Connector connector0 = ellipseFigure0.findCompatibleConnector(abstractConnector0, true);
      textAreaFigure0.findCompatibleConnector(connector0, true);
      assertTrue(ellipseFigure0.isSelectable());
      assertTrue(ellipseFigure0.isVisible());
      assertTrue(ellipseFigure0.isRemovable());
      assertTrue(ellipseFigure0.isConnectable());
      assertTrue(textAreaFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      roundRectangleFigure0.toString();
      assertTrue(roundRectangleFigure0.isSelectable());
      assertTrue(roundRectangleFigure0.isVisible());
      assertTrue(roundRectangleFigure0.isRemovable());
      assertTrue(roundRectangleFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      textAreaFigure0.getDecomposition();
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      assertTrue(textAreaFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("py:");
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      textAreaFigure0.removeNotify(defaultDrawing0);
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isSelectable());
      assertTrue(textAreaFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure();
      boolean boolean0 = graphicalCompositeFigure0.isSelectable();
      assertTrue(graphicalCompositeFigure0.isVisible());
      assertTrue(boolean0);
      assertTrue(graphicalCompositeFigure0.isConnectable());
      assertTrue(graphicalCompositeFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BezierFigure bezierFigure0 = new BezierFigure(false);
      bezierFigure0.requestRemove();
      assertTrue(bezierFigure0.isRemovable());
      assertTrue(bezierFigure0.isConnectable());
      assertTrue(bezierFigure0.isVisible());
      assertTrue(bezierFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      boolean boolean0 = roundRectangleFigure0.isConnectable();
      assertTrue(roundRectangleFigure0.isSelectable());
      assertTrue(roundRectangleFigure0.isVisible());
      assertTrue(roundRectangleFigure0.isRemovable());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("org.jhotdraw.draw.connector.LocatorConnector");
      DiamondFigure diamondFigure0 = new DiamondFigure(1.0, 1.0, (-3069.887020208441), 1.0);
      Rectangle2D.Double rectangle2D_Double0 = diamondFigure0.getDrawingArea(1.0);
      textAreaFigure0.setBounds(rectangle2D_Double0);
      assertTrue(diamondFigure0.isVisible());
      assertTrue(diamondFigure0.isConnectable());
      assertTrue(diamondFigure0.isRemovable());
      assertTrue(diamondFigure0.isSelectable());
      assertTrue(textAreaFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BezierFigure bezierFigure0 = new BezierFigure(false);
      bezierFigure0.addNotify((Drawing) null);
      assertTrue(bezierFigure0.isRemovable());
      assertTrue(bezierFigure0.isVisible());
      assertTrue(bezierFigure0.isSelectable());
      assertTrue(bezierFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      RelativeDecoratorLocator relativeDecoratorLocator0 = new RelativeDecoratorLocator(0.0, 0.0);
      Point2D.Double point2D_Double0 = relativeDecoratorLocator0.locate((Figure) triangleFigure0);
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      LocatorLayouter locatorLayouter0 = new LocatorLayouter();
      Rectangle2D.Double rectangle2D_Double0 = locatorLayouter0.calculateLayout(quadTreeDrawing0, point2D_Double0, point2D_Double0);
      List<Figure> list0 = quadTreeDrawing0.findFiguresWithin(rectangle2D_Double0);
      boolean boolean0 = triangleFigure0.handleDrop(point2D_Double0, list0, (DrawingView) null);
      assertTrue(quadTreeDrawing0.isSelectable());
      assertTrue(quadTreeDrawing0.isVisible());
      assertTrue(quadTreeDrawing0.isConnectable());
      assertTrue(quadTreeDrawing0.isRemovable());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure(271.36216222185, 3438.2, 0.0, 0.0);
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      Point2D.Double point2D_Double0 = bezierPath0.getCenter();
      triangleFigure0.getTool(point2D_Double0);
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      ConnectionStartHandle connectionStartHandle0 = new ConnectionStartHandle(lineConnectionFigure0);
      lineConnectionFigure0.fireFigureHandlesChanged();
      assertTrue(lineConnectionFigure0.isVisible());
      assertTrue(lineConnectionFigure0.isRemovable());
      assertTrue(lineConnectionFigure0.isSelectable());
      assertFalse(lineConnectionFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      triangleFigure0.createHandles(0);
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Point2D.Double point2D_Double0 = labeledLineConnectionFigure0.getPointOnPath(993.8F, 993.8F);
      roundRectangleFigure0.getActions(point2D_Double0);
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertTrue(roundRectangleFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      RectangleFigure rectangleFigure0 = new RectangleFigure();
      ListFigure listFigure0 = new ListFigure(rectangleFigure0);
      rectangleFigure0.willChange();
      Rectangle2D.Double rectangle2D_Double0 = listFigure0.getBounds();
      FigureEvent figureEvent0 = new FigureEvent(rectangleFigure0, rectangle2D_Double0);
      rectangleFigure0.fireAreaInvalidated(figureEvent0);
      assertTrue(listFigure0.isSelectable());
      assertTrue(listFigure0.isRemovable());
      assertTrue(listFigure0.isConnectable());
      assertTrue(rectangleFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      Point2D.Double point2D_Double0 = new Point2D.Double((-1576.47067), 0.0);
      groupFigure0.findConnector(point2D_Double0, (ConnectionFigure) null);
      assertTrue(groupFigure0.isVisible());
      assertFalse(groupFigure0.isConnectable());
      assertTrue(groupFigure0.isSelectable());
      assertTrue(groupFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      RectangleFigure rectangleFigure0 = new RectangleFigure();
      DefaultDrawingView defaultDrawingView0 = new DefaultDrawingView();
      boolean boolean0 = rectangleFigure0.handleMouseClick((Point2D.Double) null, (MouseEvent) null, defaultDrawingView0);
      assertTrue(rectangleFigure0.isSelectable());
      assertTrue(rectangleFigure0.isVisible());
      assertFalse(boolean0);
      assertTrue(rectangleFigure0.isRemovable());
      assertTrue(rectangleFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure();
      int int0 = textFigure0.getLayer();
      assertTrue(textFigure0.isConnectable());
      assertTrue(textFigure0.isVisible());
      assertTrue(textFigure0.isRemovable());
      assertEquals(0, int0);
      assertTrue(textFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure();
      boolean boolean0 = labelFigure0.isRemovable();
      assertTrue(boolean0);
      assertTrue(labelFigure0.isSelectable());
      assertTrue(labelFigure0.isVisible());
      assertTrue(labelFigure0.isConnectable());
  }
}
