/*
 * This file was automatically generated by EvoSuite
 * Sat May 29 13:57:40 GMT 2021
 */

package org.jhotdraw.draw.figure;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Cursor;
import java.awt.RenderingHints;
import java.awt.event.MouseEvent;
import java.awt.font.FontRenderContext;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.HashMap;
import javax.swing.text.DefaultEditorKit;
import javax.swing.undo.AbstractUndoableEdit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jhotdraw.draw.AttributeKey;
import org.jhotdraw.draw.DefaultDrawing;
import org.jhotdraw.draw.DrawingView;
import org.jhotdraw.draw.QuadTreeDrawing;
import org.jhotdraw.draw.connector.ChopBezierConnector;
import org.jhotdraw.draw.event.FigureEvent;
import org.jhotdraw.draw.event.FigureListener;
import org.jhotdraw.draw.figure.AbstractFigure;
import org.jhotdraw.draw.figure.BezierFigure;
import org.jhotdraw.draw.figure.DiamondFigure;
import org.jhotdraw.draw.figure.EllipseFigure;
import org.jhotdraw.draw.figure.Figure;
import org.jhotdraw.draw.figure.GroupFigure;
import org.jhotdraw.draw.figure.ImageFigure;
import org.jhotdraw.draw.figure.LabelFigure;
import org.jhotdraw.draw.figure.LabeledLineConnectionFigure;
import org.jhotdraw.draw.figure.LineConnectionFigure;
import org.jhotdraw.draw.figure.LineFigure;
import org.jhotdraw.draw.figure.RectangleFigure;
import org.jhotdraw.draw.figure.RoundRectangleFigure;
import org.jhotdraw.draw.figure.TextAreaFigure;
import org.jhotdraw.draw.figure.TextFigure;
import org.jhotdraw.draw.figure.TriangleFigure;
import org.jhotdraw.draw.handle.CloseHandle;
import org.jhotdraw.draw.handle.DragHandle;
import org.jhotdraw.draw.handle.NullHandle;
import org.jhotdraw.draw.locator.FontSizeLocator;
import org.jhotdraw.draw.locator.Locator;
import org.jhotdraw.draw.locator.RelativeDecoratorLocator;
import org.jhotdraw.draw.locator.RelativeLocator;
import org.jhotdraw.geom.Dimension2DDouble;
import org.junit.runner.RunWith;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractFigure_ESTest extends AbstractFigure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      
      labeledLineConnectionFigure0.setSelectable(false);
      assertFalse(labeledLineConnectionFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DiamondFigure diamondFigure0 = new DiamondFigure(2430.3, 0.0, 0.0, 2430.3);
      diamondFigure0.fireFigureRequestRemove();
      assertTrue(diamondFigure0.isRemovable());
      assertTrue(diamondFigure0.isVisible());
      assertTrue(diamondFigure0.isConnectable());
      assertTrue(diamondFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      triangleFigure0.fireFigureRemoved();
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ImageFigure imageFigure0 = new ImageFigure((-1406.14824135), (-1406.14824135), (-1406.14824135), (-1406.14824135));
      imageFigure0.fireFigureAdded();
      assertTrue(imageFigure0.isConnectable());
      assertTrue(imageFigure0.isRemovable());
      assertTrue(imageFigure0.isSelectable());
      assertTrue(imageFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure((-1.0), (-1.0), 0.0, 945.4542351876713);
      Class<LineConnectionFigure> class0 = LineConnectionFigure.class;
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      AttributeKey<LineConnectionFigure> attributeKey0 = new AttributeKey<LineConnectionFigure>("pSWLCigi", class0, labeledLineConnectionFigure0);
      ellipseFigure0.fireAttributeChanged(attributeKey0, (LineConnectionFigure) labeledLineConnectionFigure0, (LineConnectionFigure) labeledLineConnectionFigure0);
      assertTrue(ellipseFigure0.isConnectable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RectangleFigure rectangleFigure0 = new RectangleFigure();
      rectangleFigure0.addFigureListener((FigureListener) null);
      assertTrue(rectangleFigure0.isRemovable());
      assertTrue(rectangleFigure0.isConnectable());
      assertTrue(rectangleFigure0.isVisible());
      assertTrue(rectangleFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure("[m'v?_?{_S9 .{");
      RelativeDecoratorLocator relativeDecoratorLocator0 = new RelativeDecoratorLocator(1185.0, 0.0);
      Point2D.Double point2D_Double0 = relativeDecoratorLocator0.locate((Figure) textFigure0);
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      roundRectangleFigure0.getTool(point2D_Double0);
      assertTrue(roundRectangleFigure0.isVisible());
      assertTrue(roundRectangleFigure0.isConnectable());
      assertTrue(roundRectangleFigure0.isRemovable());
      assertTrue(roundRectangleFigure0.isSelectable());
      assertEquals(113100.380859375, point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ImageFigure imageFigure0 = new ImageFigure();
      Point2D.Double point2D_Double0 = imageFigure0.getStartPoint();
      assertTrue(imageFigure0.isSelectable());
      assertTrue(imageFigure0.isConnectable());
      assertTrue(imageFigure0.isRemovable());
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertTrue(imageFigure0.isVisible());
      assertEquals(0.0, point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure(0.001, 0.001, (-18.86314566), 0.001);
      Dimension2DDouble dimension2DDouble0 = roundRectangleFigure0.getPreferredSize();
      assertEquals((-18.86314566), dimension2DDouble0.width, 0.01);
      assertEquals(0.001, dimension2DDouble0.height, 0.01);
      assertTrue(roundRectangleFigure0.isRemovable());
      assertTrue(roundRectangleFigure0.isVisible());
      assertTrue(roundRectangleFigure0.isConnectable());
      assertTrue(roundRectangleFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure();
      FontRenderContext fontRenderContext0 = labelFigure0.getFontRenderContext();
      assertTrue(labelFigure0.isSelectable());
      assertTrue(labelFigure0.isConnectable());
      assertTrue(labelFigure0.isRemovable());
      assertTrue(fontRenderContext0.isAntiAliased());
      assertTrue(labelFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BezierFigure bezierFigure0 = new BezierFigure();
      bezierFigure0.getDrawing();
      assertTrue(bezierFigure0.isVisible());
      assertTrue(bezierFigure0.isRemovable());
      assertTrue(bezierFigure0.isConnectable());
      assertTrue(bezierFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      assertTrue(triangleFigure0.isRemovable());
      
      triangleFigure0.setRemovable(false);
      triangleFigure0.clone();
      assertFalse(triangleFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      AbstractFigure abstractFigure0 = triangleFigure0.clone();
      assertTrue(abstractFigure0.isRemovable());
      assertTrue(abstractFigure0.isVisible());
      assertNotSame(abstractFigure0, triangleFigure0);
      assertTrue(abstractFigure0.isConnectable());
      assertTrue(abstractFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      AbstractFigure abstractFigure0 = labeledLineConnectionFigure0.clone();
      assertTrue(abstractFigure0.isVisible());
      assertFalse(abstractFigure0.isConnectable());
      assertTrue(abstractFigure0.isSelectable());
      assertNotSame(abstractFigure0, labeledLineConnectionFigure0);
      assertTrue(abstractFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      // Undeclared exception!
      try { 
        quadTreeDrawing0.setBounds((Rectangle2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure();
      labelFigure0.willChange();
      assertTrue(labelFigure0.isVisible());
      assertTrue(labelFigure0.isConnectable());
      assertTrue(labelFigure0.isRemovable());
      assertTrue(labelFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure(">$");
      RectangleFigure rectangleFigure0 = new RectangleFigure((-1101.809572517), (-1101.809572517), 0.0, (-1101.809572517));
      Rectangle2D.Double rectangle2D_Double0 = rectangleFigure0.getBounds();
      textFigure0.fireFigureChanged(rectangle2D_Double0);
      assertTrue(rectangleFigure0.isSelectable());
      assertTrue(rectangleFigure0.isConnectable());
      assertTrue(rectangleFigure0.isVisible());
      assertTrue(rectangleFigure0.isRemovable());
      assertTrue(textFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ImageFigure imageFigure0 = new ImageFigure();
      imageFigure0.fireAreaInvalidated((Rectangle2D.Double) null);
      assertTrue(imageFigure0.isSelectable());
      assertTrue(imageFigure0.isConnectable());
      assertTrue(imageFigure0.isRemovable());
      assertTrue(imageFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DiamondFigure diamondFigure0 = new DiamondFigure();
      diamondFigure0.fireAreaInvalidated();
      assertTrue(diamondFigure0.isVisible());
      assertTrue(diamondFigure0.isRemovable());
      assertTrue(diamondFigure0.isConnectable());
      assertTrue(diamondFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BezierFigure bezierFigure0 = new BezierFigure();
      HashMap<Figure, Figure> hashMap0 = new HashMap<Figure, Figure>();
      bezierFigure0.remap(hashMap0, false);
      assertTrue(bezierFigure0.isSelectable());
      assertTrue(bezierFigure0.isVisible());
      assertTrue(bezierFigure0.isRemovable());
      assertTrue(bezierFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      assertTrue(triangleFigure0.isConnectable());
      
      triangleFigure0.setConnectable(false);
      assertFalse(triangleFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      assertTrue(labeledLineConnectionFigure0.isVisible());
      
      labeledLineConnectionFigure0.setVisible(false);
      assertFalse(labeledLineConnectionFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      assertTrue(defaultDrawing0.isVisible());
      
      defaultDrawing0.setVisible(true);
      assertTrue(defaultDrawing0.isSelectable());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure();
      RelativeLocator relativeLocator0 = new RelativeLocator((-2277.43228), (-2277.43228), false);
      Point2D.Double point2D_Double0 = relativeLocator0.locate((Figure) labelFigure0);
      EllipseFigure ellipseFigure0 = new EllipseFigure();
      Figure figure0 = ellipseFigure0.findFigureInside(point2D_Double0);
      assertTrue(ellipseFigure0.isConnectable());
      assertTrue(ellipseFigure0.isRemovable());
      assertTrue(ellipseFigure0.isVisible());
      assertNull(figure0);
      assertEquals((-72433.0219678125), point2D_Double0.x, 0.01);
      assertTrue(ellipseFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure("");
      boolean boolean0 = textFigure0.includes((Figure) null);
      assertTrue(textFigure0.isRemovable());
      assertFalse(boolean0);
      assertTrue(textFigure0.isConnectable());
      assertTrue(textFigure0.isVisible());
      assertTrue(textFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure((-1.0), (-1.0), 0.0, 945.4542351876713);
      // Undeclared exception!
      try { 
        ellipseFigure0.changed();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // changed was called without a prior call to willChange. 0
         //
         verifyException("org.jhotdraw.draw.figure.AbstractFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RectangleFigure rectangleFigure0 = new RectangleFigure();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Cursor cursor0 = rectangleFigure0.getCursor(point2D_Double0);
      assertTrue(rectangleFigure0.isConnectable());
      assertEquals(12, cursor0.getType());
      assertTrue(rectangleFigure0.isSelectable());
      assertTrue(rectangleFigure0.isVisible());
      assertTrue(rectangleFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RectangleFigure rectangleFigure0 = new RectangleFigure();
      rectangleFigure0.createHandles(0);
      assertTrue(rectangleFigure0.isRemovable());
      assertTrue(rectangleFigure0.isVisible());
      assertTrue(rectangleFigure0.isConnectable());
      assertTrue(rectangleFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RectangleFigure rectangleFigure0 = new RectangleFigure((-1513.82565885386), (-1513.82565885386), 0.0, 0.0);
      rectangleFigure0.createHandles(787);
      assertTrue(rectangleFigure0.isSelectable());
      assertTrue(rectangleFigure0.isRemovable());
      assertTrue(rectangleFigure0.isConnectable());
      assertTrue(rectangleFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      AbstractUndoableEdit abstractUndoableEdit0 = new AbstractUndoableEdit();
      labeledLineConnectionFigure0.fireUndoableEditHappened(abstractUndoableEdit0);
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BezierFigure bezierFigure0 = new BezierFigure(false);
      bezierFigure0.fireFigureHandlesChanged();
      assertTrue(bezierFigure0.isConnectable());
      assertTrue(bezierFigure0.isRemovable());
      assertTrue(bezierFigure0.isVisible());
      assertTrue(bezierFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure();
      Locator locator0 = RelativeLocator.northWest(true);
      NullHandle nullHandle0 = new NullHandle(labelFigure0, locator0);
      labelFigure0.addFigureListener(nullHandle0);
      labelFigure0.setFontSize(4518.545F);
      assertTrue(labelFigure0.isSelectable());
      assertTrue(labelFigure0.isVisible());
      assertTrue(labelFigure0.isConnectable());
      assertTrue(labelFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure();
      RelativeDecoratorLocator relativeDecoratorLocator0 = new RelativeDecoratorLocator(180.0, 180.0, true);
      CloseHandle closeHandle0 = new CloseHandle(labelFigure0, relativeDecoratorLocator0);
      labelFigure0.setText((String) null);
      assertTrue(labelFigure0.isVisible());
      assertTrue(labelFigure0.isSelectable());
      assertTrue(labelFigure0.isConnectable());
      assertTrue(labelFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure(0.0, (-669.5), (-669.5), 1.0);
      triangleFigure0.fireFigureChanged((FigureEvent) null);
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BezierFigure bezierFigure0 = new BezierFigure(false);
      Class<DefaultEditorKit.PasteAction> class0 = DefaultEditorKit.PasteAction.class;
      DefaultEditorKit.PasteAction defaultEditorKit_PasteAction0 = new DefaultEditorKit.PasteAction();
      AttributeKey<DefaultEditorKit.PasteAction> attributeKey0 = new AttributeKey<DefaultEditorKit.PasteAction>("jBOpZE4b", class0, defaultEditorKit_PasteAction0, false);
      DragHandle dragHandle0 = new DragHandle(bezierFigure0);
      FigureEvent figureEvent0 = new FigureEvent(bezierFigure0, attributeKey0, class0, "jBOpZE4b");
      // Undeclared exception!
      try { 
        bezierFigure0.fireAreaInvalidated(figureEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.handle.DragHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure();
      Class<RectangleFigure> class0 = RectangleFigure.class;
      RectangleFigure rectangleFigure0 = new RectangleFigure(0.0, 0.0, 1028.725640266, (-2136.6339851581965));
      AttributeKey<RectangleFigure> attributeKey0 = new AttributeKey<RectangleFigure>("O(5NJ_V{n<t", class0, rectangleFigure0);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      FigureEvent figureEvent0 = new FigureEvent(textFigure0, attributeKey0, attributeKey0, sunHints_Key0);
      textFigure0.fireAreaInvalidated(figureEvent0);
      assertTrue(rectangleFigure0.isVisible());
      assertTrue(rectangleFigure0.isRemovable());
      assertTrue(rectangleFigure0.isSelectable());
      assertTrue(rectangleFigure0.isConnectable());
      assertTrue(textFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      GroupFigure groupFigure1 = (GroupFigure)groupFigure0.getLock();
      assertFalse(groupFigure1.isConnectable());
      assertTrue(groupFigure1.isSelectable());
      assertTrue(groupFigure1.isRemovable());
      assertTrue(groupFigure1.isVisible());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure();
      labelFigure0.fireFigureChanged();
      assertTrue(labelFigure0.isVisible());
      assertTrue(labelFigure0.isRemovable());
      assertTrue(labelFigure0.isConnectable());
      assertTrue(labelFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      HashMap<Figure, Figure> hashMap0 = new HashMap<Figure, Figure>();
      labeledLineConnectionFigure0.remap(hashMap0, true);
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.getConnectors(labeledLineConnectionFigure0);
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      ChopBezierConnector chopBezierConnector0 = new ChopBezierConnector();
      groupFigure0.findCompatibleConnector(chopBezierConnector0, false);
      assertTrue(groupFigure0.isVisible());
      assertFalse(groupFigure0.isConnectable());
      assertTrue(groupFigure0.isRemovable());
      assertTrue(groupFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.toString();
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.getDecomposition();
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure(0.0, (-1069.6), 1211.0, (-1069.6));
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      triangleFigure0.removeNotify(defaultDrawing0);
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isSelectable());
      assertTrue(triangleFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      boolean boolean0 = labeledLineConnectionFigure0.isSelectable();
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(boolean0);
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure(0.0, (-1069.6), 1211.0, (-1069.6));
      ellipseFigure0.requestRemove();
      assertTrue(ellipseFigure0.isConnectable());
      assertTrue(ellipseFigure0.isRemovable());
      assertTrue(ellipseFigure0.isVisible());
      assertTrue(ellipseFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      boolean boolean0 = groupFigure0.isConnectable();
      assertTrue(groupFigure0.isVisible());
      assertTrue(groupFigure0.isRemovable());
      assertFalse(boolean0);
      assertTrue(groupFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure();
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Rectangle2D.Double rectangle2D_Double0 = defaultDrawing0.getFigureDrawBounds();
      ellipseFigure0.setBounds(rectangle2D_Double0);
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isSelectable());
      assertTrue(ellipseFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure();
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      labelFigure0.addNotify(quadTreeDrawing0);
      assertTrue(quadTreeDrawing0.isConnectable());
      assertTrue(quadTreeDrawing0.isSelectable());
      assertTrue(quadTreeDrawing0.isVisible());
      assertTrue(quadTreeDrawing0.isRemovable());
      assertTrue(labelFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DiamondFigure diamondFigure0 = new DiamondFigure(2430.3, 0.0, 0.0, 2430.3);
      Point2D.Double point2D_Double0 = diamondFigure0.getEndPoint();
      diamondFigure0.getToolTipText(point2D_Double0);
      assertEquals(2430.3, point2D_Double0.x, 0.01);
      assertTrue(diamondFigure0.isVisible());
      assertTrue(diamondFigure0.isRemovable());
      assertTrue(diamondFigure0.isConnectable());
      assertEquals(2430.3, point2D_Double0.y, 0.01);
      assertTrue(diamondFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure(0.0, (-1069.6), 1211.0, (-1069.6));
      Point2D.Double point2D_Double0 = ellipseFigure0.getEndPoint();
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      lineConnectionFigure0.getTool(point2D_Double0);
      assertEquals((-2139.2), point2D_Double0.y, 0.01);
      assertTrue(lineConnectionFigure0.isSelectable());
      assertTrue(lineConnectionFigure0.isRemovable());
      assertTrue(lineConnectionFigure0.isVisible());
      assertTrue(ellipseFigure0.isConnectable());
      assertEquals(1211.0, point2D_Double0.x, 0.01);
      assertFalse(lineConnectionFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure();
      LabelFigure labelFigure0 = new LabelFigure();
      ellipseFigure0.removeFigureListener(labelFigure0);
      assertTrue(labelFigure0.isRemovable());
      assertTrue(labelFigure0.isVisible());
      assertTrue(labelFigure0.isConnectable());
      assertTrue(labelFigure0.isSelectable());
      assertTrue(ellipseFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RectangleFigure rectangleFigure0 = new RectangleFigure();
      rectangleFigure0.setTransformable(false);
      assertTrue(rectangleFigure0.isConnectable());
      assertTrue(rectangleFigure0.isSelectable());
      assertTrue(rectangleFigure0.isVisible());
      assertTrue(rectangleFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure(0.0, 0.0, 0.0, 0.0);
      Dimension2DDouble dimension2DDouble0 = ellipseFigure0.getPreferredSize();
      assertTrue(ellipseFigure0.isRemovable());
      assertTrue(ellipseFigure0.isVisible());
      assertEquals(0.0, dimension2DDouble0.height, 0.01);
      assertEquals(0.0, dimension2DDouble0.width, 0.01);
      assertTrue(ellipseFigure0.isConnectable());
      assertTrue(ellipseFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure();
      boolean boolean0 = labelFigure0.isTransformable();
      assertTrue(boolean0);
      assertTrue(labelFigure0.isSelectable());
      assertTrue(labelFigure0.isRemovable());
      assertTrue(labelFigure0.isVisible());
      assertTrue(labelFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure();
      LabelFigure labelFigure0 = new LabelFigure();
      RelativeDecoratorLocator relativeDecoratorLocator0 = new RelativeDecoratorLocator(180.0, 180.0, true);
      CloseHandle closeHandle0 = new CloseHandle(labelFigure0, relativeDecoratorLocator0);
      Point2D.Double point2D_Double0 = closeHandle0.getLocationOnDrawing();
      ellipseFigure0.getActions(point2D_Double0);
      assertTrue(labelFigure0.isVisible());
      assertTrue(labelFigure0.isRemovable());
      assertTrue(labelFigure0.isSelectable());
      assertEquals(5716.2333984375, point2D_Double0.y, 0.01);
      assertTrue(labelFigure0.isConnectable());
      assertTrue(ellipseFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LineFigure lineFigure0 = new LineFigure();
      Point2D.Double point2D_Double0 = lineFigure0.getEndPoint();
      LabelFigure labelFigure0 = new LabelFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labelFigure0.findConnector(point2D_Double0, labeledLineConnectionFigure0);
      assertTrue(labelFigure0.isConnectable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DiamondFigure diamondFigure0 = new DiamondFigure(0.0, 0.0, 0.0, 0.0);
      FontSizeLocator fontSizeLocator0 = new FontSizeLocator();
      Point2D.Double point2D_Double0 = fontSizeLocator0.locate((Figure) diamondFigure0, (Figure) diamondFigure0);
      boolean boolean0 = diamondFigure0.handleMouseClick(point2D_Double0, (MouseEvent) null, (DrawingView) null);
      assertTrue(diamondFigure0.isSelectable());
      assertTrue(diamondFigure0.isVisible());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertTrue(diamondFigure0.isRemovable());
      assertTrue(diamondFigure0.isConnectable());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure();
      int int0 = labelFigure0.getLayer();
      assertTrue(labelFigure0.isRemovable());
      assertTrue(labelFigure0.isConnectable());
      assertTrue(labelFigure0.isVisible());
      assertEquals(0, int0);
      assertTrue(labelFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("");
      boolean boolean0 = textAreaFigure0.isVisible();
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(boolean0);
      assertTrue(textAreaFigure0.isConnectable());
      assertTrue(textAreaFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      RectangleFigure rectangleFigure0 = new RectangleFigure(1.0, (-2172.884009879607), (-2172.884009879607), 1.0);
      boolean boolean0 = rectangleFigure0.isRemovable();
      assertTrue(rectangleFigure0.isConnectable());
      assertTrue(rectangleFigure0.isVisible());
      assertTrue(boolean0);
      assertTrue(rectangleFigure0.isSelectable());
  }
}
