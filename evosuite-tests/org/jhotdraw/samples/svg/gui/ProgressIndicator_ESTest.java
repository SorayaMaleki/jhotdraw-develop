/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 02 15:00:19 GMT 2021
 */

package org.jhotdraw.samples.svg.gui;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import javax.swing.BoundedRangeModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jhotdraw.samples.svg.gui.ProgressIndicator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ProgressIndicator_ESTest extends ProgressIndicator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ProgressIndicator progressIndicator0 = new ProgressIndicator("$T.Hx", "q6e|t?nO]0KI6Esp");
      progressIndicator0.setMinimum(100);
      assertTrue(progressIndicator0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ProgressIndicator progressIndicator0 = new ProgressIndicator();
      progressIndicator0.setIndeterminate(false);
      boolean boolean0 = progressIndicator0.isIndeterminate();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ProgressIndicator progressIndicator0 = new ProgressIndicator();
      String string0 = progressIndicator0.getNote();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ProgressIndicator progressIndicator0 = new ProgressIndicator("9C2tL SRB2", "");
      String string0 = progressIndicator0.getNote();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ProgressIndicator progressIndicator0 = new ProgressIndicator(":cC]&~wU", ".visible");
      progressIndicator0.setMaximum((-2404));
      int int0 = progressIndicator0.getMinimum();
      assertEquals((-2404), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ProgressIndicator progressIndicator0 = new ProgressIndicator((String) null, "");
      String string0 = progressIndicator0.getMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ProgressIndicator progressIndicator0 = new ProgressIndicator("", "");
      String string0 = progressIndicator0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ProgressIndicator progressIndicator0 = new ProgressIndicator("org.jhotdraw.samples.svg.gui.ProgressIndicator", "org.jhotdraw.samples.svg.gui.ProgressIndicator", 0, 0, false);
      int int0 = progressIndicator0.getMaximum();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ProgressIndicator progressIndicator0 = new ProgressIndicator(":cC]&~wU", ".visible");
      progressIndicator0.setMaximum((-2404));
      int int0 = progressIndicator0.getMaximum();
      assertEquals((-2404), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ProgressIndicator progressIndicator0 = new ProgressIndicator("e?", "8ppn^f", (-1674), 0, true);
      progressIndicator0.setProgressModel((BoundedRangeModel) null);
      // Undeclared exception!
      try { 
        progressIndicator0.getMaximum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.samples.svg.gui.ProgressIndicator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ProgressIndicator progressIndicator0 = null;
      try {
        progressIndicator0 = new ProgressIndicator("", "", 4274, 4812, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid range properties
         //
         verifyException("javax.swing.DefaultBoundedRangeModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ProgressIndicator progressIndicator0 = new ProgressIndicator(":cC]&~wU", ".visible");
      progressIndicator0.setNote(":cC]&~wU");
      assertFalse(progressIndicator0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ProgressIndicator progressIndicator0 = new ProgressIndicator(":cC]&~wU", ".visible");
      progressIndicator0.setMessage("");
      assertTrue(progressIndicator0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ProgressIndicator progressIndicator0 = new ProgressIndicator("DM0~|", "DM0~|");
      progressIndicator0.setNote((String) null);
      progressIndicator0.setNote("DM0~|");
      assertFalse(progressIndicator0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ProgressIndicator progressIndicator0 = new ProgressIndicator("DM0~|", "DM0~|");
      int int0 = progressIndicator0.getMinimum();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ProgressIndicator progressIndicator0 = new ProgressIndicator("DM0~|", "DM0~|");
      progressIndicator0.setProgress(100);
      assertFalse(progressIndicator0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ProgressIndicator progressIndicator0 = new ProgressIndicator("DM0~|", "DM0~|");
      String string0 = progressIndicator0.getMessage();
      assertEquals("DM0~|", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ProgressIndicator progressIndicator0 = new ProgressIndicator();
      boolean boolean0 = progressIndicator0.isIndeterminate();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ProgressIndicator progressIndicator0 = new ProgressIndicator();
      progressIndicator0.setMinimum(1);
      int int0 = progressIndicator0.getMinimum();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ProgressIndicator progressIndicator0 = new ProgressIndicator("DM0~|", "DM0~|");
      int int0 = progressIndicator0.getMaximum();
      assertEquals(100, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ProgressIndicator progressIndicator0 = new ProgressIndicator("DM0~|", "DM0~|");
      String string0 = progressIndicator0.getNote();
      assertEquals("DM0~|", string0);
  }
}
